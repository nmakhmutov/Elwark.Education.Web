@page "/account"
@using Education.Client.Gateways.Customer
@using Education.Client.Gateways.Models.User
@using Microsoft.Extensions.Configuration

@attribute [Authorize]

<MainContainer>
    <ApiResponseViewer Response="@_customer">
        <Placeholder>
            <div class="wrapper">
                <div class="account">
                    <SkeletonCard/>
                </div>
                <div class="subjects">
                    <SkeletonCard/>
                </div>
            </div>
        </Placeholder>
        <Result Context="customer">
            <PageTitle>@customer.Name</PageTitle>
            <div class="wrapper">
                <div class="account mud-paper mud-elevation-1">
                    <AuthorizeView>
                        <Authorized>
                            <div class="avatar">
                                <MudAvatar Class="image" Image="@context.User.GetImage()"/>
                                <MudText Typo="Typo.subtitle1">
                                    @context.User.GetName()
                                </MudText>
                            </div>
                            <div class="d-flex flex-wrap flex-row justify-center">
                                <MudButton Class="ma-1" Color="Color.Primary" Variant="Variant.Filled" EndIcon="@Icons.Filled.AccountCircle" Link="@Configuration["Urls:Account"]" Target="_blank">
                                    @L["ElwarkAccount"]
                                </MudButton>
                                <MudButton Class="ma-1" Color="Color.Default" Variant="Variant.Text" EndIcon="@Icons.Filled.Logout" OnClick="@BeginSignOut">
                                    @L["Logout"]
                                </MudButton>
                            </div>
                        </Authorized>
                    </AuthorizeView>
                </div>
                <div class="subjects">
                    <MudText Typo="Typo.h5" Class="mb-3">
                        @L["Subjects"]
                    </MudText>
                    <MudTable Items="@customer.Subjects" Breakpoint="Breakpoint.Xs">
                        <HeaderContent>
                            <MudTh>@L["Subject"]</MudTh>
                            <MudTh>@L["Subscription"]</MudTh>
                            <MudTh/>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="@L["Subject"]">
                                <div class="d-flex flex-sm-row-reverse justify-sm-end align-center">
                                    <div>
                                        <MudLink Href="@SubjectLink(context.Type)" Typo="Typo.subtitle1">
                                            @L[$"Subject:{context.Type}"]
                                        </MudLink>
                                        @if (context.CurrentTests > 0)
                                        {
                                            <MudText Typo="Typo.body2" Color="Color.Warning">
                                                @L["CurrentTests"] @context.CurrentTests
                                            </MudText>
                                        }
                                    </div>
                                    <MudAvatar Class="ml-3 ml-sm-0 mr-sm-3" Image="@context.Type.GetStatic().Image"/>
                                </div>

                            </MudTd>
                            <MudTd DataLabel="@L["Subscription"]">
                                @L[$"Subscription:{context.Subscription}"]
                            </MudTd>
                            <MudTd>
                                @if (context.Subscription == SubscriptionType.Free)
                                {
                                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@(() => OnBuyClick(context.Type))">
                                        @L["Subscription:Upgrade"]
                                    </MudButton>
                                }
                                else
                                {
                                    @context.ExpiredAt?.ToSimpleFormat()
                                }
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </div>
            </div>
        </Result>
    </ApiResponseViewer>
</MainContainer>

@code {
    private ApiResponse<Customer> _customer = ApiResponse<Customer>.Loading();

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private ICustomerClient CustomerClient { get; set; } = default!;

    [Inject]
    private IDialogService Dialog { get; set; } = default!;

    [Inject]
    private IConfiguration Configuration { get; set; } = default!;

    [Inject]
    private SignOutSessionStateManager SignOutManager { get; set; } = default!;

    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        _customer = await CustomerClient.GetAsync();
    }

    private void OnBuyClick(SubjectType type)
    {
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Large,
            NoHeader = true,
            CloseButton = false,
            FullWidth = true
        };

        var parameters = new DialogParameters
        {
            [nameof(SubscriptionModal.SubjectType)] = type
        };

        Dialog.Show<SubscriptionModal>(null, parameters, options);
    }

    private async Task BeginSignOut(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo(Links.Authentication.LogOut);
    }

    private static string SubjectLink(SubjectType type) =>
        type switch {
            SubjectType.History => Links.Subject.History.Profile.Me,
            _ => "#"
            };

}
