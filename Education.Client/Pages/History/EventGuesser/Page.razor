@page "/history/event-guesser"
@using Education.Client.Gateways.History
@using Education.Client.Gateways.History.EventGuesser
@using Education.Client.Gateways.History.Me
@layout HistoryLayout

<PageTitle>
    @L["EventGuesser"]
</PageTitle>

@if (_conclusion.Status == ResponseStatus.Success)
{
    <MainContainer>
        <PageHeader Title="@L["EventGuesser"]" Breadcrumbs="@Breadcrumbs"/>
    </MainContainer>
    <CenteredContainer MaxWidth="ContainerWidth.W1280" Class="mb-3 mb-sm-6" Paper="true" Elevation="1">
        <EventGuesserConclusion Class="ma-3 ma-sm-6" Conclusion="@_conclusion.Data" OnCreateNew="@OnCreateNewClick"/>
    </CenteredContainer>
}
else if (_eventGuesser.Status == ResponseStatus.Success)
{
    <MainContainer>
        <PageHeader Title="@L["EventGuesser"]" Breadcrumbs="@Breadcrumbs"/>
    </MainContainer>
    <CenteredContainer MaxWidth="ContainerWidth.W960" Class="mb-3 mb-sm-6" Paper="true" Elevation="1">
        <EventGuesserTest Class="ma-3 ma-sm-6" Test="@_eventGuesser.Data" OnCheck="@OnCheckAsync"/>
    </CenteredContainer>
}
else
{
    <div class="background">
        <MainContainer>
            <PageHeader Title="@L["EventGuesser"]" Class="mb-3" Breadcrumbs="@Breadcrumbs"/>
            <div class="mw-xs">
                <EventGuesserBuilder Restriction="@_restrictions" OnCreate="@OnCreateAsync"/>
            </div>
        </MainContainer>
    </div>
}

@code {

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["Subject:History"].Value, Links.History.Index)
    };

    private ApiResponse<HistoryUserRestriction> _restrictions = ApiResponse<HistoryUserRestriction>.Loading();
    private ApiResponse<EventGuesserTestModel> _eventGuesser = ApiResponse<EventGuesserTestModel>.Loading();
    private ApiResponse<EventGuesserConclusionModel> _conclusion = ApiResponse<EventGuesserConclusionModel>.Loading();

    [Inject]
    public IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryClient Client { get; set; } = default!;

    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var eventGuesser = await Client.EventGuesser.GetAsync();

        if (eventGuesser.IsSuccess)
            _eventGuesser = eventGuesser;
        else
            _restrictions = await Client.Me.GetRestrictions();
    }

    private async Task OnCreateAsync(EventGuesserCreateRequest request)
    {
        _eventGuesser = await Client.EventGuesser.CreateAsync(request);
        if (!_eventGuesser.IsSuccess)
            Snackbar.Add(_eventGuesser.Error.Message, Severity.Error);
    }

    private async Task<EventGuesserCheckModel?> OnCheckAsync(EventGuesserCheckRequest request)
    {
        var result = await Client.EventGuesser.CheckAsync(request);
        if (!result.IsSuccess)
        {
            Snackbar.Add(result.Error.Message, Severity.Error);
            return null;
        }

        if (!result.Data.IsComplete)
            return result.Data;

        _conclusion = await Client.EventGuesser.ConcludeAsync();
        if (!_conclusion.IsSuccess)
            Snackbar.Add(_conclusion.Error.Message, Severity.Error);

        StateHasChanged();
        return result.Data;
    }

    private async Task OnCreateNewClick()
    {
        _eventGuesser = ApiResponse<EventGuesserTestModel>.Loading();
        _conclusion = ApiResponse<EventGuesserConclusionModel>.Loading();
        _restrictions = await Client.Me.GetRestrictions();
    }

}
