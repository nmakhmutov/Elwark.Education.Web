@page "/history/tests/{id}"
@layout HistoryLayout
@using Education.Client.Gateways.History
@using Education.Client.Gateways.History.Test

@attribute [Authorize]

<MainContainer>
    <ApiResponseViewer Response="@_test">
        <Placeholder>
            <section class="section">
                <div class="container mud-paper mud-elevation-1">
                    <div class="d-flex justify-space-between align-center ma-3">
                        <div>
                            <MudSkeleton Width="15vw" SkeletonType="SkeletonType.Text"/>
                            <MudSkeleton Width="20vw" SkeletonType="SkeletonType.Text"/>
                        </div>
                        <div>
                            <MudSkeleton Width="15vw" Height="24px" SkeletonType="SkeletonType.Rectangle"/>
                        </div>
                    </div>
                </div>
            </section>

            <section class="section">
                <div class="container mud-paper mud-elevation-1 pa-3 pa-sm-6">
                    <MudSkeleton Width="80%" SkeletonType="SkeletonType.Text" Class="mx-auto"/>
                    <MudSkeleton Width="80%" SkeletonType="SkeletonType.Text" Class="mx-auto"/>
                    <MudSkeleton Width="80%" Height="30vh" SkeletonType="SkeletonType.Rectangle" Class="mx-auto my-6"/>
                    <MudSkeleton Width="20%" Height="36px" SkeletonType="SkeletonType.Rectangle" Class="mx-auto"/>
                </div>
            </section>
        </Placeholder>
        <Result Context="test">
            <PageTitle>@L[$"Test:{test.TestType}"]</PageTitle>

            <section class="section">
                <div class="container mud-paper mud-elevation-1">
                    <TestHeader
                        Type="@test.TestType"
                        AllowedMistakes="@test.AllowedMistakes"
                        CurrentQuestion="@(_questionIndex + 1)"
                        TotalQuestions="@_questions.Count"
                        ExpiredAt="@test.ExpiredAt"
                        CountDownColor="@_countdownColor"
                        OnComplete="@OnExpired"/>
                </div>
            </section>

            <section class="section">
                <div class="container mud-paper mud-elevation-1">
                    <TestForm
                        Question="@_questions[_questionIndex]"
                        AnswerResult="@_answerResult"
                        OnAnswer="@OnAnswer"
                        OnNext="@NextQuestion"/>
                </div>
            </section>
        </Result>
    </ApiResponseViewer>
</MainContainer>

@code {

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryClient HistoryClient { get; set; } = default!;

    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;

    [Parameter]
    public string Id { get; init; } = default!;

    private bool _isTestComplete;
    private Color _countdownColor = Color.Default;
    private ApiResponse<TestModel> _test = ApiResponse<TestModel>.Loading();
    private List<TestQuestion> _questions = new();
    private int _questionIndex;
    private TestAnswerResult? _answerResult;

    protected override async Task OnInitializedAsync()
    {
        _test = await HistoryClient.Test.GetAsync(Id);

        if (_test.Status == ResponseStatus.Fail && (_test.Error.IsNotFound() || _test.Error.IsExpired()))
        {
            NavigationManager.NavigateTo(Links.History.Test.Conclusion(Id));
            return;
        }

        if (_test.Status != ResponseStatus.Success)
            return;

        _questions = _test.Data.Questions
            .OrderByDescending(x => x.IsAnswered)
            .ToList();

        _questionIndex = _questions.FindLastIndex(x => x.IsAnswered) + 1;
    }

    private async Task OnAnswer(TestAnswer answer)
    {
        switch (answer)
        {
            case ManyAnswer x:
            {
                var result = await HistoryClient.Test.CheckAsync(_test.Data.Id, _questions[_questionIndex].Id, x);
                if (result.Status == ResponseStatus.Fail)
                {
                    _test = ApiResponse<TestModel>.Fail(result.Error);
                    return;
                }
                _answerResult = result.Data;
                break;
            }

            case OneAnswer x:
            {
                var result = await HistoryClient.Test.CheckAsync(_test.Data.Id, _questions[_questionIndex].Id, x);
                if (result.Status == ResponseStatus.Fail)
                {
                    _test = ApiResponse<TestModel>.Fail(result.Error);
                    return;
                }
                _answerResult = result.Data;
                break;
            }

            case TextAnswer x:
            {
                var result = await HistoryClient.Test.CheckAsync(_test.Data.Id, _questions[_questionIndex].Id, x);
                if (result.Status == ResponseStatus.Fail)
                {
                    _test = ApiResponse<TestModel>.Fail(result.Error);
                    return;
                }
                _answerResult = result.Data;
                break;
            }
                
            default:
                throw new ArgumentOutOfRangeException(nameof(answer));
        }

        _isTestComplete = _answerResult.IsTestComplete;

        if (!_answerResult.IsAnswerCorrect)
        {
            if (_test.Data.AllowedMistakes >= 0)
            {
                _test = ApiResponse<TestModel>.Success(_test.Data with{AllowedMistakes = _test.Data.AllowedMistakes - 1});
            }

            if (_test.Data.TestType == TestType.Easy)
            {
                var wrong = _questions.First(x => x.Id == _questions[_questionIndex].Id);
                _questions.Add(wrong with{Options = wrong.Options.OrderBy(_ => Guid.NewGuid()).ToArray()});
            }
        }
    }

    private void NextQuestion()
    {
        if (_isTestComplete)
        {
            NavigationManager.NavigateTo(Links.History.Test.Conclusion(Id));
            return;
        }

        _questionIndex++;
        _answerResult = null;
    }

    private async Task OnExpired()
    {
        _countdownColor = Color.Error;
        _test = await HistoryClient.Test.GetAsync(Id);

        if (_test.Status == ResponseStatus.Fail && (_test.Error.IsNotFound() || _test.Error.IsExpired()))
            NavigationManager.NavigateTo(Links.History.Test.Conclusion(Id));
    }

}
