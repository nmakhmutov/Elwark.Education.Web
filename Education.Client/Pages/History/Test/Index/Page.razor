@page "/history/tests"
@using Education.Client.Gateways.History
@using Education.Client.Gateways.History.Me
@using Education.Client.Gateways.History.Test
@layout HistoryLayout

<div class="background">
    <MainContainer>
        <PageTitle>@L["Tests"]</PageTitle>
        <PageHeader Title="@L["Tests"]" Class="mb-3" Breadcrumbs="@Breadcrumbs"/>
        <MudList Class="mb-6" Dense="true" DisableGutters="true" DisablePadding="true">
            <MudListItem Text="@L["Test:EasyDescription"]"/>
            <MudListItem Text="@L["Test:HardDescription"]"/>
            <MudListItem Text="@L["Test:MixedDescription"]"/>
        </MudList>
        <div class="mw-xs">
            <EditForm Model="@_model" OnValidSubmit="@OnValidSubmit">

                <MudSelect Label="@L["History:Epoch"]" @bind-Value="@_model.Epoch" Class="mb-3">
                    <MudSelectItem Value="@EpochType.None">@L["All"]</MudSelectItem>
                    @foreach (var period in Enum.GetValues<EpochType>().Where(x => x != EpochType.None))
                    {
                        <MudSelectItem Value="@period">
                            @L[$"History:{period}"]
                        </MudSelectItem>
                    }
                </MudSelect>

                <MudSelect Label="@L["Test:Difficulty"]" @bind-Value="@_model.Difficulty" Class="mb-3">
                    @foreach (var difficulty in Enum.GetValues<TestType>())
                    {
                        <MudSelectItem Value="@difficulty">
                            @L[$"Test:{difficulty}"]
                        </MudSelectItem>
                    }
                </MudSelect>
                
                <ApiResponseViewer Response="_response">
                    <Placeholder>
                        <div class="mb-3">
                            <MudSkeleton SkeletonType="SkeletonType.Text" Height="28px"/>
                        </div>
                        <div class="d-flex justify-end">
                            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="140px" Height="36px"/>
                        </div>
                    </Placeholder>
                    <Result Context="restrictions">
                        <div class="d-flex justify-space-between mb-3">
                            <MudText Typo="Typo.subtitle1">
                                @L["Subscription:TestCreation"]
                            </MudText>
                            <RestrictionQuantityView Restriction="@restrictions.TestCreation" Class="mr-2"/>
                        </div>
                        <TestWrapper Typo="Typo.subtitle1" Subject="@SubjectType.History" Status="@restrictions.TestStatus">
                            <div class="d-flex justify-end">
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Disabled="_isLoading" Class="ml-auto">
                                    @if (_isLoading)
                                    {
                                        <div class="d-flex flex-row align-center">
                                            <MudProgressCircular Class="mr-3" Size="Size.Small" Indeterminate="true"/>
                                            @L["Test:Creating"]
                                        </div>
                                    }
                                    else
                                    {
                                        @L["Test:Create"]
                                    }
                                </MudButton>
                            </div>
                        </TestWrapper>
                    </Result>
                </ApiResponseViewer>
            </EditForm>
        </div>
    </MainContainer>
</div>

@code {

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["Subject:History"].Value, Links.History.Index)
    };

    private ApiResponse<HistoryUserRestriction> _response = ApiResponse<HistoryUserRestriction>.Loading();
    private Model _model = new();
    private bool _isLoading;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryClient Client { get; set; } = default!;

    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;

    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        _response = await Client.Me.GetRestrictions();
    }

    private async Task OnValidSubmit()
    {
        _isLoading = true;
        var request = new CreateTestRequest(_model.Epoch);
        var response = await (_model.Difficulty switch {
            TestType.Easy => Client.Test.CreateRandomEasyTestAsync(request),
            TestType.Hard => Client.Test.CreateRandomHardTestAsync(request),
            TestType.Mixed => Client.Test.CreateRandomMixedTestAsync(request),
            _ => throw new ArgumentOutOfRangeException()
            });

        if (response.Status == ResponseStatus.Success)
            NavigationManager.NavigateTo(Links.History.Test.ById(response.Data.Id));
        else
            Snackbar.Add(response.Error.Message, Severity.Error);

        _isLoading = false;
    }

    public record Model
    {
        public EpochType Epoch { get; set; } = EpochType.None;

        public TestType Difficulty { get; set; } = TestType.Easy;
    }

}
