@page "/history/tests"
@using Education.Client.Gateways.History.Me
@using Education.Client.Gateways.History.Test
@using Education.Client.Gateways.History
@layout HistoryLayout

@attribute [Authorize]

<div class="background">
    <MainContainer>
        <PageTitle>@L["Tests"]</PageTitle>
        <PageHeader Title="@L["Tests"]" Class="mb-3" Breadcrumbs="@Breadcrumbs"/>
        <MudList Class="mb-6" Dense="true" DisableGutters="true" DisablePadding="true">
            <MudListItem Text="@L["Test:EasyDescription"]"/>
            <MudListItem Text="@L["Test:HardDescription"]"/>
            <MudListItem Text="@L["Test:MixedDescription"]"/>
        </MudList>
        <div class="mw-xs">
            <EditForm Model="@_model" OnValidSubmit="@OnValidSubmit">

                <MudSelect Label="@L["History:Epoch"]" @bind-Value="@_model.Epoch" Class="mb-3">
                    <MudSelectItem Value="@EpochType.None">@L["All"]</MudSelectItem>
                    @foreach (var period in Enum.GetValues<EpochType>().Where(x => x != EpochType.None))
                    {
                        <MudSelectItem Value="@period">
                            @L[$"History:{period}"]
                        </MudSelectItem>
                    }
                </MudSelect>

                <MudSelect Label="@L["Test:Difficulty"]" @bind-Value="@_model.Difficulty" Class="mb-3">
                    @foreach (var difficulty in Enum.GetValues<TestType>())
                    {
                        <MudSelectItem Value="@difficulty">
                            @L[$"Test:{difficulty}"]
                        </MudSelectItem>
                    }
                </MudSelect>

                <ApiViewer Response="_response">
                    <Loading>
                        <div class="mb-3">
                            <MudSkeleton SkeletonType="SkeletonType.Text" Height="28px"/>
                        </div>
                        <div class="d-flex justify-end">
                            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="140px" Height="36px"/>
                        </div>
                    </Loading>
                    <Success Context="restrictions">
                        <div class="d-flex justify-space-between mb-3">
                            <MudText Typo="Typo.subtitle1">
                                @L["Subscription:TestCreation"]
                            </MudText>
                            <RestrictionQuantityView Restriction="@restrictions.TestCreation.Restriction" Class="mr-2"/>
                        </div>
                        <TestPermissionWrapper Status="@restrictions.TestCreation.Status" Subject="@SubjectType.History" Typo="Typo.subtitle1">
                            <div class="d-flex justify-end">
                                <LoadingButton
                                    Class="ml-auto"
                                    ButtonType="ButtonType.Submit"
                                    Text="@L["Test:Create"]"
                                    LoadingText="@L["Test:Creating"]"
                                    IsLoading="@_isLoading"/>
                            </div>
                        </TestPermissionWrapper>
                    </Success>
                </ApiViewer>
            </EditForm>
        </div>
    </MainContainer>
</div>

@code {
    private bool _isLoading;
    private ApiResponse<HistoryUserRestriction> _response = ApiResponse<HistoryUserRestriction>.Loading();
    private readonly Model _model = new();

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["Subject:History"].Value, Links.History.Index)
    };

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryClient Client { get; set; } = default!;

    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;

    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    protected override async Task OnInitializedAsync() =>
        _response = await Client.Me.GetRestrictions();

    private async Task OnValidSubmit()
    {
        _isLoading = true;
        
        var request = new CreateTestRequest(_model.Epoch);
        var response = _model.Difficulty switch {
            TestType.Easy => await Client.Test.CreateRandomEasyTestAsync(request),
            TestType.Hard => await Client.Test.CreateRandomHardTestAsync(request),
            TestType.Mixed => await Client.Test.CreateRandomMixedTestAsync(request),
            _ => throw new ArgumentOutOfRangeException()
            };

        if (response.Status == ResponseStatus.Success)
            NavigationManager.NavigateTo(Links.History.TestById(response.Data.Id));
        else
            Snackbar.Add(response.Error.Message, Severity.Error);

        _isLoading = false;
    }

    public record Model
    {
        public EpochType Epoch { get; set; } = EpochType.None;

        public TestType Difficulty { get; set; } = TestType.Easy;
    }

}
