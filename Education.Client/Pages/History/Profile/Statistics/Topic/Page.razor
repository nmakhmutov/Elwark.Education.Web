@page "/history/profile/me/statistics/topic/{id}"
@using Education.Client.Gateways.History
@using Education.Client.Gateways.History.Me
@layout HistoryLayout

@attribute [Authorize]

<MainContainer>
    <CenteredContainer MaxWidth="ContainerWidth.W1280" Class="pa-0">
        <ApiResponseViewer Response="@_response">
            <Placeholder>
                <DefaultFitGrid>
                    <SkeletonCard/>
                    <SkeletonCard/>
                    <SkeletonCard/>
                </DefaultFitGrid>
            </Placeholder>
            <Result Context="result">
                <PageTitle>@result.Topic.Title</PageTitle>

                <MudPaper Class="d-md-flex justify-space-between align-center pa-3 pa-sm-6 mb-3 mb-sm-6">
                    <div class="d-flex flex-column flex-sm-row justify-center align-center mb-3 mb-sm-6 mb-md-0">
                        <div class="avatar">
                            <img src="@result.Topic.Image" alt="@result.Topic.Title"/>
                        </div>
                        <div class="d-flex flex-column justify-space-between">
                            <MudLink Class="mt-3 mt-sm-0" Typo="Typo.h5" Href="@Links.History.Topic.ById(result.Topic.Id)">
                                @result.Topic.Title
                            </MudLink>
                            <Breadcrumbs Items="@Breadcrumbs" Class="pa-0 mt-3"/>
                            <MudText Class="d-none d-sm-block mt-3 mw-xs" Typo="Typo.body2">
                                @result.Topic.Overview
                            </MudText>
                        </div>
                    </div>
                    <div>
                        <div class="d-flex justify-space-between mb-3">
                            <div class="d-flex align-center mr-3">
                                <MudIcon Icon="@Icons.Filled.School" Size="Size.Small" Class="mr-3"/>
                                <MudText Typo="Typo.body2">
                                    @L["NumberOfTests:TotalPassed"]
                                </MudText>
                            </div>
                            <MudText Typo="Typo.body2">
                                @result.Progress.Tests.ToReadable()
                            </MudText>
                        </div>
                        <div class="d-flex justify-space-between mb-3">
                            <div class="d-flex align-center mr-3">
                                <MudIcon Icon="@Icons.Filled.PendingActions" Size="Size.Small" Class="mr-3"/>
                                <MudText Typo="Typo.body2">
                                    @L["Score:Total"]
                                </MudText>
                            </div>
                            <MudText Typo="Typo.body2">
                                @result.Progress.Score.ToReadable()
                            </MudText>
                        </div>
                        <div class="d-flex justify-space-between mb-3">
                            <div class="d-flex align-center mr-3">
                                <MudIcon Icon="@Icons.Filled.HelpOutline" Size="Size.Small" Class="mr-3"/>
                                <MudText Typo="Typo.body2">
                                    @L["Questions:Total"]
                                </MudText>
                            </div>
                            <MudText Typo="Typo.body2">
                                @result.Progress.Questions.ToReadable()
                            </MudText>
                        </div>
                        <div class="d-flex justify-space-between mb-3">
                            <div class="d-flex align-center mr-3">
                                <MudIcon Icon="@Icons.Filled.Timer" Size="Size.Small" Class="mr-3"/>
                                <MudText Typo="Typo.body2">
                                    @L["TimeSpent:Total"]
                                </MudText>
                            </div>
                            <MudText Typo="Typo.body2">
                                @result.Progress.TimeSpent.ToLongFormat()
                            </MudText>
                        </div>
                    </div>
                </MudPaper>

                @Header(new HeaderProps(L["Tests:Easy"], Links.History.Profile.EasyTestStatistics, L["TimeSpent"], result.EasyTest.TimeSpent))
                <DefaultFitGrid Class="mb-3 mb-sm-6">
                    <StatisticsCard Icon="@Icons.Filled.School" Title="@L["Tests"]" Value="@result.EasyTest.NumberOfTests.Total">
                        <NumberOfTestChart Value="@result.EasyTest.NumberOfTests"/>
                    </StatisticsCard>
                    <StatisticsCard Icon="@Icons.Filled.PendingActions" Title="@L["Score"]" Value="@result.EasyTest.Score.Total">
                        <ScoreChart Value="@result.EasyTest.Score"/>
                    </StatisticsCard>
                    <StatisticsCard Icon="@Icons.Filled.HelpOutline" Title="@L["Questions"]" Value="@result.EasyTest.AnswerRatio.Questions">
                        <AnswerRatioChart Value="@result.EasyTest.AnswerRatio"/>
                    </StatisticsCard>
                </DefaultFitGrid>

                @if (result.EasyTest.Conclusions.Length > 0)
                {
                    <MudExpansionPanels>
                        @foreach (var conclusion in result.EasyTest.Conclusions)
                        {
                            <MudExpansionPanel>
                                <TitleContent>
                                    <div class="d-flex">
                                        <MudText Typo="Typo.subtitle1" Class="mr-3">
                                            @conclusion.CompletedAt.ToSimpleFormat()
                                        </MudText>
                                        <MudText Typo="@Typo.subtitle1" Color="@conclusion.Status.GetColor()">
                                            @L[$"ConclusionStatus:{conclusion.Status}"]
                                        </MudText>
                                    </div>
                                </TitleContent>
                                <ChildContent>
                                    <TestConclusionList
                                        TimeSpent="@conclusion.TimeSpent"
                                        Score="@conclusion.Score"
                                        AnswerRatio="@conclusion.AnswerRatio"/>
                                </ChildContent>
                            </MudExpansionPanel>
                        }
                    </MudExpansionPanels>
                }

                <div class="py-6"></div>
                @Header(new HeaderProps(L["Tests:Hard"], Links.History.Profile.HardTestStatistics, L["TimeSpent"], result.HardTest.TimeSpent))
                <DefaultFitGrid Class="mb-3 mb-sm-6">
                    <StatisticsCard Icon="@Icons.Filled.School" Title="@L["Tests"]" Value="@result.HardTest.NumberOfTests.Total">
                        <NumberOfTestChart Value="@result.HardTest.NumberOfTests"/>
                    </StatisticsCard>
                    <StatisticsCard Icon="@Icons.Filled.PendingActions" Title="@L["Score"]" Value="@result.HardTest.Score.Total">
                        <ScoreChart Value="@result.HardTest.Score"/>
                    </StatisticsCard>
                    <StatisticsCard Icon="@Icons.Filled.HelpOutline" Title="@L["Questions"]" Value="@result.HardTest.AnswerRatio.Questions">
                        <AnswerRatioChart Value="@result.HardTest.AnswerRatio"/>
                    </StatisticsCard>
                </DefaultFitGrid>

                @if (result.HardTest.Conclusions.Length > 0)
                {
                    <MudExpansionPanels>
                        @foreach (var conclusion in result.HardTest.Conclusions)
                        {
                            <MudExpansionPanel>
                                <TitleContent>
                                    <div class="d-flex">
                                        <MudText Typo="Typo.subtitle1" Class="mr-3">
                                            @conclusion.CompletedAt.ToSimpleFormat()
                                        </MudText>
                                        <MudText Typo="@Typo.subtitle1" Color="@conclusion.Status.GetColor()">
                                            @L[$"ConclusionStatus:{conclusion.Status}"]
                                        </MudText>
                                    </div>
                                </TitleContent>
                                <ChildContent>
                                    <TestConclusionList
                                        TimeSpent="@conclusion.TimeSpent"
                                        Score="@conclusion.Score"
                                        AnswerRatio="@conclusion.AnswerRatio"/>
                                </ChildContent>
                            </MudExpansionPanel>
                        }
                    </MudExpansionPanels>
                }
            </Result>
        </ApiResponseViewer>
    </CenteredContainer>
</MainContainer>

@* ReSharper disable InconsistentNaming *@
@* ReSharper disable once UnusedParameter.Local *@

@code {
    private List<BreadcrumbItem> Breadcrumbs = new();

    private ApiResponse<TopicStatistics> _response = ApiResponse<TopicStatistics>.Loading();

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryClient HistoryClient { get; set; } = default!;

    [Parameter]
    public string Id { get; set; } = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        _response = await HistoryClient.Me.GetTopicStatisticsAsync(Id);

        if (_response.Status == ResponseStatus.Success)
            Breadcrumbs = new List<BreadcrumbItem>
            {
                new(L["Profile"].Value, Links.History.Profile.Me),
                new(L["Subject:History"].Value, Links.History.Index),
                new(L[$"History:{_response.Data.Topic.Epoch}"].Value, Links.History.Topic.ByEpoch(_response.Data.Topic.Epoch))
            };
    }

    private readonly RenderFragment<HeaderProps> Header = message => __builder =>
    {
        <div class="d-flex flex-wrap align-center justify-space-between mb-3 mr-3">
            <MudLink Href="@message.Link" Typo="Typo.h5">
                @message.Title
            </MudLink>
            <div class="d-flex align-center">
                <MudTooltip Text="@message.Tooltip">
                    <MudText Typo="Typo.h5" Class="mr-3">
                        @message.TimeSpent.ToLongFormat()
                    </MudText>
                </MudTooltip>
                <MudAvatar Color="Color.Primary" Size="Size.Medium">
                    <MudIcon Icon="@Icons.Filled.Timer" Size="Size.Medium"/>
                </MudAvatar>
            </div>
        </div>
    };

    private sealed record HeaderProps(LocalizedString Title, string Link, LocalizedString Tooltip, TimeSpan TimeSpent);

}
