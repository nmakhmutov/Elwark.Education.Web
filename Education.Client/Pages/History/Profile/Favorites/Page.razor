@page "/history/profile/me/favorites"
@using Education.Client.Gateways.History
@layout HistoryLayout

@attribute [Authorize]

<PageTitle>@L["Favorites"]</PageTitle>
<MainContainer>
    <PageHeader Title="@L["Favorites"]" Class="mb-6" Breadcrumbs="@Breadcrumbs"/>
    <DefaultFitGrid>
        <ApiResponseViewer Response="@_favorites">
            <Placeholder>
                <SkeletonCard/>
                <SkeletonCard/>
                <SkeletonCard/>
                <SkeletonCard/>
            </Placeholder>
            <Result Context="favorites">
                @if (favorites.Items.Length > 0)
                {
                    @foreach (var item in favorites.Items)
                    {
                        <TopicCard
                            Id="@item.Id"
                            Epoch="@item.Epoch"
                            Image="@item.Image"
                            Title="@item.Title"
                            Overview="@item.Overview"
                            Rating="@item.Rating"
                            Progress="@item.Progress"
                            IsFavorite="@item.IsFavorite"
                            OnFavoriteClick="@OnFavoriteClick"/>
                    }
                    <InfinityScroll ObserverTargetId="observerTarget" ObservableTargetReached="@LoadMoreAsync">
                        <div id="observerTarget" class="grid-full-row d-flex justify-center my-6">
                            @if (_request.Page < _favorites.Data.Pages)
                            {
                                <MudProgressCircular Indeterminate="true"/>
                            }
                        </div>
                    </InfinityScroll>
                }
                else
                {
                    <EmptyResult
                        Class="grid-full-row"
                        Title="@L["Profile:EmptyFavoritesTitle"]"
                        Subtitle="@L["Profile:EmptyFavoritesSubtitle"]"/>
                }
            </Result>
        </ApiResponseViewer>
    </DefaultFitGrid>
</MainContainer>

@code {
    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["Account"].Value, Links.Account.Index),
        new BreadcrumbItem(L["Subject:History"].Value, Links.Subject.History.Index)
    };
    
    [Inject]
    private IHistoryClient HistoryClient { get; set; } = default!;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    private PageRequest _request = new(1, 20);
    private ApiResponse<PageResponse<UserTopicSummary>> _favorites = ApiResponse<PageResponse<UserTopicSummary>>.Loading();

    protected override async Task OnInitializedAsync()
    {
        _favorites = await HistoryClient.Me.GetFavoritesAsync(_request);
    }

    private async Task LoadMoreAsync()
    {
        if (_request.Page == _favorites.Data.Pages)
            return;

        _request = _request with{Page = _request.Page + 1};
        var response = await HistoryClient.Me.GetFavoritesAsync(_request);
        if (response.Status == ResponseStatus.Fail)
        {
            _favorites = ApiResponse<PageResponse<UserTopicSummary>>.Fail(response.Error);
            return;
        }

        _favorites = ApiResponse<PageResponse<UserTopicSummary>>.Success(
            new PageResponse<UserTopicSummary>(
                _favorites.Data.Items.Union(response.Data.Items).ToArray(),
                response.Data.Pages
                )
            );
    }

    private async Task<bool> OnFavoriteClick(string topicId)
    {
        var result = await HistoryClient.Topic.ToggleFavoriteAsync(topicId);
        return result.Status == ResponseStatus.Success && result.Data;
    }

}
