@page "/history/profile/me"
@using Education.Client.Gateways.History
@using Education.Client.Gateways.History.Me
@using MudBlazor.Services
@implements IDisposable
@layout HistoryLayout

@attribute [Authorize]

<PageTitle>@L["Profile"]</PageTitle>
<MainContainer>
    <PageHeader Title="@L["Profile"]" Class="mb-6" Breadcrumbs="@Breadcrumbs"/>
    <ApiResponseViewer Response="@_overview">
        <Placeholder>
            <div class="grid">
                <section class="subject">
                    <SkeletonCard Class="h-100"/>
                </section>

                <section class="points">
                    <SkeletonCard Class="h-100"/>
                </section>

                <section class="level">
                    <SkeletonCard/>
                </section>

                <section class="daily-reward">
                    <SkeletonCard/>
                </section>

                <section class="easy-test">
                    <SkeletonCard/>
                </section>

                <section class="hard-test">
                    <SkeletonCard/>
                </section>

                <section class="mixed-test">
                    <SkeletonCard/>
                </section>

                <section class="event-guesser">
                    <SkeletonCard/>
                </section>

                <section class="activity">
                    <SkeletonCard/>
                </section>

            </div>
        </Placeholder>
        <Result Context="overview">
            @if (overview.CurrentTests.Length > 0)
            {
                <MudText Typo="Typo.h5" Class="mb-3">
                    @L["CurrentTests"]
                </MudText>

                <DefaultFillGrid Class="mb-3 mb-sm-6">
                    @foreach (var test in overview.CurrentTests)
                    {
                        <CurrentTestCard Test="@test"/>
                    }
                </DefaultFillGrid>
            }
            <div class="grid">
                <section class="subject">
                    <SubjectCard
                        Class="h-100"
                        Subject="SubjectType.History"
                        Subscription="@overview.Subscription"
                        TestCreation="@overview.TestCreation"
                        TestQuestionMistakes="@overview.TestMistakes"
                        TestDurationCoefficient="@overview.TestDurationCoefficient"
                        EventGuesserCreation="@overview.EventGuesserCreation"
                        OnBuyClick="@OnBuyClick"/>
                </section>

                <section class="points">
                    <StatisticsCard
                        Class="h-100"
                        Icon="@Icons.Material.Filled.FilterTiltShift"
                        Title="@L["Experience:MyPoints"]"
                        Value="@overview.Experience.Points">
                        @if (overview.Experience.Recent.Length > 0)
                        {
                            var items = _timelineOrientation == TimelineOrientation.Horizontal
                                ? overview.Experience.Recent.Take(_recentCount).Reverse()
                                : overview.Experience.Recent.Take(_recentCount);

                            <MudTimeline TimelineOrientation="@_timelineOrientation">
                                @foreach (var transaction in items)
                                {
                                    <MudTimelineItem Color="Color.Transparent" Size="Size.Medium" Variant="Variant.Outlined">
                                        <ItemOpposite>
                                            <MudText Typo="Typo.h6">
                                                @transaction.Points
                                            </MudText>
                                        </ItemOpposite>
                                        <ItemDot>
                                            <MudIcon Icon="@Icons.Material.Filled.FilterTiltShift" Size="Size.Medium" Color="Color.Primary"/>
                                        </ItemDot>
                                        <ItemContent>
                                            <MudText Typo="Typo.button">
                                                @L[$"XpType:{transaction.Type}"]
                                            </MudText>
                                            <MudText Typo="Typo.body2" Class="mud-text-secondary">
                                                @transaction.CreatedAt.ToSimpleFormat()
                                            </MudText>
                                        </ItemContent>
                                    </MudTimelineItem>
                                }
                            </MudTimeline>
                        }
                    </StatisticsCard>
                </section>

                <section class="level">
                    <LevelCard
                        Level="@overview.Experience.Level"
                        Points="@overview.Experience.Points"
                        PointsToNextLevel="@overview.Experience.NextLevelPoints"/>
                </section>

                <section class="daily-reward">
                    <DailyRewardCard Reward="@overview.DailyReward" OnCollect="@CollectDailyReward"/>
                </section>

                <section class="easy-test">
                    <StatisticsCard
                        Icon="@Icons.Filled.School"
                        Title="@L["Tests:Easy"]"
                        Value="@overview.Statistics.EasyTest.NumberOfTests.Total"
                        Href="@Links.History.ProfileEasyTest">
                        <Subheader Title="@L["Score"]" Subtitle="@L["ForAllTime"]"/>
                        <ScoreChart Value="@overview.Statistics.EasyTest.Score"/>
                    </StatisticsCard>
                </section>

                <section class="hard-test">
                    <StatisticsCard
                        Icon="@Icons.Filled.School"
                        Title="@L["Tests:Hard"]"
                        Value="@overview.Statistics.HardTest.NumberOfTests.Total"
                        Href="@Links.History.ProfileHardTest">
                        <Subheader Title="@L["Score"]" Subtitle="@L["ForAllTime"]"/>
                        <ScoreChart Value="@overview.Statistics.HardTest.Score"/>
                    </StatisticsCard>
                </section>

                <section class="mixed-test">
                    <StatisticsCard
                        Icon="@Icons.Filled.School"
                        Title="@L["Tests:Mixed"]"
                        Value="@overview.Statistics.MixedTest.NumberOfTests.Total"
                        Href="@Links.History.ProfileMixedTest">
                        <Subheader Title="@L["Score"]" Subtitle="@L["ForAllTime"]"/>
                        <ScoreChart Value="@overview.Statistics.MixedTest.Score"/>
                    </StatisticsCard>
                </section>

                <section class="event-guesser">
                    <StatisticsCard
                        Icon="@Icons.Filled.EventAvailable"
                        Title="@L["EventGuesser"]"
                        Value="@overview.Statistics.EventGuesser.Tests"
                        Href="@Links.History.ProfileEventGuesser">
                        <Subheader Title="@L["Score"]" Subtitle="@L["ForAllTime"]"/>
                        <EventGuesserScoreChart
                            Score="@overview.Statistics.EventGuesser.Score"
                            Points="@overview.Statistics.EventGuesser.Points"
                            Bonus="@overview.Statistics.EventGuesser.Bonus"/>
                    </StatisticsCard>
                </section>

                <section class="activity">
                    <MudPaper>
                        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
                            <MudTabPanel Text="Daily">
                                <MudChart
                                    ChartType="ChartType.Line"
                                    Width="100%"
                                    Height="300px"
                                    ChartSeries="@_dailyChartSeries"
                                    XAxisLabels="@_dailyXAxis.ToArray()"/>
                            </MudTabPanel>
                            <MudTabPanel Text="Monthly">
                                <MudChart
                                    ChartType="ChartType.Bar"
                                    Width="100%"
                                    Height="300px"
                                    ChartSeries="@_monthlyChartSeries"
                                    XAxisLabels="@_monthlyXAxis.ToArray()"/>
                            </MudTabPanel>
                        </MudTabs>
                    </MudPaper>
                </section>

            </div>
        </Result>
    </ApiResponseViewer>
</MainContainer>

@code {

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["Account"].Value, Links.Account.Index)
    };

    private TimelineOrientation _timelineOrientation = TimelineOrientation.Vertical;
    private int _recentCount = 10;
    private readonly List<string> _dailyXAxis = new();
    private readonly List<ChartSeries> _dailyChartSeries = new();

    private readonly List<string> _monthlyXAxis = new();
    private readonly List<ChartSeries> _monthlyChartSeries = new();

    [Inject]
    private IDialogService Dialog { get; set; } = default!;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryClient HistoryClient { get; set; } = default!;

    [Inject]
    IResizeListenerService ResizeListener { get; set; } = default!;

    private ApiResponse<HistoryUserProfile> _overview = ApiResponse<HistoryUserProfile>.Loading();

    protected override async Task OnInitializedAsync()
    {
        _overview = await HistoryClient.Me.GetOverviewAsync();
        if (_overview.Status == ResponseStatus.Success)
        {
            var list = new List<double>();
            foreach (var (points, createdAt) in _overview.Data.Experience.Daily.OrderBy(x => x.CreatedAt))
            {
                _dailyXAxis.Add(createdAt.ToString("dd MMM"));
                list.Add(points);
            }

            _dailyChartSeries.Add(new ChartSeries
            {
                Name = L["Experience:MyPoints"],
                Data = list.ToArray()
            });

            list.Clear();

            foreach (var (points, createdAt) in _overview.Data.Experience.Monthly.OrderBy(x => x.CreatedAt))
            {
                _monthlyXAxis.Add(createdAt.ToString("MMMM yyyy"));
                list.Add(points);
            }

            _monthlyChartSeries.Add(new ChartSeries
            {
                Name = L["Experience:MyPoints"],
                Data = list.ToArray()
            });
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ResizeListener.OnBreakpointChanged += OnBreakpointChanged;
            OnBreakpointChanged(null, await ResizeListener.GetBreakpoint());
        }
    }

    private void OnBuyClick()
    {
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Large,
            NoHeader = true,
            CloseButton = false,
            FullWidth = true
        };

        var parameters = new DialogParameters
        {
            [nameof(SubscriptionModal.SubjectType)] = SubjectType.History
        };

        Dialog.Show<SubscriptionModal>(null, parameters, options);
    }

    private async Task CollectDailyReward()
    {
        var response = await HistoryClient.Me.CollectDailyReward();
        if (response.Status == ResponseStatus.Success)
            _overview = await HistoryClient.Me.GetOverviewAsync();
    }

    private void OnBreakpointChanged(object? sender, Breakpoint e)
    {
        var (orientation, count) = e switch {
            Breakpoint.Lg => (TimelineOrientation.Horizontal, 5),
            Breakpoint.Xl => (TimelineOrientation.Horizontal, 10),
            _ => (TimelineOrientation.Vertical, 10)
            };

        if (_timelineOrientation == orientation && _recentCount == count)
            return;

        _timelineOrientation = orientation;
        _recentCount = count;
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        ResizeListener.OnBreakpointChanged -= OnBreakpointChanged;
    }

}
