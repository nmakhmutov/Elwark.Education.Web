@using Education.Client.Gateways.Models.User
@using Microsoft.Extensions.Configuration

<MudPaper Class="@Class">
    <section class="background" style="background-image: url('@Subject.GetStatic().Image')">
        <div class="cover">
            <div class="title-container">
                <MudText Typo="Typo.h4" Color="Color.Inherit">
                    @L[$"Subject:{Subject}"]
                </MudText>
            </div>
        </div>
    </section>
    <MainContainer>
        <ul class="mb-3 mb-sm-6">
            <li class="row">
                <MudText Typo="Typo.subtitle1">
                    @L["Subscription"]
                </MudText>
                <MudText Typo="Typo.subtitle1" Color="@Subscription.GetColor()">
                    @L[$"Subscription:{Subscription}"]
                </MudText>
            </li>
            <li class="row">
                <MudText Typo="Typo.subtitle1">
                    @L["Subscription:TestDurationCoefficient"]
                </MudText>
                <MudText Typo="Typo.subtitle1" Class="ml-3">
                    @("x" + TestDurationCoefficient)
                </MudText>
            </li>
            <li class="row">
                <div>
                    <MudText Typo="Typo.subtitle1">
                        @L["Subscription:TestCreation"]
                    </MudText>
                    @if (TestCreation.RestoreAt.HasValue)
                    {
                        <MudText Typo="Typo.caption">
                            <em>
                                @L["Subscription:RestrictionRestoreAt", TestCreation.RestoreAt.Value.ToSimpleFormat()]
                            </em>
                        </MudText>
                    }
                </div>
                <RestrictionQuantityView Restriction="@TestCreation" Class="ml-3"/>
            </li>
            <li class="row">
                <div>
                    <MudText Typo="Typo.subtitle1">
                        @L["Subscription:AnswerCreation"]
                    </MudText>
                    @if (TestQuestionMistakes.RestoreAt.HasValue)
                    {
                        <MudText Typo="Typo.caption">
                            <em>
                                @L["Subscription:RestrictionRestoreAt", TestQuestionMistakes.RestoreAt.Value.ToSimpleFormat()]
                            </em>
                        </MudText>
                    }
                </div>
                <RestrictionQuantityView Restriction="@TestQuestionMistakes" Class="ml-3"/>
            </li>
            <li class="row">
                <div>
                    <MudText Typo="Typo.subtitle1">
                        @L["Subscription:DateGuesserCreation"]
                    </MudText>
                    @if (DateGuesserCreation.RestoreAt.HasValue)
                    {
                        <MudText Typo="Typo.caption">
                            <em>
                                @L["Subscription:RestrictionRestoreAt", DateGuesserCreation.RestoreAt.Value.ToSimpleFormat()]
                            </em>
                        </MudText>
                    }
                </div>
                <RestrictionQuantityView Restriction="@DateGuesserCreation" Class="ml-3"/>
            </li>
        </ul>
        <div class="subscription">
            @if (Subscription == SubscriptionType.Free)
            {
                <div class="d-flex flex-row justify-center">
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@OnBuyClick">
                        @L["Subscription:Upgrade"]
                    </MudButton>
                </div>
            }
        </div>
    </MainContainer>
</MudPaper>

@* ReSharper disable InconsistentNaming *@
@* ReSharper disable once UnusedParameter.Local *@

@code {

    [Inject]
    private IConfiguration Configuration { get; set; } = default!;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Parameter]
    public string? Class { get; set; }

    [Parameter, EditorRequired]
    public SubjectType Subject { get; set; }

    [Parameter, EditorRequired]
    public SubscriptionType Subscription { get; set; }

    [Parameter, EditorRequired]
    public Restriction TestCreation { get; set; } = default!;

    [Parameter, EditorRequired]
    public Restriction TestQuestionMistakes { get; set; } = default!;

    [Parameter, EditorRequired]
    public Restriction DateGuesserCreation { get; set; } = default!;

    [Parameter, EditorRequired]
    public float TestDurationCoefficient { get; set; }

    [Parameter, EditorRequired]
    public EventCallback OnBuyClick { get; set; }

}
