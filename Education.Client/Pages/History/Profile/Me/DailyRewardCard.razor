@using Education.Client.Gateways.History.Me

<MudPaper Class="pa-3 pa-sm-6">
    <MudText Typo="Typo.h6" Align="Align.Center">
        @L["Experience:DailyReward"]
    </MudText>
    <div class="header">
        <MudIcon Icon="@Icons.Material.Filled.FilterTiltShift" Class="icon" Color="Color.Primary"/>
        <MudText Typo="Typo.h3">
            @Reward.Xp
        </MudText>
    </div>

    <div class="d-flex justify-center">
        @if (Reward.IsCollectable)
        {
            <MudButton
                Variant="Variant.Filled"
                Color="Color.Primary"
                Disabled="@_isLoading"
                OnClick="@CollectAsync">
                @if (_isLoading)
                {
                    <div class="d-flex flex-row align-center">
                        <MudProgressCircular Class="mr-3" Size="Size.Small" Indeterminate="true"/>
                        @L["Loading"]
                    </div>
                }
                else
                {
                    @L["Experience:CollectDailyReward"]
                }
            </MudButton>
        }
        else
        {
            <MudButton Disabled="true">
                @L["Experience:DailyRewardUnlockedAt", Reward.NextTimeAt.ToSimpleFormat()]
            </MudButton>
        }
    </div>
</MudPaper>

@code {
    private bool _isLoading;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Parameter]
    public DailyReward Reward { get; set; } = default!;

    [Parameter]
    public EventCallback OnCollect { get; set; }

    private async Task CollectAsync()
    {
        _isLoading = true;
        await OnCollect.InvokeAsync();
        _isLoading = false;
    }

}
