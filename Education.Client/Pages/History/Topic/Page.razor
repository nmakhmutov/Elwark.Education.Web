@page "/history/topics/{id}"
@layout HistoryLayout

@using Education.Client.Gateways.History
@using Education.Client.Gateways.History.Topic

@implements IDisposable
@attribute [Authorize]

<ApiViewer Response="@_topic">
<Loading>
    <div class="ma-3 ma-sm-6">
        <MudSkeleton Width="80vw" Class="mx-auto" SkeletonType="SkeletonType.Text"/>
        <MudSkeleton Width="70vw" Class="mx-auto" SkeletonType="SkeletonType.Text"/>
        <MudSkeleton Width="60vw" Height="40vh" Class="mx-auto mt-12" SkeletonType="SkeletonType.Rectangle"/>
    </div>
    <CenteredContainer MaxWidth="@ContainerWidth.W1600" Class="py-3 py-sm-6" Paper="true" Elevation="1">
        <div class="pa-3 pa-sm-6">
            <MudSkeleton Width="89%" SkeletonType="SkeletonType.Text" Class="mb-3 mb-sm-6"/>
            <MudSkeleton Width="94%" SkeletonType="SkeletonType.Text" Class="mb-3 mb-sm-6"/>
            <MudSkeleton Width="83%" SkeletonType="SkeletonType.Text" Class="mb-3 mb-sm-6"/>
            <MudSkeleton Width="81%" SkeletonType="SkeletonType.Text" Class="mb-3 mb-sm-6"/>
            <MudSkeleton Width="82%" SkeletonType="SkeletonType.Text" Class="mb-3 mb-sm-6"/>
            <MudSkeleton Width="88%" SkeletonType="SkeletonType.Text" Class="mb-3 mb-sm-6"/>
            <MudSkeleton Width="99%" SkeletonType="SkeletonType.Text" Class="mb-3 mb-sm-6"/>
            <MudSkeleton Width="86%" SkeletonType="SkeletonType.Text" Class="mb-3 mb-sm-6"/>
            <MudSkeleton Width="98%" SkeletonType="SkeletonType.Text" Class="mb-3 mb-sm-6"/>
            <MudSkeleton Width="88%" SkeletonType="SkeletonType.Text" Class="mb-3 mb-sm-6"/>
        </div>
    </CenteredContainer>
</Loading>
<Success Context="result">
    <PageTitle>@result.Topic.Title</PageTitle>

    @switch (result.Topic)
    {
        case PersonTopicDetail x:
            <PersonHeader
                Class="mb-6 mb-sm-12"
                Title="@x.Title"
                Description="@x.Description"
                Image="@x.Image"
                Born="@x.Born"
                Died="@x.Died"
                Characteristics="@x.Characteristics"
                Breadcrumbs="@_breadcrumbs"/>
            break;

        case EventTopicDetail x:
            <EventHeader
                Class="mb-6 mb-sm-12"
                Title="@x.Title"
                Description="@x.Description"
                Image="@x.Image"
                Started="@x.Started"
                Ended="@x.Ended"
                Breadcrumbs="@_breadcrumbs"/>
            break;
    }

    <CenteredContainer MaxWidth="@ContainerWidth.W1600" Class="mb-3 mb-sm-6">
        <div class="toolbar">
            <div class="toolbar-contents">
                @if (result.Topic.Chapters.Length > 2)
                {
                    <MudMenu Label="@L["Topic:Contents"]" Color="Color.Primary" Variant="Variant.Filled">
                        @foreach (var chapter in result.Topic.Chapters)
                        {
                            <MudMenuItem OnClick="@(() => Scroll.ScrollToFragmentAsync($"chapter-{chapter.Id}", ScrollBehavior.Smooth))">
                                @chapter.Title
                            </MudMenuItem>
                        }
                    </MudMenu>
                }
            </div>

            <div class="toolbar-width d-none d-lg-block">
                <div class="d-flex flex-column align-sm-center">
                    <MudButtonGroup Size="Size.Medium" Variant="Variant.Outlined">
                        <MudIconButton
                            Disabled="@(FormatService.Width == Width.False)"
                            Icon="@Icons.Material.Filled.CropFree"
                            OnClick="@FormatService.SetWidthFalseAsync"/>
                        <div class="d-none d-lg-plus-block">
                            <MudIconButton
                                Disabled="@(FormatService.Width == Width.lg)"
                                Icon="@Icons.Material.Filled.CropDin"
                                OnClick="@FormatService.SetWidthLgAsync"/>
                        </div>
                        <MudIconButton
                            Disabled="@(FormatService.Width == Width.md)"
                            Icon="@Icons.Material.Filled.CropPortrait"
                            OnClick="@FormatService.SetWidthMdAsync"/>
                    </MudButtonGroup>
                    <MudText Typo="Typo.body2" Class="subtitle">
                        @L["TopicFormatting:ContentWidth"]
                    </MudText>
                </div>
            </div>

            <div class="toolbar-align">
                <div class="d-flex flex-column align-sm-center">
                    <MudButtonGroup Size="Size.Medium" Variant="Variant.Outlined">
                        <MudIconButton
                            Disabled="@(FormatService.TextAlign == Align.Left)"
                            Icon="@Icons.Material.Filled.FormatAlignLeft"
                            OnClick="@FormatService.AlignTextLeftAsync"/>
                        <MudIconButton
                            Disabled="@(FormatService.TextAlign == Align.Center)"
                            Icon="@Icons.Material.Filled.FormatAlignCenter"
                            OnClick="@FormatService.AlignTextCenterAsync"/>
                        <MudIconButton
                            Disabled="@(FormatService.TextAlign == Align.Right)"
                            Icon="@Icons.Material.Filled.FormatAlignRight"
                            OnClick="@FormatService.AlignTextRightAsync"/>
                        <MudIconButton
                            Disabled="@(FormatService.TextAlign == Align.Justify)"
                            Icon="@Icons.Material.Filled.FormatAlignJustify"
                            OnClick="@FormatService.AlignTextJustifyAsync"/>
                    </MudButtonGroup>
                    <MudText Typo="Typo.body2" Class="subtitle">
                        @L["TopicFormatting:TextAlignment"]
                    </MudText>
                </div>
            </div>

            <div class="toolbar-font-size">
                <div class="d-flex flex-column align-sm-center">
                    <MudButtonGroup Size="Size.Medium" Variant="Variant.Outlined">
                        <MudIconButton
                            Disabled="@(!FormatService.CanDecreaseFontSize())"
                            Icon="@Icons.Material.Filled.Remove"
                            OnClick="@FormatService.DecreaseFontSizeAsync"/>
                        <MudIconButton
                            Disabled="@(!FormatService.CanIncreaseFontSize())"
                            Icon="@Icons.Material.Filled.Add"
                            OnClick="@FormatService.IncreaseFontSizeAsync"/>
                    </MudButtonGroup>
                    <MudText Typo="Typo.body2" Class="subtitle">
                        @L["TopicFormatting:FontSize"]
                    </MudText>
                </div>
            </div>
        </div>
    </CenteredContainer>

    @foreach (var (id, title, subtitle, content) in result.Topic.Chapters)
    {
        <CenteredContainer MaxWidth="@ContainerWidth.W1600" Class="mb-3 mb-sm-6">
            <MudCard Style="@FormatService.WidthStyles">
                <MudCardHeader Class="pa-3 pa-sm-6">
                    <CardHeaderContent>
                        <h2 class="chapter-title" id="chapter-@id">
                            @title
                        </h2>
                        @if (!string.IsNullOrEmpty(subtitle))
                        {
                            <SimpleMarkdown Text="@subtitle"/>
                        }
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent Class="pa-3 pa-sm-6">
                    <TopicMarkdown Text="@content" Style="@FormatService.TextStyles"/>
                </MudCardContent>
            </MudCard>
        </CenteredContainer>
    }

    <CenteredContainer MaxWidth="@ContainerWidth.W1600" Class="mb-3 mb-sm-6">
        <MudPaper Style="@FormatService.WidthStyles">
            <div class="progress">
                <div class="d-flex flex-column align-start">
                    @if (result.Test.TestTypes.Any())
                    {
                        <MudLink Typo="Typo.h6" Href="@Links.History.MyTopicProgress(result.Topic.Id)">
                            @L["Test:MyProgress"]
                        </MudLink>
                    }
                    else
                    {
                        <MudText Typo="Typo.h6">
                            @L["Test:MyProgress"]
                        </MudText>
                    }

                    <TopicProgressView Progress="@result.Progress" Class="py-3"/>

                    <TestPermissionWrapper Status="@result.Test.Permission.Status" Subject="@SubjectType.History">
                        <TopicTestButtons
                            IsLoading="@(_test?.Status == ResponseStatus.Loading)"
                            TestTypes="@result.Test.TestTypes.ToArray()"
                            OnCreateTestClick="@CreateTestAsync"/>
                    </TestPermissionWrapper>
                </div>

                <TopicReactionButtons
                    Id="@Id"
                    IsFavorite="@result.IsFavorite"
                    Rating="@result.Rating"
                    OnFavoriteClick="@OnFavoriteClick"
                    OnLikeClick="@OnLikeClick"
                    OnDislikeClick="@OnDislikeClick"/>
            </div>
        </MudPaper>
    </CenteredContainer>

    @if (result.RelatedTopics.Length > 0)
    {
        <CenteredContainer MaxWidth="@ContainerWidth.W1600" Class="mb-3 mb-sm-6">
            <MudText Typo="Typo.h5" Class="mb-3">
                @L["Topics:Related"]
            </MudText>
            <DefaultFillGrid>
                @foreach (var topic in result.RelatedTopics)
                {
                    <TopicCard
                        Id="@topic.Id"
                        Epoch="@topic.Epoch"
                        Image="@topic.Image"
                        Title="@topic.Title"
                        Overview="@topic.Overview"
                        Rating="@topic.Rating"
                        Progress="@topic.Progress"
                        IsFavorite="@topic.IsFavorite"
                        OnFavoriteClick="@OnFavoriteClick"/>
                }
            </DefaultFillGrid>
        </CenteredContainer>
    }
</Success>
</ApiViewer>


@code {
    private ApiResponse<TestCreatedResult>? _test;
    private ApiResponse<TopicDetailComposition> _topic = ApiResponse<TopicDetailComposition>.Loading();
    private List<BreadcrumbItem> _breadcrumbs = new();

    [Inject]
    private IHistoryClient HistoryClient { get; set; } = default!;

    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;

    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    [Inject]
    private TopicContentFormatService FormatService { get; set; } = default!;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IScrollManager Scroll { get; set; } = default!;

    [Parameter]
    public string Id { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        FormatService.OnChange += StateHasChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        _topic = ApiResponse<TopicDetailComposition>.Loading();
        _topic = await HistoryClient.Topic.GetAsync(Id);

        if (_topic.Status == ResponseStatus.Success)
            _breadcrumbs = new List<BreadcrumbItem>
            {
                new(L["Subject:History"].Value, Links.History.Index),
                new(L[$"History:{_topic.Data.Topic.Epoch}"].Value, Links.History.TopicByEpoch(_topic.Data.Topic.Epoch))
            };
    }

    private async Task CreateTestAsync(TestType testType)
    {
        _test = ApiResponse<TestCreatedResult>.Loading();
        _test = testType switch {
            TestType.Easy => await HistoryClient.Topic.CreateEasyTestAsync(Id),
            TestType.Hard => await HistoryClient.Topic.CreateHardTestAsync(Id),
            _ => throw new ArgumentOutOfRangeException(nameof(testType), testType, null)
            };

        if (_test.Status == ResponseStatus.Success)
            NavigationManager.NavigateTo(Links.History.TestById(_test.Data.Id));
        else
            Snackbar.Add(_test.Error.Message);
    }

    private async Task<bool> OnFavoriteClick(string topicId)
    {
        var result = await HistoryClient.Topic.ToggleFavoriteAsync(topicId);
        return result.Status == ResponseStatus.Success && result.Data;
    }

    private async Task<bool> OnLikeClick()
    {
        var response = await HistoryClient.Topic.LikeAsync(Id);
        return response.Status == ResponseStatus.Success;
    }

    private async Task<bool> OnDislikeClick()
    {
        var response = await HistoryClient.Topic.DislikeAsync(Id);
        return response.Status == ResponseStatus.Success;
    }

    public void Dispose() => FormatService.OnChange -= StateHasChanged;

}
