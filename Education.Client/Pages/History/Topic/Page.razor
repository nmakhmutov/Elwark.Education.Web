@page "/history/topics/{id}"
@layout HistoryLayout

@using Education.Client.Gateways.History
@using Education.Client.Gateways.History.Topic

@implements IDisposable
@attribute [Authorize]

<ApiResponseViewer Response="@_topic">
    <Placeholder>
        <PageLoader/>
    </Placeholder>
    <Result Context="result">
        <PageTitle>@result.Topic.Title</PageTitle>

        @switch (result.Topic)
        {
            case PersonTopicDetail x:
                <PersonHeader
                    Title="@x.Title"
                    Description="@x.Description"
                    Image="@x.Image"
                    Born="@x.Born"
                    Died="@x.Died"
                    Characteristics="@x.Characteristics"
                    Breadcrumbs="@_breadcrumbs"/>
                break;

            case EventTopicDetail x:
                <EventHeader
                    Title="@x.Title"
                    Description="@x.Description"
                    Image="@x.Image"
                    Started="@x.Started"
                    Ended="@x.Ended"
                    Breadcrumbs="@_breadcrumbs"/>
                break;
        }

        <CenteredContainer MaxWidth="@ContainerWidth.W1600" Class="py-3 py-sm-6" Paper="true" Elevation="1">
            <div class="pa-3 pa-sm-6">
                <MudExpansionPanels Elevation="0" Dense="false" DisableGutters="true" Class="mb-6">
                    <MudExpansionPanel Class="text-toolbar">
                        <TitleContent>
                            <MudText Color="Color.Primary" Typo="Typo.button">
                                @L["Settings"]
                            </MudText>
                        </TitleContent>
                        <ChildContent>
                            <TextToolbar FormatService="@FormatService"/>
                        </ChildContent>
                    </MudExpansionPanel>
                </MudExpansionPanels>

                @foreach (var (title, subtitle, content) in result.Topic.Chapters)
                {
                    <article class="mb-6 mb-sm-12" style="@FormatService.WidthStyles">
                        <div class="mb-3">
                            <h2 class="chapter-title">
                                @title
                            </h2>
                            @if (!string.IsNullOrEmpty(subtitle))
                            {
                                <h3 class="chapter-subtitle">
                                    @subtitle
                                </h3>
                            }
                        </div>
                        <TopicMarkdown Text="@content" Style="@FormatService.TextStyles"/>
                    </article>
                }
            </div>
        </CenteredContainer>

        <CenteredContainer MaxWidth="@ContainerWidth.W1600" Class="mb-3 mb-sm-6" Paper="true" Elevation="1">
            <div class="topic-toolbar">
                <div class="d-flex flex-column align-start">
                    @if (result.Test.Status == TestStatus.NotAvailable)
                    {
                        <MudText Typo="Typo.h6">
                            @L["Test:MyProgress"]
                        </MudText>
                    }
                    else
                    {
                        <MudLink Typo="Typo.h6" Href="@Links.Subject.History.Profile.TopicStatistics(result.Topic.Id)">
                            @L["Test:MyProgress"]
                        </MudLink>
                    }
                            
                    <TopicProgressView Progress="@result.Progress" Class="py-3"/>
        
                    <TestWrapper Subject="@SubjectType.History" Status="@result.Test.Status">
                        <TopicTestButtons 
                            IsLoading="@(_test?.Status == ResponseStatus.Loading)"
                            TestTypes="@result.Test.TestTypes.ToArray()"
                            OnCreateTestClick="@CreateTestAsync"/>
                    </TestWrapper>
                </div>
        
                <TopicReactionButtons
                    Id="@Id"
                    IsFavorite="@result.IsFavorite"
                    Rating="@result.Rating"
                    OnFavoriteClick="@OnFavoriteClick"
                    OnLikeClick="@OnLikeClick"
                    OnDislikeClick="@OnDislikeClick"/>
            </div>
        </CenteredContainer>
        
        @if (result.RelatedTopics.Length > 0)
        {
            <CenteredContainer MaxWidth="@ContainerWidth.W1600" Class="mb-3 mb-sm-6">
                <MudText Typo="Typo.h5" Class="mb-3">
                    @L["Topics:Related"]
                </MudText>
                <DefaultFillGrid>
                    @foreach (var topic in result.RelatedTopics)
                    {
                        <TopicCard
                            Id="@topic.Id"
                            Epoch="@topic.Epoch"
                            Image="@topic.Image"
                            Title="@topic.Title"
                            Overview="@topic.Overview"
                            Rating="@topic.Rating"
                            Progress="@topic.Progress"
                            IsFavorite="@topic.IsFavorite"
                            OnFavoriteClick="@OnFavoriteClick"/>
                    }
                </DefaultFillGrid>
            </CenteredContainer>
        }
    </Result>
</ApiResponseViewer>


@code {
    private ApiResponse<TestCreatedResult>? _test;
    private ApiResponse<TopicDetailComposition> _topic = ApiResponse<TopicDetailComposition>.Loading();
    private List<BreadcrumbItem> _breadcrumbs = new();
    
    [Inject]
    private IHistoryClient HistoryClient { get; set; } = default!;

    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;

    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    [Inject]
    private ErrorManager ErrorManager { get; set; } = default!;

    [Inject]
    private TopicContentFormatService FormatService { get; set; } = default!;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Parameter]
    public string Id { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        FormatService.OnChange += StateHasChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        _topic = ApiResponse<TopicDetailComposition>.Loading();
        _topic = await HistoryClient.Topic.GetAsync(Id);

        if (_topic.Status == ResponseStatus.Success)
            _breadcrumbs = new List<BreadcrumbItem>
            {
                new(L["Subject:History"].Value, Links.Subject.History.Index),
                new(L[$"History:{_topic.Data.Topic.Epoch}"].Value, Links.Subject.History.Topics(_topic.Data.Topic.Epoch))
            };
    }

    private async Task CreateTestAsync(TestType testType)
    {
        _test = ApiResponse<TestCreatedResult>.Loading();
        _test = testType switch {
            TestType.Easy => await HistoryClient.Topic.CreateEasyTestAsync(Id),
            TestType.Hard => await HistoryClient.Topic.CreateHardTestAsync(Id),
            _ => throw new ArgumentOutOfRangeException(nameof(testType), testType, null)
            };

        if (_test.Status == ResponseStatus.Success)
            NavigationManager.NavigateTo(Links.Subject.History.Test(_test.Data.Id));
        else
            Snackbar.Add(ErrorManager.Localize(_test.Error).Title, Severity.Error);
    }

    private async Task<bool> OnFavoriteClick(string topicId)
    {
        var result = await HistoryClient.Topic.ToggleFavoriteAsync(topicId);
        return result.Status == ResponseStatus.Success && result.Data;
    }


    private async Task<bool> OnLikeClick()
    {
        var response = await HistoryClient.Topic.LikeAsync(Id);
        return response.Status == ResponseStatus.Success;
    }

    private async Task<bool> OnDislikeClick()
    {
        var response = await HistoryClient.Topic.DislikeAsync(Id);
        return response.Status == ResponseStatus.Success;
    }

    public void Dispose() => FormatService.OnChange -= StateHasChanged;

}
