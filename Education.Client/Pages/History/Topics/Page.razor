@page "/history/{type}"
@using Education.Client.Gateways.History
@using Education.Client.Gateways.History.Topic
@layout HistoryLayout

@attribute [Authorize]

<PageTitle>
    @L[$"History:{_request.Epoch}"]
</PageTitle>

<MainContainer>
    <PageHeader Title="@L[$"History:{_request.Epoch}"]" Class="mb-6" Breadcrumbs="@Breadcrumbs"/>
    <DefaultFillGrid>
        <ApiResponseViewer Response="_topics">
            <Placeholder>
                <SkeletonCard/>
                <SkeletonCard/>
                <SkeletonCard/>
                <SkeletonCard/>
                <SkeletonCard/>
                <SkeletonCard/>
                <SkeletonCard/>
                <SkeletonCard/>
            </Placeholder>
            <Result Context="topics">
                @foreach (var item in topics.Items)
                {
                    <TopicCard
                        Id="@item.Id"
                        Image="@item.Image"
                        Title="@item.Title"
                        Overview="@item.Overview"
                        Rating="@item.Rating"
                        Progress="@item.Progress"
                        IsFavorite="@item.IsFavorite"
                        Epoch="@item.Epoch"
                        OnFavoriteClick="@OnFavoriteClick"/>
                }
                <InfinityScroll ObserverTargetId="tg" ObservableTargetReached="@LoadMoreAsync">
                    <div id="tg" class="d-flex justify-center align-center">
                        @if (_request.Page < _topics.Data.Pages)
                        {
                            <MudProgressCircular Indeterminate="true" Size="Size.Large"/>
                        }
                    </div>
                </InfinityScroll>
            </Result>
        </ApiResponseViewer>
    </DefaultFillGrid>
</MainContainer>

@code {

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["Subject:History"].Value, Links.Subject.History.Index)
    };

    private ApiResponse<PageResponse<UserTopicSummary>> _topics = ApiResponse<PageResponse<UserTopicSummary>>.Loading();
    private GetTopicsRequest _request = new(EpochType.Prehistory, 1, 20);

    [Inject]
    private IHistoryClient HistoryClient { get; set; } = default!;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Parameter]
    public string? Type { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        _topics = ApiResponse<PageResponse<UserTopicSummary>>.Loading();

        if (Enum.TryParse<EpochType>(Type, true, out var type))
        {
            _request = _request with { Epoch = type };
            _topics = await HistoryClient.Topic.GetAsync(_request);
        }
        else
        {
            _topics = ApiResponse<PageResponse<UserTopicSummary>>.Fail(Error.NotFound);
        }
    }

    private async Task LoadMoreAsync()
    {
        if (_topics.Status != ResponseStatus.Success || _request.Page == _topics.Data.Pages)
            return;

        _request = _request with { Page = _request.Page + 1};
        var response = await HistoryClient.Topic.GetAsync(_request);

        if (response.Status == ResponseStatus.Fail)
        {
            _topics = ApiResponse<PageResponse<UserTopicSummary>>.Fail(response.Error);
            return;
        }

        _topics = ApiResponse<PageResponse<UserTopicSummary>>.Success(
            new PageResponse<UserTopicSummary>(
                _topics.Data.Items.Union(response.Data.Items).ToArray(),
                response.Data.Pages
                )
            );
    }

    private async Task<bool> OnFavoriteClick(string topicId)
    {
        var result = await HistoryClient.Topic.ToggleFavoriteAsync(topicId);
        return result.Status == ResponseStatus.Success && result.Data;
    }

}
