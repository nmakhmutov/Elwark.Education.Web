<div class="grid @Class">
    @foreach (var testType in _testTypes)
    {
        var color = testType.GetColor();
        var background = $"background-color: var(--mud-palette-{color.ToString().ToLowerInvariant()}-lighten)";
        <MudPaper Class="d-flex flex-column align-center pa-6 pa-sm-9" Style="@background">
            <MudAvatar Color="@color" Size="Size.Large" Class="mb-6 mb-sm-9">
                <MudIcon Icon="@Icons.Filled.School" Size="Size.Large"/>
            </MudAvatar>
            <MudButton Variant="Variant.Filled" Disabled="@IsLoading" Color="@color" OnClick="@(() => OnTestClick(testType))">
                @if (testType == _testType && IsLoading)
                {
                    <div class="d-flex flex-row align-center">
                        <MudProgressCircular Class="mr-3" Size="Size.Small" Indeterminate="true"/>
                        @L["Loading"]
                    </div>
                }
                else
                {
                    @L[$"Test:{testType}"]
                }
            </MudButton>
        </MudPaper>
    }
</div>

@code {
    private TestType? _testType;

    private readonly TestType[] _testTypes =
    {
        TestType.Easy,
        TestType.Hard,
        TestType.Mixed
    };

    [Inject]
    public IStringLocalizer<App> L { get; set; } = default!;

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public bool IsLoading { get; set; }

    [Parameter]
    public EventCallback<TestType> OnCreateTestClick { get; set; }

    private async Task OnTestClick(TestType testType)
    {
        _testType = testType;
        await OnCreateTestClick.InvokeAsync(testType);
    }

}
