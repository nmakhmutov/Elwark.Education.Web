@using System.Timers
@implements IDisposable

<MudText Typo="Typo" Align="Align" Class="@Class" Color="@Color">
    @_timeLeft.ToLongFormat()
</MudText>

@code {
    private TimeSpan _timeLeft = TimeSpan.FromSeconds(0);
    private Timer _timer = new()
    {
        Enabled = true,
        Interval = 1000
    };

    [Parameter]
    public DateTime Date { get; set; }

    [Parameter]
    public EventCallback OnComplete { get; set; }

    [Parameter]
    public Typo Typo { get; set; } = Typo.subtitle1;

    [Parameter]
    public Align Align { get; set; } = Align.Inherit;

    [Parameter]
    public Color Color { get; set; } = Color.Default;

    [Parameter]
    public string? Class { get; set; }

    protected override void OnInitialized()
    {
        _timer.Elapsed += (_, _) =>
        {
            _timeLeft = Date - DateTime.UtcNow;

            StateHasChanged();

            if (_timeLeft >= TimeSpan.Zero)
                return;
            
            _timer.Stop();
            _timer.Dispose();
            _timeLeft = TimeSpan.Zero;
            
            if (OnComplete.HasDelegate)
                OnComplete.InvokeAsync();
        };
    }

    public void Dispose()
    {
        _timer.Stop();
        _timer.Dispose();
    }

}
