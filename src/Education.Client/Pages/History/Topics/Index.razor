@page "/history/topics/{id}"
@layout HistoryLayout
@attribute [Authorize]

@using Education.Client.Gateways.History.Topic
@using Education.Client.Gateways.History
@using Education.Client.Pages.History.Topics.Components
@using Education.Client.Pages.History.Components

<EduPage Subject="@L["Subject:History"]" ShowFooter="@_response.IsLoaded">
    <ApiViewer Response="@_response">
        <Success Context="result">
            <PageTitle>@result.Topic.Title</PageTitle>

            @switch (result.Topic)
            {
                case EmpireTopicDetail topic:
                    <EmpireDetail
                        Class="mb-6 mb-sm-12"
                        Title="@topic.Title"
                        Description="@topic.Description"
                        Image="@topic.Image"
                        Founded="@topic.Founded"
                        Dissolved="@topic.Dissolved"
                        MaxArea="@topic.MaxArea"
                        MaxPopulation="@topic.MaxPopulation"
                        Breadcrumbs="@_breadcrumbs"/>
                    break;

                case PersonTopicDetail topic:
                    <PersonDetail
                        Class="mb-6 mb-sm-12 pa-0"
                        Title="@topic.Title"
                        Description="@topic.Description"
                        Image="@topic.Image"
                        Born="@topic.Born"
                        Died="@topic.Died"
                        Characteristics="@topic.Characteristics"
                        Breadcrumbs="@_breadcrumbs"/>
                    break;

                case EventTopicDetail topic:
                    <EventDetail
                        Class="mb-6 mb-sm-12"
                        Title="@topic.Title"
                        Description="@topic.Description"
                        Image="@topic.Image"
                        Started="@topic.Started"
                        Ended="@topic.Finished"
                        Breadcrumbs="@_breadcrumbs"/>
                    break;
            }

            <EduContainer MaxWidth="@EduWidth.W1440" Paper="true" Class="pt-0">
                <ContentViewer Chapters="@result.Topic.Chapters"/>
            </EduContainer>

            <EduContainer MaxWidth="@EduWidth.W1440" Paper="true" Class="pt-0">
                <UserReaction
                    TopicId="@result.Topic.Id"
                    Rating="@result.Rating"
                    Test="@result.Test"
                    UserActivity="@result.UserActivity"
                    UserTestPermission="@result.UserPermission"
                    IsTestCreating="@(_test?.Status == ResponseStatus.Loading)"
                    OnCreateTestClick="@CreateTestAsync"
                    OnFavoriteClick="@ToggleFavoriteAsync"
                    OnLikeClick="@LikeAsync"
                    OnDislikeClick="@DislikeAsync"/>
            </EduContainer>

            @if (result.RelatedTopics.Length > 0)
            {
                <EduContainer MaxWidth="@EduWidth.W1440" Class="pt-0">
                    <MudText Typo="Typo.h5" Class="mb-3">
                        @L["Topics:Related"]
                    </MudText>
                    <EduFillGrid>
                        @foreach (var (topic, userActivity) in result.RelatedTopics)
                        {
                            <TopicAndUserProgressCard
                                Topic="@topic"
                                UserActivity="@userActivity"
                                OnFavoriteClick="@ToggleFavoriteAsync"/>
                        }
                    </EduFillGrid>
                </EduContainer>
            }
        </Success>
    </ApiViewer>
</EduPage>

@code {
    private ApiResponse<TestCreatedResult>? _test;
    private ApiResponse<TopicDetailComposition> _response = ApiResponse<TopicDetailComposition>.Loading();
    private List<BreadcrumbItem> _breadcrumbs = new();

    [Inject]
    private IHistoryClient HistoryClient { get; set; } = default!;

    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Parameter]
    public string Id { get; set; } = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        _response = ApiResponse<TopicDetailComposition>.Loading();
        _response = await HistoryClient.Topic.GetAsync(Id);

        if (_response.Status == ResponseStatus.Success)
            _breadcrumbs = new List<BreadcrumbItem>
            {
                new(L["Subject:History"], Links.History.Index),
                new(L[$"History:{_response.Data.Topic.Epoch}"], Links.History.Content.Epoch(_response.Data.Topic.Epoch))
            };
    }

    private async Task CreateTestAsync(TestType testType)
    {
        _test = ApiResponse<TestCreatedResult>.Loading();
        _test = testType switch {
            TestType.Easy => await HistoryClient.Topic.CreateEasyTestAsync(Id),
            TestType.Hard => await HistoryClient.Topic.CreateHardTestAsync(Id),
            _ => throw new ArgumentOutOfRangeException(nameof(testType), testType, null)
            };

        if (_test.Status == ResponseStatus.Success)
            Navigation.NavigateTo(Links.History.TopicTest.Test(_test.Data.Id));
        else
            Snackbar.Add(_test.Error.Message);
    }

    private async Task<bool> ToggleFavoriteAsync(string topicId)
    {
        var result = await HistoryClient.Topic.ToggleFavoriteAsync(topicId);
        return result.Status == ResponseStatus.Success && result.Data;
    }

    private async Task<bool> LikeAsync()
    {
        var response = await HistoryClient.Topic.LikeAsync(Id);
        return response.Status == ResponseStatus.Success;
    }

    private async Task<bool> DislikeAsync()
    {
        var response = await HistoryClient.Topic.DislikeAsync(Id);
        return response.Status == ResponseStatus.Success;
    }

}
