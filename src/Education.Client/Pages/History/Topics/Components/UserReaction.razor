@using Education.Client.Gateways.History
@using Education.Client.Gateways.Models.Content
@using Education.Client.Gateways.Models.User

<div class="progress">
    <div class="d-flex flex-column align-start">
        @if (Test.TestTypes.Any())
        {
            <MudLink Typo="Typo.h6" Href="@Links.History.User.MyTopic(TopicId)">
                @L["Test:MyProgress"]
            </MudLink>
        }
        else
        {
            <MudText Typo="Typo.h6">
                @L["Test:MyProgress"]
            </MudText>
        }

        <TopicProgressView PassedTests="@UserActivity.PassedTests" TimeSpent="@UserActivity.TimeSpent" Class="py-3"/>

        <TestPermissionWrapper Status="@UserTestPermission.Status" Subject="@SubjectType.History">
            <TopicTestButtons
                IsLoading="@IsTestCreating"
                TestTypes="@Test.TestTypes.ToArray()"
                OnCreateTestClick="@OnCreateTestClick"/>
        </TestPermissionWrapper>
    </div>

    <div class="d-flex flex-column align-center">
        <RatingStars Rating="@Rating" ShowDetails="true" Class="d-flex flex-column align-center"/>
    
        <MudToolBar Class="pa-0">
            <MudTooltip Text="@L["Topic:ILikeThis"]">
                <MudIconButton
                    Icon="@Icons.Filled.ThumbUp"
                    OnClick="@(_isLiked == true ? () => Task.CompletedTask : OnLike)"
                    Color="@(_isLiked == true ? Color.Primary : Color.Default)"/>
            </MudTooltip>
    
            <MudTooltip Text="@L["Topic:IDislikeThis"]">
                <MudIconButton
                    Icon="@Icons.Filled.ThumbDown"
                    OnClick="@(_isLiked == false ? () => Task.CompletedTask : OnDislike)"
                    Color="@(_isLiked == false ? Color.Primary : Color.Default)"/>
            </MudTooltip>
    
            <MudTooltip Text="@(_isFavorite ? L["RemoveFromFavorite"] : L["AddToFavorite"])">
                <MudToggleIconButton
                    Toggled="@_isFavorite"
                    ToggledChanged="@OnFavoriteChanged"
                    Icon="@Icons.Filled.FavoriteBorder"
                    Color="Color.Default"
                    Size="Size.Medium"
                    ToggledIcon="@Icons.Filled.Favorite"
                    ToggledColor="Color.Error"
                    ToggledSize="Size.Medium"/>
            </MudTooltip>
        </MudToolBar>
    </div>
</div>

@code {
    private bool? _isLiked;
    private bool _isFavorite;
    
    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Parameter, EditorRequired]
    public string TopicId { get; set; } = string.Empty;

    [Parameter, EditorRequired]
    public UserActivitySummary UserActivity { get; set; } = default!;

    [Parameter, EditorRequired]
    public ContentRating Rating { get; set; } = default!;

    [Parameter, EditorRequired]
    public TopicAvailableTest Test { get; set; } = default!;

    [Parameter, EditorRequired]
    public UserTestPermission UserTestPermission { get; set; } = default!;

    [Parameter, EditorRequired]
    public bool IsTestCreating { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<TestType> OnCreateTestClick { get; set; }
    
    [Parameter, EditorRequired]
    public Func<Task<bool>> OnLikeClick { get; set; } = () => Task.FromResult(false);

    [Parameter, EditorRequired]
    public Func<Task<bool>> OnDislikeClick { get; set; } = () => Task.FromResult(false);

    [Parameter, EditorRequired]
    public Func<string, Task<bool>> OnFavoriteClick { get; set; } = _ => Task.FromResult(false);
    
    protected override void OnParametersSet()
    {
        _isFavorite = UserActivity.IsFavorite;
        _isLiked = UserActivity.IsLiked;
    }
    
    private async Task OnLike()
    {
        if (await OnLikeClick())
            _isLiked = true;
    }

    private async Task OnDislike()
    {
        if (await OnDislikeClick())
            _isLiked = false;
    }

    private async Task OnFavoriteChanged(bool toggled) =>
        _isFavorite = await OnFavoriteClick.Invoke(TopicId);

}
