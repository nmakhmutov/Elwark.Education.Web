@using Education.Client.Gateways.History
@inherits LayoutComponentBase

<MudThemeProvider Theme="@ThemeService.Theme"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@SidebarService.ToggleAsync"/>
        <MudLink Href="@Links.History.Index" Typo="Typo.h5" Color="Color.Default" Underline="Underline.None" Class="d-none d-sm-block">
            @L["Subject:History"] <sup class="mud-typography mud-typography-caption mud-primary-text">beta</sup>
        </MudLink>
        <MudSpacer/>
        <MudAutocomplete
            T="HistoryTopicSummary"
            @ref="@_searchAutocomplete"
            Dense="true"
            DebounceInterval="300"
            AdornmentIcon="@Icons.Outlined.Search"
            Placeholder="@L["Search"]"
            Variant="Variant.Outlined"
            Margin="Margin.Dense"
            SearchFunc="OnSearch"
            CoerceValue="true"
            ResetValueOnEmptyText="true"
            ValueChanged="OnSearchResult">
            <ItemTemplate Context="result">
                <div class="d-flex align-center">
                    <MudAvatar Image="@result.Image" Size="Size.Large" Square="true" Class="mr-4"/>
                    <div>
                        <MudText>@result.Title</MudText>
                    </div>
                </div>
            </ItemTemplate>
        </MudAutocomplete>
        <MudSpacer/>
        <MudIconButton Icon="@ThemeService.Icon" Color="Color.Inherit" OnClick="@ThemeService.ToggleAsync"/>
        <UserAppbarMenu/>
    </MudAppBar>

    <MudDrawer Open="@SidebarService.IsOpen" OpenChanged="@SidebarService.SetAsync" ClipMode="DrawerClipMode.Docked" Breakpoint="Breakpoint.Lg" Elevation="0">
        <MudNavMenu Color="Color.Primary" Dense="true" Margin="Margin.Dense" Rounded="true" Class="pa-2">
            <MudNavLink Match="NavLinkMatch.All" Href="@Links.History.Index" Icon="@EducationIcons.History">
                @L["Page:Home"]
            </MudNavLink>
            <MudNavGroup Title="@L["History:Epochs"]" Icon="@EducationIcons.Epochs">
                @foreach (var epoch in Enum.GetValues<EpochType>().Where(x => x != EpochType.None))
                {
                    <MudNavLink Href="@Links.History.Content.Epoch(epoch)">
                        @L[$"History:{epoch}"]
                    </MudNavLink>
                }
            </MudNavGroup>
            <MudNavLink Match="NavLinkMatch.All" Href="@Links.History.Content.Empires" Icon="@EducationIcons.Empires">
                @L["History:Empires"]
            </MudNavLink>
            <MudDivider Class="my-2"/>
            <MudNavLink Match="NavLinkMatch.All" Href="@Links.History.TopicTest.Builder" Icon="@EducationIcons.Tests">
                @L["Tests"]
            </MudNavLink>
            <MudNavLink Match="NavLinkMatch.All" Href="@Links.History.EventGuesser.Builder" Icon="@EducationIcons.EventGuesser">
                @L["EventGuesser"]
            </MudNavLink>
            <MudDivider Class="my-2"/>
            <MudNavLink Match="NavLinkMatch.All" Href="@Links.History.User.MyProfile" Icon="@EducationIcons.MyProfile">
                @L["Profile"]
            </MudNavLink>
            <MudNavLink Match="NavLinkMatch.All" Href="@Links.History.User.MyFavorites" Icon="@EducationIcons.MyTopics">
                @L["Favorites"]
            </MudNavLink>
        </MudNavMenu>
    </MudDrawer>

    @Body

    <MudScrollToTop TopOffset="400" Style="z-index:2000;">
        <MudFab Icon="@Icons.Outlined.KeyboardArrowUp" Color="Color.Primary"/>
    </MudScrollToTop>
</MudLayout>

@code {
    private MudAutocomplete<HistoryTopicSummary> _searchAutocomplete = default!;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private ThemeService ThemeService { get; set; } = default!;

    [Inject]
    private SidebarService SidebarService { get; set; } = default!;

    [Inject]
    private IHistoryClient Client { get; set; } = default!;

    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    private async Task<IEnumerable<HistoryTopicSummary>> OnSearch(string text)
    {
        if (string.IsNullOrWhiteSpace(text) || text.Length < 2)
            return Array.Empty<HistoryTopicSummary>();

        var result = await Client.Home.SearchAsync(text);
        return result.IsSuccess ? result.Data : Array.Empty<HistoryTopicSummary>();
    }

    private Task OnSearchResult(HistoryTopicSummary entry)
    {
        Navigation.NavigateTo(Links.History.Content.Topic(entry.Id));
        return _searchAutocomplete.Clear();
    }

}
