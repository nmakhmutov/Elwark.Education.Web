@page "/history/tests/{id}"
@layout HistoryLayout
@attribute [Authorize]

@using Education.Client.Gateways.History
@using Education.Client.Gateways.History.Tests.Model
@using Education.Client.Gateways.Models.Inventory
@using Education.Client.Pages.History.Tests.Test.Components

<EduPage ShowFooter="@_response.IsLoaded">
    <ApiViewer Response="@_response">
        <Success>
            <PageTitle>
                @_title
            </PageTitle>

            <EduContainer MaxWidth="EduWidth.W1280">
                <section class="grid">
                    <header class="header">
                        <MudPaper Elevation="0" Class="pa-3 px-sm-6 d-sm-flex justify-sm-space-between align-sm-center">
                            <MudText Typo="Typo.h5">
                                @_title
                            </MudText>
                            <div class="progress">
                                <div class="mb-1">
                                    <MudText Typo="Typo.subtitle1">
                                        @L["Questions"] @_test.CompletedQuestions / @_test.TotalQuestions
                                    </MudText>
                                    <MudProgressLinear Min="0" Max="100" Value="@(Progress)" Color="Color.Primary"/>
                                </div>
                                <CountdownTimer
                                    Typo="Typo.body1"
                                    Date="@_test.ExpiredAt"
                                    Color="@_countdownColor"
                                    OnComplete="@OnExpired"/>
                            </div>
                        </MudPaper>
                    </header>

                    <section class="test">
                        <MudPaper Elevation="0" Class="d-flex flex-column align-center pa-3 pa-sm-6">
                            <MudText Typo="Typo.subtitle1" Class="mb-3">
                                @_currentQuestion.Topic.Title
                            </MudText>

                            @if (_currentQuestion.Image is not null)
                            {
                                <img src="@_currentQuestion.Image" alt="@_currentQuestion.Title" class="image mb-6"/>
                            }

                            <MudText Typo="Typo.h6" Class="mb-6">
                                @_currentQuestion.Title
                            </MudText>

                            @switch (_currentQuestion)
                            {
                                case MultipleAnswerQuestionModel question:
                                {
                                    var answer = _userAnswer as MultipleAnswerToQuestionModel ?? new MultipleAnswerToQuestionModel();

                                    <MultipleAnswerForm
                                        IsLoading="@_isAnswering"
                                        IsTestCompleted="@IsCompleted"
                                        CorrectAnswer="@(_correctAnswer as MultipleAnswersResultModel)"
                                        UserAnswer="@answer"
                                        Options="@question.Options"
                                        OnAnswer="@OnMultiplyAnswer"
                                        OnNext="@OnNext"
                                        OnComplete="@OnComplete"/>
                                    break;
                                }

                                case ShortAnswerQuestionModel:
                                {
                                    var answer = _userAnswer as ShortAnswerToQuestionModel ?? new ShortAnswerToQuestionModel();
                                    <ShortAnswerForm
                                        IsLoading="@_isAnswering"
                                        IsTestCompleted="@IsCompleted"
                                        CorrectAnswer="@(_correctAnswer as ShortAnswerResultModel)"
                                        UserAnswer="@answer"
                                        OnAnswer="@OnShortAnswer"
                                        OnNext="@OnNext"
                                        OnComplete="@OnComplete"/>
                                    break;
                                }

                                case SingleAnswerQuestionModel question:
                                {
                                    var answer = _userAnswer as SingleAnswerToQuestionModel ?? new SingleAnswerToQuestionModel();

                                    <SingleAnswerForm
                                        IsLoading="@_isAnswering"
                                        IsTestCompleted="@IsCompleted"
                                        CorrectAnswer="@(_correctAnswer as SingleAnswerResultModel)"
                                        UserAnswer="@answer"
                                        Options="@question.Options"
                                        OnAnswer="@OnSingleAnswer"
                                        OnNext="@OnNext"
                                        OnComplete="@OnComplete"/>
                                    break;
                                }

                                default:
                                    throw new ArgumentOutOfRangeException(nameof(_currentQuestion));
                            }
                        </MudPaper>
                    </section>

                    <aside class="inventory">
                        <MudText Typo="Typo.h5">
                            Inventory
                        </MudText>

                        @foreach (var inventory in _inventory)
                        {
                            <MudText Typo="Typo.subtitle1">
                                @inventory.Title - @inventory.Count
                            </MudText>
                        }
                    </aside>
                </section>
            </EduContainer>
        </Success>
    </ApiViewer>
</EduPage>

@code {
    private ApiResponse<TestModel> _response = ApiResponse<TestModel>.Loading();
    private TestInventoryItemModel[] _inventory = Array.Empty<TestInventoryItemModel>();
    private Color _countdownColor = Color.Default;
    private TestOverviewModel _test = default!;
    private TestQuestionModel _currentQuestion = default!;
    private TestQuestionModel? _nextQuestion;
    private AnswerToQuestionModel? _userAnswer;
    private AnswerResultModel? _correctAnswer;
    private bool _isAnswering;
    private string _title = string.Empty;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryClient HistoryClient { get; set; } = default!;

    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    [Parameter]
    public string Id { get; set; } = string.Empty;

    private double Progress =>
        (double)_test.CompletedQuestions / _test.TotalQuestions * 100;

    private bool IsCompleted =>
        _test.CompletedQuestions == _test.TotalQuestions;

    protected override async Task OnParametersSetAsync()
    {
        _response = await HistoryClient.Test.GetAsync(Id);

        if (_response.IsSuccess)
        {
            _test = _response.Data.Overview;
            _currentQuestion = _response.Data.Question;
            _inventory = _response.Data.Inventory;
            _title = _test switch {
                EasyTestOverviewModel => L["Test:Easy"],
                HardTestOverviewModel => L["Test:Hard"],
                MixedTestOverviewModel => L["Test:Mixed"],
                _ => throw new ArgumentOutOfRangeException(nameof(_test), _test, null)
                };

            return;
        }

        if (_response.Error.IsTestAlreadyCompleted(out _))
            Navigation.NavigateTo(Links.History.TopicTest.Conclusion(Id));
        else if (_response.Error.IsTestNotFound(out _))
            Navigation.NavigateTo(Links.History.TopicTest.Conclusion(Id));
    }

    private async Task OnExpired()
    {
        _countdownColor = Color.Error;
        _response = await HistoryClient.Test.GetAsync(Id);

        if (_response.Status == ResponseStatus.Fail)
            Navigation.NavigateTo(Links.History.TopicTest.Conclusion(Id));
    }

    private async Task OnShortAnswer(ShortAnswerToQuestionModel answer)
    {
        _isAnswering = true;
        _userAnswer = answer;

        var result = await HistoryClient.Test.CheckAsync(_test.Id, _currentQuestion.Id, answer);
        if (result.IsSuccess)
            UpdateState(result.Data);
        else
            _response = ApiResponse<TestModel>.Fail(result.Error);

        _isAnswering = false;
    }

    private async Task OnSingleAnswer(SingleAnswerToQuestionModel answer)
    {
        _isAnswering = true;
        _userAnswer = answer;

        var result = await HistoryClient.Test.CheckAsync(_test.Id, _currentQuestion.Id, answer);
        if (result.IsSuccess)
            UpdateState(result.Data);
        else
            _response = ApiResponse<TestModel>.Fail(result.Error);

        _isAnswering = false;
    }

    private async Task OnMultiplyAnswer(MultipleAnswerToQuestionModel answer)
    {
        _isAnswering = true;
        _userAnswer = answer;

        var result = await HistoryClient.Test.CheckAsync(_test.Id, _currentQuestion.Id, answer);
        if (result.IsSuccess)
            UpdateState(result.Data);
        else
            _response = ApiResponse<TestModel>.Fail(result.Error);

        _isAnswering = false;
    }

    private void UpdateState(TestAnswerModel result)
    {
        _test = result.Overview;
        _inventory = result.Inventory;
        _nextQuestion = result.NextQuestion;
        _correctAnswer = result.Answer;

        StateHasChanged();
    }

    private void OnNext()
    {
        if (_nextQuestion is null)
            return;

        _currentQuestion = _nextQuestion;
        _nextQuestion = null;
        _userAnswer = null;
        _correctAnswer = null;

        StateHasChanged();
    }

    private void OnComplete() =>
        Navigation.NavigateTo(Links.History.TopicTest.Conclusion(Id));

}
