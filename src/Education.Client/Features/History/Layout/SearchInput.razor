@using Education.Client.Features.History.Clients.Search
@using Education.Client.Features.History.Clients.Search.Model
@using Education.Client.Features.History.Clients.Search.Request
<MudAutocomplete
    T="SearchModel"
    @ref="@_searchAutocomplete"
    DebounceInterval="300"
    AdornmentIcon="@Icons.Material.Outlined.Search"
    Placeholder="@L["Search_Title"]"
    IconSize="Size.Small"
    Margin="Margin.Dense"
    Variant="Variant.Outlined"
    Adornment="Adornment.Start"
    SearchFunc="@OnSearch"
    ValueChanged="@OnSearchResult"
    TextChanged="@OnTextChanged"
    ProgressIndicatorColor="Color.Primary"
    ShowProgressIndicator
    ResetValueOnEmptyText
    Clearable>
    <ItemTemplate>
        <div class="d-flex align-center">
            <MudAvatar Size="Size.Large" Square Class="mr-3">
                <MudImage Src="@context.Image.Small" Alt="@context.Image.Alt"/>
            </MudAvatar>
            <div class="one-line-text">
                <MudText Class="mud-text-secondary" Typo="Typo.caption">
                    @context.Category
                </MudText>
                <MudText Typo="Typo.body1">
                    @context.Title
                </MudText>
                <MudText Typo="Typo.caption">
                    @context.Overview
                </MudText>
            </div>
        </div>
    </ItemTemplate>
    <MoreItemsTemplate>
        <MudLink Class="px-3" OnClick="@OnSearchMore">
            @L["Search_MoreResults"]
        </MudLink>
    </MoreItemsTemplate>
</MudAutocomplete>

@code {
    private string? _search;
    private MudAutocomplete<SearchModel> _searchAutocomplete = default!;

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [Inject]
    private IHistorySearchClient SearchClient { get; init; } = default!;

    [Inject]
    private NavigationManager Navigation { get; init; } = default!;

    private async Task<IEnumerable<SearchModel>> OnSearch(string text, CancellationToken ct)
    {
        if (string.IsNullOrWhiteSpace(text) || text.Length < 2)
            return [];

        var response = await SearchClient.SearchAsync(new SearchRequest(text, 0, 11), ct);

        return response.Map(x => x.Hints)
            .UnwrapOrElse(() => []);
    }

    private Task OnSearchResult(SearchModel? entry)
    {
        if (entry is null)
            return Task.CompletedTask;

        Navigation.NavigateTo(entry.ContentHref);
        return _searchAutocomplete.ClearAsync();
    }

    private Task OnSearchMore()
    {
        Navigation.NavigateTo(HistoryUrl.Search(_search));
        return _searchAutocomplete.ClearAsync();
    }

    private void OnTextChanged(string value) =>
        _search = value;

}
