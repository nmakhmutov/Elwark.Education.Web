@using Education.Client.Gateways.History
@using Education.Client.Gateways.History.EventGuesser
@using Education.Client.Gateways.History.EventGuesser.Models
@using Education.Client.Gateways.History.EventGuesser.Requests
@using Education.Client.Gateways.History.Me
@using Education.Client.Gateways.Models.User
@using Education.Client.Features.History.Components

<section class="grid">
    <ApiViewer Response="@Builder">
        <Loading>
            <section>
                <MudSkeleton SkeletonType="SkeletonType.Text" Height="52px"/>
                <MudSkeleton SkeletonType="SkeletonType.Text" Height="52px"/>
                <MudSkeleton SkeletonType="SkeletonType.Text" Height="28px" Class="mb-3"/>
                <div class="d-flex justify-end">
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="140px" Height="36px"/>
                </div>
            </section>
            
            <section>
                <MudSkeleton SkeletonType="SkeletonType.Text" Width="30%" Height="38px"/>
                <MudSkeleton SkeletonType="SkeletonType.Text" Width="80%"/>
                <MudSkeleton SkeletonType="SkeletonType.Text" Width="70%"/>
                <MudSkeleton SkeletonType="SkeletonType.Text" Width="90%"/>
            </section>
        </Loading>
        <Success Context="builder">
            <section>
                <EditForm Model="@_model" OnValidSubmit="@OnValidSubmit">
                    <MudSelect Label="@L["History:Epoch"]" @bind-Value="@_model.Epoch" Class="mb-3">
                        <MudSelectItem Value="@EpochType.None">@L["All"]</MudSelectItem>
                        @foreach (var period in Enum.GetValues<EpochType>().Where(x => x != EpochType.None))
                        {
                            <MudSelectItem Value="@period">
                                @L[$"History:{period}"]
                            </MudSelectItem>
                        }
                    </MudSelect>

                    <MudSlider @bind-Value="@_model.Questions" Min="3" Max="13" Color="Color.Primary" Class="mb-3">
                        @L["EventGuesser:NumberOfDates", _model.Questions]
                    </MudSlider>

                    <div class="d-flex justify-space-between mb-3">
                        <MudText Typo="Typo.subtitle1">
                            @L["Subscription:EventGuesserCreation"]
                        </MudText>
                        <RestrictionQuantityView Restriction="@builder.Restriction.EventGuesser.Restriction" Class="mr-2"/>
                    </div>
                    
                    <div class="d-flex flex-row justify-end">
                        @if (builder.IsExistCurrent)
                        {
                            <LoadingButton
                                Class="mr-3"
                                ButtonType="ButtonType.Button"
                                Text="@L["Test:Continue"]"
                                LoadingText="@L["Loading"]"
                                IsLoading="@_isContinuing"
                                OnClick="@OnContinuationClick"/>
                        }
                        
                        @if (builder.Restriction.EventGuesser.Restriction.Quantity == 0)
                        {
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="true">
                                @L["Test:Create"]
                            </MudButton>
                        }
                        else
                        {
                            <LoadingButton
                                ButtonType="ButtonType.Submit"
                                Text="@L["Test:Create"]"
                                LoadingText="@L["Test:Creating"]"
                                IsLoading="@_isCreating"/>
                        }
                    </div>
                </EditForm>
            </section>
            
            <article>
                <MudText Typo="Typo.h5" Class="mb-3">@builder.Rule.Title</MudText>
                <SimpleMarkdown Text="@builder.Rule.Content"/>
            </article>
        </Success>
    </ApiViewer>
</section>

@code {

    private readonly Model _model = new();
    private bool _isCreating;
    private bool _isContinuing;

    [Inject]
    public IStringLocalizer<App> L { get; set; } = default!;

    [Parameter]
    public ApiResponse<TestBuilder> Builder { get; set; } = ApiResponse<TestBuilder>.Loading();

    [Parameter, EditorRequired]
    public EventCallback<CreateRequest> OnCreate { get; set; }
    
    [Parameter,EditorRequired]
    public EventCallback OnContinuation { get; set; }
    
    private async Task OnValidSubmit()
    {
        _isCreating = true;
        await OnCreate.InvokeAsync(new CreateRequest(_model.Questions, _model.Epoch));
        _isCreating = false;
    }

    private async Task OnContinuationClick()
    {
        _isContinuing = true;
        await OnContinuation.InvokeAsync();
        _isContinuing = false;
    }
    
    public sealed record Model
    {
        public EpochType Epoch { get; set; } = EpochType.None;

        public int Questions { get; set; } = 4;
    }

}
