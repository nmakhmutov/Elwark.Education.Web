@using FluentValidation
@using Education.Client.Gateways.History.EventGuesser
@using Education.Client.Gateways.History.EventGuesser.Models
@using Education.Client.Gateways.History.EventGuesser.Requests

<div class="@Class">
    <div class="header">
        <div class="header-score">
            <MudText Typo="Typo.subtitle1">
                @L["EventGuesser:Score"]
            </MudText>
            <div class="d-flex flex-row align-center">
                <MudIcon Icon="@EducationIcons.Score" Class="mr-1" Size="Size.Small" Color="Color.Primary"/>
                <MudText Typo="Typo.subtitle1">
                    @_score
                </MudText>
            </div>
        </div>
        <div class="header-bonus">
            <div class="d-flex flex-row align-center">
                <MudText Typo="Typo.subtitle1">
                    @L["EventGuesser:Bonus"]
                </MudText>
                @if (_x2BonusUntil > DateTime.UtcNow)
                {
                    <CountdownTimer Typo="Typo.caption" Class="ml-1" Date="@_x2BonusUntil" OnComplete="@(() => _x2BonusUntil = DateTime.MinValue)"/>
                }
            </div>
            <div class="d-flex flex-row justify-end align-center">
                <MudIcon Icon="@EducationIcons.Experience" Class="mr-1" Size="Size.Small" Color="Color.Primary"/>
                <MudText Typo="Typo.subtitle1">x@(_x2BonusUntil > DateTime.UtcNow ? 2 : 1)</MudText>
            </div>
        </div>
        <div class="header-questions">
            <MudText Typo="Typo.subtitle1">
                @L["Questions"] @(_questionIndex + 1) / @Test.Questions.Length
            </MudText>
        </div>
    </div>

    <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-3 mb-sm-6">
        @_model.Title
    </MudText>

    <EditForm Model="@_model" OnValidSubmit="@OnValidSubmit">
        <FluentValidationValidator/>

        <div class="form">
            <MudNumericField
                @bind-Value="@_model.Year"
                For="@(() => _model.Year)"
                Label="@L["EventGuesser:Year"]"
                Variant="Variant.Text"
                HideSpinButtons="true"
                AutoFocus="true"/>

            <MudSelect T="uint?" @bind-Value="@_model.Month" For="@(() => _model.Month)" Label="@L["EventGuesser:Month"]" Clearable="true">
                <MudSelectItem Value="@(1u)" T="uint?">
                    @L["Month:January"]
                </MudSelectItem>
                <MudSelectItem Value="@(2u)" T="uint?">
                    @L["Month:February"]
                </MudSelectItem>
                <MudSelectItem Value="@(3u)" T="uint?">
                    @L["Month:March"]
                </MudSelectItem>
                <MudSelectItem Value="@(4u)" T="uint?">
                    @L["Month:April"]
                </MudSelectItem>
                <MudSelectItem Value="@(5u)" T="uint?">
                    @L["Month:May"]
                </MudSelectItem>
                <MudSelectItem Value="@(6u)" T="uint?">
                    @L["Month:June"]
                </MudSelectItem>
                <MudSelectItem Value="@(7u)" T="uint?">
                    @L["Month:July"]
                </MudSelectItem>
                <MudSelectItem Value="@(8u)" T="uint?">
                    @L["Month:August"]
                </MudSelectItem>
                <MudSelectItem Value="@(9u)" T="uint?">
                    @L["Month:September"]
                </MudSelectItem>
                <MudSelectItem Value="@(10u)" T="uint?">
                    @L["Month:October"]
                </MudSelectItem>
                <MudSelectItem Value="@(11u)" T="uint?">
                    @L["Month:November"]
                </MudSelectItem>
                <MudSelectItem Value="@(12u)" T="uint?">
                    @L["Month:December"]
                </MudSelectItem>
            </MudSelect>

            <MudSelect T="uint?" @bind-Value="@_model.Day" For="@(() => _model.Day)" Label="@L["EventGuesser:Day"]" Clearable="true">
                @foreach (var day in Enumerable.Range(1, 31))
                {
                    <MudSelectItem Value="@((uint)day)" T="uint?">
                        @day
                    </MudSelectItem>
                }
            </MudSelect>

            <MudRadioGroup @bind-SelectedOption="@_model.IsBc">
                <MudRadio Option="false">
                    @L["HistoricalDate:Ad"]
                </MudRadio>
                <MudRadio Option="true">
                    @L["HistoricalDate:Bc"]
                </MudRadio>
            </MudRadioGroup>

            @if (!_isComplete)
            {
                <div class="submit">
                    <LoadingButton
                        ButtonType="ButtonType.Submit"
                        Text="@L["Test:Answer"]"
                        LoadingText="@L["Loading"]"
                        IsLoading="@_isLoading"/>
                </div>
            }
        </div>
    </EditForm>
</div>

@code {

    [Inject]
    public IStringLocalizer<App> L { get; set; } = default!;

    [Parameter, EditorRequired]
    public TestModel Test { get; set; } = default!;

    [Parameter, EditorRequired]
    public Func<CheckRequest, Task<CheckModel?>> OnCheck { get; set; } = default!;

    [Parameter]
    public string? Class { get; set; }

    private Model _model = new();
    private int _questionIndex;
    private uint _score;
    private DateTime _x2BonusUntil;
    private bool _isLoading;
    private bool _isComplete;

    protected override void OnParametersSet()
    {
        _score = Test.Score;
        _x2BonusUntil = Test.X2BonusUntil;

        for (var i = 0; i < Test.Questions.Length; i++)
        {
            if (Test.Questions[i].IsAnswered)
                continue;

            _questionIndex = i;
            break;
        }

        SetCurrentQuestion();
    }

    private void SetCurrentQuestion()
    {
        var (id, title, _) = Test.Questions[_questionIndex];
        _model = new Model
        {
            Id = id,
            Title = title
        };
    }

    private async Task OnValidSubmit()
    {
        _isLoading = true;
        var result = await OnCheck(
            new CheckRequest(
                _model.Id,
                _model.IsBc ? -_model.Year.GetValueOrDefault(0) : _model.Year.GetValueOrDefault(0),
                _model.Month,
                _model.Day
                )
            );

        if (result is null)
        {
            _isLoading = false;
            return;
        }

        _score = result.Score;
        _x2BonusUntil = result.X2BonusUntil;
        _isComplete = result.IsComplete;

        if (_questionIndex == Test.Questions.Length - 1)
            return;

        _questionIndex++;
        SetCurrentQuestion();

        _isLoading = false;
    }

    public sealed record Model
    {
        public string Id { get; set; } = string.Empty;

        public string Title { get; set; } = string.Empty;

        public int? Year { get; set; }

        public uint? Month { get; set; }

        public uint? Day { get; set; }

        public bool IsBc { get; set; }

        public sealed class Validator : AbstractValidator<Model>
        {
            public Validator()
            {
                RuleFor(x => x.Id)
                    .NotNull();

                RuleFor(x => x.Year)
                    .NotNull()
                    .GreaterThan(0)
                    .LessThan(10000);

                RuleFor(x => x.Month)
                    .GreaterThan(0u)
                    .LessThanOrEqualTo(12u);

                RuleFor(x => x.Day)
                    .GreaterThan(0u)
                    .LessThanOrEqualTo(31u);
            }
        }
    }

}
