@page "/history/event-guessers"
@layout HistoryLayout
@attribute [Authorize]

@using Education.Client.Gateways.History.EventGuesser.Models
@using Education.Client.Gateways.History.EventGuesser.Requests
@using Education.Client.Gateways.History

<PageTitle>@L["EventGuesser"]</PageTitle>

<EduPage Subject="@L["Subject:History"]" ShowFooter="@_response.IsLoaded">
    <ApiViewer Response="@_response">
        <Loading>
            <div class="background d-flex justify-center align-center">
                <PageSpinner/>
            </div>
        </Loading>
        <Success Context="builder">
            <div class="background pa-3 pa-sm-6">
                <PageHeader Title="@L["EventGuesser"]" Class="mb-3 mb-sm-6" Breadcrumbs="@Breadcrumbs"/>
                <section class="grid">
                    <section>
                        <EditForm Model="@_model" OnValidSubmit="@OnValidSubmit">
                            <MudSelect Label="@L["History:Epoch"]" @bind-Value="@_model.Epoch" Class="mb-3">
                                <MudSelectItem Value="@EpochType.None">@L["All"]</MudSelectItem>
                                @foreach (var period in Enum.GetValues<EpochType>().Where(x => x != EpochType.None))
                                {
                                    <MudSelectItem Value="@period">
                                        @L[$"History:{period}"]
                                    </MudSelectItem>
                                }
                            </MudSelect>

                            <MudSlider @bind-Value="@_model.Questions" Min="3" Max="13" Color="Color.Primary" Class="mb-3">
                                @L["EventGuesser:NumberOfDates", _model.Questions]
                            </MudSlider>

                            <div class="d-flex justify-space-between mb-3">
                                <MudText Typo="Typo.subtitle1">
                                    @L["Subscription:EventGuesserCreation"]
                                </MudText>
                                <RestrictionQuantityText Restriction="@builder.Restriction.EventGuesser.Restriction" Class="mr-2"/>
                            </div>

                            <div class="d-flex flex-row justify-end">
                                @if (builder.IsExistCurrent)
                                {
                                    <MudButton
                                        Class="mr-3"
                                        Variant="Variant.Filled"
                                        Color="Color.Primary"
                                        Link="@Links.History.EventGuesserPersonal">
                                        @L["Test:Continue"]
                                    </MudButton>
                                }

                                @if (builder.Restriction.EventGuesser.Restriction.Quantity == 0)
                                {
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="true">
                                        @L["Test:Create"]
                                    </MudButton>
                                }
                                else
                                {
                                    <LoadingButton
                                        ButtonType="ButtonType.Submit"
                                        Text="@L["Test:Create"]"
                                        LoadingText="@L["Test:Creating"]"
                                        IsLoading="@_isCreating"/>
                                }
                            </div>
                        </EditForm>
                    </section>

                    <aside>
                        <MudText Typo="Typo.h5" Class="mb-3">@builder.Rule.Title</MudText>
                        <SimpleMarkdown Text="@builder.Rule.Content"/>
                    </aside>
                </section>
            </div>
        </Success>
    </ApiViewer>
</EduPage>

@code {
    private bool _isCreating;
    private readonly Model _model = new();
    private ApiResponse<TestBuilder> _response = ApiResponse<TestBuilder>.Loading();

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["Subject:History"].Value, Links.History.Index)
    };

    [Inject]
    public IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryClient Client { get; set; } = default!;

    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    protected override async Task OnInitializedAsync() =>
        _response = await Client.EventGuesser.GetBuilderAsync();

    private async Task OnValidSubmit()
    {
        _isCreating = true;

        var response = await Client.EventGuesser.CreateAsync(new CreateRequest(_model.Questions, _model.Epoch));
        if (response.IsSuccess)
            Navigation.NavigateTo(Links.History.EventGuesserPersonal);
        else
            Snackbar.Add(response.Error.Message, Severity.Error);

        _isCreating = false;
    }

    internal sealed record Model
    {
        public EpochType Epoch { get; set; } = EpochType.None;

        public int Questions { get; set; } = 4;
    }
}
