@page "/history/event-guessers"
@layout HistoryLayout

@using Education.Client.Gateways.History
@using Education.Client.Gateways.History.EventGuesser.Models
@using Education.Client.Gateways.History.EventGuesser.Requests
@using Education.Client.Features.History.EventGuessers.Components

<PageTitle>
    @L["EventGuesser"]
</PageTitle>

@if (_conclusion.Status == ResponseStatus.Success)
{
    <MainContainer>
        <PageHeader Title="@L["EventGuesser"]" Class="mb-3 mb-sm-6" Breadcrumbs="@Breadcrumbs"/>
    </MainContainer>
    <CenteredContainer MaxWidth="ContainerWidth.W1280" Class="mb-3 mb-sm-6" Paper="true" Elevation="1">
        <EventGuesserConclusion Class="ma-3 ma-sm-6" Conclusion="@_conclusion.Data" OnCreateNew="@OnCreateNewClick"/>
    </CenteredContainer>
}
else if (_eventGuesser.Status == ResponseStatus.Success)
{
    <MainContainer>
        <PageHeader Title="@L["EventGuesser"]" Class="mb-3 mb-sm-6" Breadcrumbs="@Breadcrumbs"/>
    </MainContainer>
    <CenteredContainer MaxWidth="ContainerWidth.W960" Class="mb-3 mb-sm-6" Paper="true" Elevation="1">
        <EventGuesserTest Class="ma-3 ma-sm-6" Test="@_eventGuesser.Data" OnCheck="@OnCheckAsync"/>
    </CenteredContainer>
}
else
{
    <div class="background">
        <MainContainer>
            <PageHeader Title="@L["EventGuesser"]" Class="mb-3 mb-sm-6" Breadcrumbs="@Breadcrumbs"/>
            <EventGuesserBuilder Builder="@_builder" OnCreate="@OnCreateAsync" OnContinuation="@OnContinueAsync"/>
        </MainContainer>
    </div>
}

@code {

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["Subject:History"].Value, Links.History.Index)
    };

    private ApiResponse<TestBuilder> _builder = ApiResponse<TestBuilder>.Loading();
    private ApiResponse<TestModel> _eventGuesser = ApiResponse<TestModel>.Loading();
    private ApiResponse<ConclusionModel> _conclusion = ApiResponse<ConclusionModel>.Loading();

    [Inject]
    public IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryClient Client { get; set; } = default!;

    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        _builder = await Client.EventGuesser.GetBuilderAsync();
    }

    private async Task OnCreateAsync(CreateRequest request)
    {
        _eventGuesser = await Client.EventGuesser.CreateAsync(request);
        if (!_eventGuesser.IsSuccess)
            Snackbar.Add(_eventGuesser.Error.Message, Severity.Error);
    }

    private async Task OnContinueAsync()
    {
        _eventGuesser = await Client.EventGuesser.GetAsync();
        if (!_eventGuesser.IsSuccess)
            Snackbar.Add(_eventGuesser.Error.Message, Severity.Error);
    }

    private async Task<CheckModel?> OnCheckAsync(CheckRequest request)
    {
        var result = await Client.EventGuesser.CheckAsync(request);
        if (!result.IsSuccess)
        {
            Snackbar.Add(result.Error.Message, Severity.Error);
            return null;
        }

        if (!result.Data.IsComplete)
            return result.Data;

        _conclusion = await Client.EventGuesser.ConcludeAsync();
        if (!_conclusion.IsSuccess)
            Snackbar.Add(_conclusion.Error.Message, Severity.Error);

        StateHasChanged();
        return result.Data;
    }

    private async Task OnCreateNewClick()
    {
        _eventGuesser = ApiResponse<TestModel>.Loading();
        _conclusion = ApiResponse<ConclusionModel>.Loading();
        _builder = await Client.EventGuesser.GetBuilderAsync();
    }

}
