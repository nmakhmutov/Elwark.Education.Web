@page "/history/event-guessers/conclusion"
@layout HistoryLayout
@attribute [Authorize]

@using Education.Client.Gateways.History.EventGuesser.Models
@using Education.Client.Gateways.History
@using Education.Client.Features.History.Components

<EduPage Subject="@L["Subject:History"]" ShowFooter="@_response.IsLoaded">
    <ApiViewer Response="@_response">
        <Success Context="conclusion">
            <EduContainer>
                <PageHeader Title="@L["EventGuesser"]" Breadcrumbs="@Breadcrumbs"/>
            </EduContainer>

            <EduContainer MaxWidth="EduWidth.W1280">
                <div class="d-flex flex-row flex-wrap justify-space-between align-center mb-3 mb-sm-6">
                    <div class="header-score">
                        <MudText Typo="Typo.subtitle1">
                            @L["EventGuesser:Score"]
                        </MudText>
                        <div class="d-flex flex-row align-center">
                            <MudIcon Icon="@EducationIcons.Score" Class="mr-1" Size="Size.Small" Color="Color.Primary"/>
                            <MudText Typo="Typo.subtitle1">
                                @conclusion.Score
                            </MudText>
                        </div>
                    </div>

                    <div class="header-time-spent">
                        <MudText Typo="Typo.subtitle1" Align="Align.End">
                            @L["EventGuesser:TimeSpent"]
                        </MudText>
                        <MudText Typo="Typo.subtitle1" Align="Align.End">
                            @conclusion.TimeSpent.ToSimpleFormat()
                        </MudText>
                    </div>
                </div>

                <MudTable
                    Items="@conclusion.Questions"
                    Class="mb-3 mb-sm-6"
                    Hover="true"
                    Breakpoint="Breakpoint.Sm"
                    Bordered="false"
                    Elevation="0">
                    <HeaderContent>
                        <MudTh>@L["Topic"]</MudTh>
                        <MudTh>@L["Question"]</MudTh>
                        <MudTh>@L["EventGuesser:CorrectAnswer"]</MudTh>
                        <MudTh>@L["EventGuesser:UserAnswer"]</MudTh>
                        <MudTh>@L["EventGuesser:Points"] / @L["EventGuesser:Bonus"]</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="@L["Topic"]">
                            <MudLink Href="@Links.History.Content.Topic(context.Topic.Id)">
                                @context.Topic.Title
                            </MudLink>
                        </MudTd>
                        <MudTd DataLabel="@L["Question"]">
                            @context.Title
                        </MudTd>
                        <MudTd DataLabel="@L["EventGuesser:CorrectAnswer"]">
                            <HistoryDate Typo="Typo.body2" Date="@context.CorrectAnswer"/>
                        </MudTd>
                        <MudTd DataLabel="@L["EventGuesser:UserAnswer"]">
                            <HistoryDate Typo="Typo.body2" Date="@context.UserAnswer" Color="@(context.IsCorrect ? Color.Success : Color.Error)"/>
                        </MudTd>
                        <MudTd DataLabel="@($"{L["EventGuesser:Points"]} / {L["EventGuesser:Bonus"]}")">
                            @context.Points / @context.Bonus (@context.Score)
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </EduContainer>
        </Success>
    </ApiViewer>
</EduPage>

@code {
    private ApiResponse<ConclusionModel> _response = ApiResponse<ConclusionModel>.Loading();

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["Subject:History"].Value, Links.History.Index),
        new BreadcrumbItem(L["EventGuesser"].Value, Links.History.EventGuesser.Builder),
    };

    [Inject]
    public IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryClient Client { get; set; } = default!;

    protected override async Task OnInitializedAsync() => 
        _response = await Client.EventGuesser.GetConclusionAsync();

}
