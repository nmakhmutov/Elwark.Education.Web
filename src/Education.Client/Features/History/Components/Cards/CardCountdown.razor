@implements IDisposable

<div class="d-flex gap-3 gap-sm-6 @Class">
    @if (_timeLeft.Days > 0)
    {
        <div class="flex-auto mud-paper rounded pa-6 pa-lg-9">
            <MudText Typo="Typo.h2" Align="Align.Center">
                @_timeLeft.Days.ToString("00")
            </MudText>
            <MudText Typo="Typo.h6" Align="Align.Center">
                @L["Countdown_Days"]
            </MudText>
        </div>
    }
    <div class="flex-auto mud-paper rounded pa-6 pa-lg-9">
        <MudText Typo="Typo.h2" Align="Align.Center">
            @_timeLeft.Hours.ToString("00")
        </MudText>
        <MudText Typo="Typo.h6" Align="Align.Center">
            @L["Countdown_Hours"]
        </MudText>
    </div>
    <div class="flex-auto mud-paper rounded pa-6 pa-lg-9">
        <MudText Typo="Typo.h2" Align="Align.Center">
            @_timeLeft.Minutes.ToString("00")
        </MudText>
        <MudText Typo="Typo.h6" Align="Align.Center">
            @L["Countdown_Minutes"]
        </MudText>
    </div>
    @if (_timeLeft.Days == 0)
    {
        <div class="flex-auto mud-paper rounded pa-6 pa-lg-9">
            <MudText Typo="Typo.h2" Align="Align.Center">
                @_timeLeft.Seconds.ToString("00")
            </MudText>
            <MudText Typo="Typo.h6" Align="Align.Center">
                @L["Countdown_Seconds"]
            </MudText>
        </div>
    }
</div>

@code {
    private TimeSpan _timeLeft = TimeSpan.Zero;
    private readonly PeriodicTimer _timer = new(TimeSpan.FromSeconds(1));

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [Parameter]
    public string? Class { get; set; }

    [Parameter, EditorRequired]
    public DateTime Deadline { get; set; }

    protected override Task OnInitializedAsync() =>
        InvokeAsync(async () =>
        {
            UpdateRemainingTime();

            while (await _timer.WaitForNextTickAsync())
            {
                UpdateRemainingTime();

                StateHasChanged();

                if (TimeSpan.Zero >= _timeLeft)
                    break;
            }
        });

    private void UpdateRemainingTime() =>
        _timeLeft = new TimeSpan(Deadline.Ticks - DateTime.UtcNow.Ticks / TimeSpan.TicksPerSecond * TimeSpan.TicksPerSecond);

    public void Dispose() =>
        _timer.Dispose();

}
