@using ApexCharts
@using Education.Client.Features.History.Clients.Learner.Model.Quiz
<div class="@Class">
    <ApexChartContainer>
        <ApexChart TItem="Data" Options="@_options">
            <ApexPointSeries
                TItem="Data"
                Items="@Series"
                SeriesType="SeriesType.Donut"
                XValue="@(x => x.Name)"
                YAggregate="@(x => x.Sum(e => e.Value))"/>
        </ApexChart>
    </ApexChartContainer>

    <ChartList Items="@Items"/>
</div>

@code {

    private static ApexChartOptions<Data> _options =
        new()
        {
            Chart = new Chart
            {
                Background = "transparent",
                ForeColor = "var(--mud-palette-text-primary)"
            },
            Stroke = new Stroke
            {
                Show = false
            },
            Legend = new Legend
            {
                Show = false
            },
            Colors =
            [
                HistoryChart.Quiz.Completeness.Successful,
                HistoryChart.Quiz.Completeness.Failed,
                HistoryChart.Quiz.Completeness.TimeExceeded,
                HistoryChart.Quiz.Completeness.MistakesLimitExceeded
            ]
        };

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [Parameter]
    public string? Class { get; set; }

    [Parameter, EditorRequired]
    public required NumberOfQuizzesModel Quizzes { get; set; }

    private EduChartListItem[] Items =>
    [
        new(L["NumberOfQuizzes_Successful_Title"], Quizzes.Succeeded, HistoryChart.Quiz.Completeness.Successful),
        new(L["NumberOfQuizzes_Failed_Title"], Quizzes.Failed, HistoryChart.Quiz.Completeness.Failed),
        new(L["NumberOfQuizzes_TimeExceeded_Title"], Quizzes.TimeExceeded, HistoryChart.Quiz.Completeness.TimeExceeded),
        new(L["NumberOfQuizzes_MistakesLimitExceeded_Title"], Quizzes.MistakesLimitExceeded, HistoryChart.Quiz.Completeness.MistakesLimitExceeded),
        new(L["NumberOfQuizzes_Total_Title"], Quizzes.Total, null)
    ];

    private Data[] Series =>
    [
        new(L["NumberOfQuizzes_Successful_Title"], Quizzes.Succeeded),
        new(L["NumberOfQuizzes_Failed_Title"], Quizzes.Failed),
        new(L["NumberOfQuizzes_TimeExceeded_Title"], Quizzes.TimeExceeded),
        new(L["NumberOfQuizzes_MistakesLimitExceeded_Title"], Quizzes.MistakesLimitExceeded)
    ];

    private sealed record Data(string Name, decimal Value);
}
