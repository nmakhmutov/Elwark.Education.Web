@using ApexCharts
@using Education.Client.Features.History.Clients.Learner.Model.Quiz
<div class="@Class">
    <ApexChartContainer>
        <ApexChart TItem="Data" Options="@Options">
            <ApexRangeSeries
                TItem="Data"
                Items="@Series"
                XValue="@(x => x.Name)"
                YValue="@(x => x.Value)"
                PointColor="@(x => x.Color)"/>
        </ApexChart>
    </ApexChartContainer>

    <ChartList Items="@Items"/>
</div>

@code {

    private static ApexChartOptions<Data> Options =>
        new()
        {
            PlotOptions = new PlotOptions
            {
                Bar = new PlotOptionsBar
                {
                    Horizontal = true
                }
            },
            Xaxis = new XAxis
            {
                Labels = new XAxisLabels
                {
                    Formatter = @"
                                function(value) {
                                    var minutes = Math.floor(value / 60000);
                                    var seconds = ((value % 60000) / 1000).toFixed(0);
                                    return minutes + ':' + (seconds < 10 ? '0' : '') + seconds;
                                }
                                "
                }
            },
            Tooltip = new Tooltip
            {
                Enabled = false
            },
            Chart = new Chart
            {
                Toolbar = new Toolbar
                {
                    Show = false
                },
                Background = "transparent",
                ForeColor = "var(--mud-palette-text-primary)"
            },
            Stroke = new Stroke
            {
                Show = false
            }
        };

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [Parameter]
    public string? Class { get; set; }

    [Parameter, EditorRequired]
    public required QuizStatisticsModel.TimeSpentModel TimeSpent { get; set; }

    private EduChartListItem[] Items =>
    [
        new(L["TimeSpent_Min_Title"], TimeSpent.Min.Humanize(L), HistoryChart.Quiz.TimeSpent.Minimum),
        new(L["TimeSpent_Average_Title"], TimeSpent.Average.Humanize(L), HistoryChart.Quiz.TimeSpent.Average),
        new(L["TimeSpent_Max_Title"], TimeSpent.Max.Humanize(L), HistoryChart.Quiz.TimeSpent.Maximum),
        new(L["TimeSpent_Total_Title"], TimeSpent.Total.Humanize(L), null)
    ];

    private Data[] Series =>
    [
        new(L["TimeSpent_Min_Title"], 0, HistoryChart.Quiz.TimeSpent.Minimum),
        new(L["TimeSpent_Min_Title"], (decimal)TimeSpent.Min.TotalMilliseconds, HistoryChart.Quiz.TimeSpent.Minimum),
        new(L["TimeSpent_Average_Title"], 0, HistoryChart.Quiz.TimeSpent.Average),
        new(L["TimeSpent_Average_Title"], (decimal)TimeSpent.Average.TotalMilliseconds, HistoryChart.Quiz.TimeSpent.Average),
        new(L["TimeSpent_Max_Title"], 0, HistoryChart.Quiz.TimeSpent.Maximum),
        new(L["TimeSpent_Max_Title"], (decimal)TimeSpent.Max.TotalMilliseconds, HistoryChart.Quiz.TimeSpent.Maximum)
    ];

    private sealed record Data(string Name, decimal Value, string Color);

}
