@using Education.Client.Features.History.Clients.User
@using Education.Client.Features.History.Clients.User.Model
@using Education.Client.Features.Customer
<section class="mud-paper @Class">
    <header class="d-flex align-center pa-3 pa-sm-6">
        <img class="avatar rounded-circle mud-elevation-3 mr-3" src="@Customer.Image" alt="@Customer.Name" loading="lazy"/>
        <MudText Typo="Typo.h5">
            @Customer.Name
        </MudText>
    </header>

    <UserLevelProgress
        Class="px-3 px-sm-6"
        Level="@Level.Current"
        Experience="@Level.Experience"
        Threshold="@Level.Threshold"
        OnLevelClick="@OnLevelClick"/>

    <section class="d-flex flex-wrap flex-sm-nowrap justify-space-between align-center gap-3 pa-3 pa-sm-6">
        <div class="d-flex align-center gap-3">
            @foreach (var (currency, amount) in Wallet)
            {
                <InternalMoney Currency="@currency" Amount="@amount" Typo="Typo.body1" Horizontal/>
            }
        </div>
        <MudButton Color="Color.Primary" Variant="Variant.Text" Href="@HistoryUrl.User.MyBackpack">
            <BackpackOverview Fullness="@Backpack.Fullness" Capacity="@Backpack.Capacity"/>
        </MudButton>
    </section>

    @if (ShowFooter)
    {
        <footer class="border-t mud-border-lines-default pa-3">
            <MudButton
                Class="text-transform-none"
                EndIcon="@Icons.Material.Outlined.ArrowForward"
                Href="@CustomerUrl.Root">
                @L["Account_Title"]
            </MudButton>
        </footer>
    }
</section>

@code {

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [Inject]
    private IHistoryUserClient UserClient { get; init; } = default!;

    [Inject]
    private IDialogService DialogService { get; init; } = default!;

    [Parameter, EditorRequired]
    public required CustomerState Customer { get; set; }

    [Parameter, EditorRequired]
    public required UserLevelModel Level { get; set; }

    [Parameter, EditorRequired]
    public required BackpackOverviewModel Backpack { get; set; }

    [Parameter, EditorRequired]
    public required Dictionary<InternalCurrency, long> Wallet { get; set; }

    [Parameter]
    public bool ShowFooter { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string? Class { get; set; }

    private async Task OnLevelClick()
    {
        var options = new DialogOptions
        {
            FullWidth = true,
            MaxWidth = MaxWidth.Medium,
            CloseButton = false,
            NoHeader = true
        };

        var parameters = new DialogParameters
        {
            [nameof(NextLevelDialog.FullName)] = Customer.Name,
            [nameof(NextLevelDialog.Level)] = Level
        };

        await DialogService.ShowAsync<NextLevelDialog>(string.Empty, parameters, options);
    }

}