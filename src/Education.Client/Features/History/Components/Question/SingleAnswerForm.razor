@using FluentValidation
<EditForm Model="@_userAnswer" OnValidSubmit="OnValidSubmit">
    <FluentValidationValidator Validator="@_validator"/>

    <MudRadioGroup @bind-Value="@(_userAnswer.Answer)" ReadOnly="@(CorrectAnswer is not null)">
        <div class="d-flex flex-column mx-auto w-max-480 gap-3 mb-3 mb-sm-6">
            @foreach (var option in Options)
            {
                var (icon, color) = Get(option);

                <div class="d-flex flex-row align-center border-solid border rounded mud-border-primary px-3">
                    <MudRadio
                        Class="flex-grow-1"
                        Value="@option.Id"
                        Color="Color.Primary">
                        <AnswerOptionForm Option="@option"/>
                    </MudRadio>
                    @if (icon is not null)
                    {
                        <MudIcon Icon="@icon" Color="@color"/>
                    }
                </div>
            }
        </div>
    </MudRadioGroup>

    @if (CorrectAnswer is null)
    {
        <div class="d-flex flex-row justify-center">
            <LoadingButton
                Variant="Variant.Filled"
                Color="Color.Primary"
                IsLoading="@IsLoading"
                Text="@L["QuestionFrom_AnswerToQuestion"]"
                LoadingText="@L["Loading_Title"]"
                ButtonType="ButtonType.Submit"
                DisableElevation/>
        </div>

        <MudText Align="Align.Center" Typo="Typo.subtitle2" Color="@Color.Error" Class="mt-3 mt-sm-6">
            <ValidationSummary/>
        </MudText>
    }
    else
    {
        <div class="d-flex flex-row justify-center mb-3 mb-sm-6">
            <LoadingButton
                Variant="Variant.Filled"
                Color="Color.Primary"
                IsLoading="@IsLoading"
                Text="@L[IsCompleted ? "QuestionForm_ShowTheResult" : "QuestionForm_NextQuestion"]"
                LoadingText="@L["Loading_Title"]"
                OnClick="@OnNextAsync"
                DisableElevation/>
        </div>

        if (CorrectAnswer.IsCorrect)
        {
            <MudText Align="Align.Center" Typo="Typo.subtitle2" Color="@Color.Success">
                @L["QuestionFrom_CorrectAnswer"]
            </MudText>
        }
        else
        {
            <MudText Align="Align.Center" Typo="Typo.subtitle2" Color="@Color.Error">
                @L["QuestionFrom_IncorrectAnswer"]
            </MudText>
        }
    }
</EditForm>

@code {
    private Validator _validator = default!;
    private SingleAnswerModel _userAnswer = new();

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [Parameter, EditorRequired]
    public bool IsLoading { get; set; }

    [Parameter, EditorRequired]
    public bool IsCompleted { get; set; }

    [Parameter, EditorRequired]
    public AnswerResult.SingleModel? CorrectAnswer { get; set; }

    [Parameter, EditorRequired]
    public AnswerOption[] Options { get; set; } = [];

    [Parameter, EditorRequired]
    public EventCallback<SingleAnswerModel> OnAnswerClick { get; set; }

    [Parameter]
    public EventCallback OnNextClick { get; set; }

    protected override void OnInitialized() =>
        _validator = new Validator(L);

    private async Task OnValidSubmit()
    {
        try
        {
            await OnAnswerClick.InvokeAsync(_userAnswer);
        }
        finally
        {
            if (!OnNextClick.HasDelegate)
                _userAnswer = new SingleAnswerModel();
        }
    }

    private Task OnNextAsync()
    {
        _userAnswer = new SingleAnswerModel();
        return OnNextClick.InvokeAsync();
    }

    private (string? Icon, Color Color) Get(AnswerOption option) =>
        CorrectAnswer switch
        {
            { } x when option.Id == x.Answer =>
                (Icon: Icons.Material.Outlined.Check, Color: Color.Success),

            { IsCorrect: false } when option.Id == _userAnswer.Answer =>
                (Icon: Icons.Material.Outlined.Clear, Color: Color.Error),

            _ => (Icon: null, Color: Color.Default)
        };

    public sealed class Validator : AbstractValidator<SingleAnswerModel>
    {
        public Validator(IStringLocalizer<App> localizer) =>
            RuleFor(x => x.Answer)
                .NotEmpty()
                .WithMessage(localizer["QuestionFrom_AnswerCannotBeEmpty"]);
    }

}
