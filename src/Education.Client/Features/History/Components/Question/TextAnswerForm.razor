@using FluentValidation
<EditForm Model="@_userAnswer" OnValidSubmit="OnValidSubmit">
    <FluentValidationValidator Validator="@_validator"/>

    <div class="w-max-480 mx-auto mb-3 mb-sm-6">
        <MudTextField
            @bind-Value="@(_userAnswer.Answer)"
            Label="@L["QuestionFrom_UserAnswer"]"
            Variant="Variant.Outlined"
            ReadOnly="@(CorrectAnswer is not null)"
            Margin="Margin.Dense"
            FullWidth/>
    </div>

    <FormFooter>
        <Button>
            @if (CorrectAnswer is null)
            {
            <EduLoadingButton ButtonType="ButtonType.Submit"
                              Color="Color.Primary"
                              DisableElevation
                              IsLoading="@IsLoading"
                              LoadingText="@L["Loading_Title"]"
                              Size="Size.Large"
                              Text="@L["QuestionFrom_AnswerToQuestion"]"
                              Variant="Variant.Filled"/>
            }
            else
            {
            <EduLoadingButton Color="Color.Primary"
                              DisableElevation
                              IsLoading="@IsLoading"
                              LoadingText="@L["Loading_Title"]"
                              OnClick="@OnNextAsync"
                              Size="Size.Large"
                              Text="@L[IsCompleted ? "QuestionForm_ShowTheResult" : "QuestionForm_NextQuestion"]"
                              Variant="Variant.Filled"/>
            }
        </Button>

        <Information>
            @if (CorrectAnswer is null)
            {
                <MudText Typo="Typo.subtitle1" Color="Color.Error">
                    <ValidationSummary/>
                </MudText>
            }
            else if (CorrectAnswer.IsCorrect)
            {
                <MudText Typo="Typo.subtitle1" Color="Color.Success">
                    @L["QuestionFrom_CorrectAnswer"]
                </MudText>
            }
            else
            {
                <MudText Typo="Typo.subtitle1" Color="Color.Error">
                    @L["QuestionFrom_IncorrectAnswer"]
                </MudText>
            }
        </Information>
    </FormFooter>
</EditForm>

@code {
    private Validator _validator = default!;
    private TextAnswerModel _userAnswer = new();

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [Parameter, EditorRequired]
    public required bool IsLoading { get; set; }

    [Parameter, EditorRequired]
    public required bool IsCompleted { get; set; }

    [Parameter, EditorRequired]
    public required AnswerResult.TextModel? CorrectAnswer { get; set; }

    [Parameter, EditorRequired]
    public required EventCallback<TextAnswerModel> OnAnswerClick { get; set; }

    [Parameter]
    public EventCallback OnNextClick { get; set; }

    protected override void OnInitialized()
    {
        _userAnswer = new TextAnswerModel();
        _validator = new Validator(L);
    }

    private async Task OnValidSubmit()
    {
        try
        {
            await OnAnswerClick.InvokeAsync(_userAnswer);
        }
        finally
        {
            if (!OnNextClick.HasDelegate)
                _userAnswer = new TextAnswerModel();
        }
    }

    private Task OnNextAsync()
    {
        _userAnswer = new TextAnswerModel();
        return OnNextClick.InvokeAsync();
    }

    public sealed class Validator : AbstractValidator<TextAnswerModel>
    {
        public Validator(IStringLocalizer<App> localizer) =>
            RuleFor(x => x.Answer)
                .NotEmpty()
                .WithMessage(localizer["QuestionFrom_AnswerCannotBeEmpty"]);
    }

}
