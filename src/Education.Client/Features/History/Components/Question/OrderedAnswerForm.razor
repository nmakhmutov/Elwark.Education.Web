@using Education.Client.Models.Test
<div class="d-flex flex-column mx-auto w-max-480 gap-3 mb-3 mb-sm-6">
    <MudDropContainer
        T="AnswerOption"
        @ref="_container"
        Items="_options"
        ItemsSelector="@((_, _) => true)"
        ItemDropped="ItemUpdated"
        Class="d-flex flex-wrap flex-grow-1">
        <ChildContent>
            <MudDropZone T="AnswerOption" Class="d-flex flex-column gap-3 w-100" Identifier="1" AllowReorder/>
        </ChildContent>
        <ItemRenderer Context="option">
            <div class="d-flex flex-row align-center border-solid border rounded mud-border-primary gap-3 pa-3">
                <MudIcon Icon="@Icons.Material.Outlined.DragHandle"/>
                <div class="flex-grow-1">
                    <AnswerOptionForm Option="@option"/>
                </div>
                @if (GetMeta(option.Id) is { } meta)
                {
                    <div class="d-flex align-center gap-3">
                        <MudText Typo="Typo.body2">@meta.CorrectIndex</MudText>
                        @if (meta.IsCorrect)
                        {
                            <MudIcon Icon="@Icons.Material.Outlined.Check" Color="@Color.Success"/>
                        }
                        else
                        {
                            <MudIcon Icon="@Icons.Material.Outlined.Clear" Color="@Color.Error"/>
                        }
                    </div>
                }
            </div>
        </ItemRenderer>
    </MudDropContainer>
</div>

@if (CorrectAnswer is null)
{
    <div class="d-flex flex-row justify-center">
        <LoadingButton
            DisableElevation
            Variant="Variant.Filled"
            Color="Color.Primary"
            IsLoading="@IsLoading"
            Text="@L["QuestionFrom_AnswerToQuestion"]"
            OnClick="@OnValidSubmit"
            LoadingText="@L["Loading_Title"]"/>
    </div>
}
else
{
    <div class="d-flex flex-row justify-center mb-3 mb-sm-6">
        <LoadingButton
            Variant="Variant.Filled"
            Color="Color.Primary"
            IsLoading="@IsLoading"
            Text="@OnNextTitle"
            LoadingText="@L["Loading_Title"]"
            OnClick="@OnNextAsync"
            DisableElevation/>
    </div>

    if (CorrectAnswer.IsCorrect)
    {
        <MudText Align="Align.Center" Typo="Typo.subtitle2" Color="@Color.Success">
            @L["QuestionFrom_CorrectAnswer"]
        </MudText>
    }
    else
    {
        <MudText Align="Align.Center" Typo="Typo.subtitle2" Color="@Color.Error">
            @L["QuestionFrom_IncorrectAnswer"]
        </MudText>
    }
}

@code {
    private List<AnswerOption> _options = [];
    private List<uint> _correctIds = [];
    private MudDropContainer<AnswerOption>? _container;

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [Parameter, EditorRequired]
    public bool IsLoading { get; set; }

    [Parameter, EditorRequired]
    public AnswerResult.OrderedModel? CorrectAnswer { get; set; }

    [Parameter, EditorRequired]
    public AnswerOption[] Options { get; set; } = [];

    [Parameter, EditorRequired]
    public EventCallback<OrderedAnswerModel> OnAnswerClick { get; set; }

    [Parameter, EditorRequired]
    public string OnNextTitle { get; set; } = string.Empty;

    [Parameter, EditorRequired]
    public EventCallback OnNextClick { get; set; }

    protected override void OnParametersSet()
    {
        _container?.Refresh();

        if (_options.Count == 0)
            _options.AddRange(Options);

        if (_correctIds.Count == 0 && CorrectAnswer is not null)
            _correctIds.AddRange(CorrectAnswer.Answer);
    }

    private Task OnValidSubmit()
    {
        var answer = new OrderedAnswerModel
        {
            Answer = _options.Select(x => x.Id).ToList()
        };

        return OnAnswerClick.InvokeAsync(answer);
    }

    private Task OnNextAsync()
    {
        _options.Clear();
        _correctIds.Clear();

        return OnNextClick.InvokeAsync();
    }

    private void ItemUpdated(MudItemDropInfo<AnswerOption> item)
    {
        if (item.Item is null)
            return;

        _options.Remove(item.Item);
        _options.Insert(item.IndexInZone, item.Item);
    }

    private Metadata? GetMeta(uint id)
    {
        if (CorrectAnswer is null)
            return null;

        var i1 = _options.FindIndex(x => x.Id == id);
        var i2 = _correctIds.IndexOf(id);

        return new Metadata { CorrectIndex = i2 + 1, IsCorrect = i1 == i2 };
    }

    private sealed record Metadata
    {
        public int CorrectIndex { get; set; }

        public bool IsCorrect { get; set; }
    }

}