<div class="d-flex flex-column mx-auto w-max-480 gap-3 mb-3 mb-sm-6">
    <MudDropContainer
        T="AnswerOption"
        @ref="_container"
        Items="_options"
        ItemsSelector="@((_, _) => true)"
        ItemDropped="ItemUpdated"
        Class="d-flex flex-wrap flex-grow-1">
        <ChildContent>
            <MudDropZone T="AnswerOption" Class="d-flex flex-column gap-3 w-100" Identifier="1" AllowReorder/>
        </ChildContent>
        <ItemRenderer>
            <div class="d-flex flex-row align-center border-solid border rounded mud-border-primary gap-3 pa-3">
                <MudIcon Icon="@Icons.Material.Outlined.DragHandle"/>
                <div class="flex-grow-1">
                    <AnswerOptionForm Option="@context"/>
                </div>
                @if (GetMeta(context.Id) is { } meta)
                {
                    <div class="d-flex align-center gap-3">
                        <MudText Typo="Typo.body2">@meta.CorrectIndex</MudText>
                        @if (meta.IsCorrect)
                        {
                            <MudIcon Icon="@Icons.Material.Outlined.Check" Color="@Color.Success"/>
                        }
                        else
                        {
                            <MudIcon Icon="@Icons.Material.Outlined.Clear" Color="@Color.Error"/>
                        }
                    </div>
                }
            </div>
        </ItemRenderer>
    </MudDropContainer>
</div>

<FormFooter>
    <Button>
        @if (CorrectAnswer is null)
        {
            <EduLoadingButton Color="Color.Primary"
                              DisableElevation
                              IsLoading="@IsLoading"
                              LoadingText="@L["Loading_Title"]"
                              OnClick="@OnValidSubmit"
                              Size="Size.Large"
                              Text="@L["QuestionFrom_AnswerToQuestion"]"
                              Variant="Variant.Filled"/>
        }
        else
        {
            <EduLoadingButton Color="Color.Primary"
                              DisableElevation
                              IsLoading="@IsLoading"
                              LoadingText="@L["Loading_Title"]"
                              OnClick="@OnNextAsync"
                              Size="Size.Large"
                              Text="@L[IsCompleted ? "QuestionForm_ShowTheResult" : "QuestionForm_NextQuestion"]"
                              Variant="Variant.Filled"/>
        }
    </Button>
    <Information>
        @if (CorrectAnswer is null)
        {
            <MudText Typo="Typo.subtitle1" Color="Color.Error">
                <ValidationSummary/>
            </MudText>
        }
        else if (CorrectAnswer.IsCorrect)
        {
            <MudText Typo="Typo.subtitle1" Color="Color.Success">
                @L["QuestionFrom_CorrectAnswer"]
            </MudText>
        }
        else
        {
            <MudText Typo="Typo.subtitle1" Color="Color.Error">
                @L["QuestionFrom_IncorrectAnswer"]
            </MudText>
        }
    </Information>
</FormFooter>

@code {
    private List<AnswerOption> _options = [];
    private List<uint> _correctIds = [];
    private MudDropContainer<AnswerOption>? _container;

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [Parameter, EditorRequired]
    public required bool IsLoading { get; set; }

    [Parameter, EditorRequired]
    public required bool IsCompleted { get; set; }

    [Parameter, EditorRequired]
    public required AnswerResult.OrderingModel? CorrectAnswer { get; set; }

    [Parameter, EditorRequired]
    public required AnswerOption[] Options { get; set; }

    [Parameter, EditorRequired]
    public required EventCallback<OrderingAnswerModel> OnAnswerClick { get; set; }

    [Parameter]
    public EventCallback OnNextClick { get; set; }

    protected override void OnParametersSet()
    {
        _container?.Refresh();

        if (_options.Count == 0)
            _options.AddRange(Options);

        if (_correctIds.Count == 0 && CorrectAnswer is not null)
            _correctIds.AddRange(CorrectAnswer.Answer);
    }

    private async Task OnValidSubmit()
    {
        var answer = new OrderingAnswerModel
        {
            Answer = _options.Select(x => x.Id).ToList()
        };

        try
        {
            await OnAnswerClick.InvokeAsync(answer);
        }
        finally
        {
            if (!OnNextClick.HasDelegate)
            {
                _options.Clear();
                _correctIds.Clear();
            }
        }
    }

    private Task OnNextAsync()
    {
        _options.Clear();
        _correctIds.Clear();

        return OnNextClick.InvokeAsync();
    }

    private void ItemUpdated(MudItemDropInfo<AnswerOption> item)
    {
        if (item.Item is null)
            return;

        _options.Remove(item.Item);
        _options.Insert(item.IndexInZone, item.Item);
    }

    private Metadata? GetMeta(uint id)
    {
        if (CorrectAnswer is null)
            return null;

        var i1 = _options.FindIndex(x => x.Id == id);
        var i2 = _correctIds.IndexOf(id);

        return new Metadata
        {
            CorrectIndex = i2 + 1,
            IsCorrect = i1 == i2
        };
    }

    private sealed record Metadata
    {
        public int CorrectIndex { get; set; }

        public bool IsCorrect { get; set; }
    }

}
