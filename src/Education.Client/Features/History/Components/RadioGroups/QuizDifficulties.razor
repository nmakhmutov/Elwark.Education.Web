@using Education.Client.Features.History.Clients.Quiz.Model
<section class="grid @Class">
    @foreach (var quiz in Quizzes)
    {
        <DifficultyCard Title="@L.GetQuizDifficultyTitle(quiz.Difficulty)" AccessInventory="@quiz.AccessInventory">
            <ChildContent>
                <MudList T="string" Class="flex-1" Padding="false" Dense ReadOnly>
                    <MudListItem T="string" Class="px-0">
                        @L["Question_QuantityAndTypes_Title", quiz.Question.Quantity, string.Join(", ", quiz.Question.Kinds.Select(x => L[$"Question_{x}_Kind"]))]
                    </MudListItem>
                    <MudListItem T="string" Class="px-0">
                        @L["Question_AllowedMistakes_Title", quiz.Question.AllowedMistakes]
                    </MudListItem>
                    <MudListItem T="string" Class="px-0">
                        <RewardsDisplay Rewards="@quiz.Rewards" Typo="Typo.body2" Horizontal/>
                    </MudListItem>
                </MudList>
            </ChildContent>

            <FooterContent>
                @switch (quiz.Status)
                {
                    case AccessStatus.Allowed:
                        <EduLoadingButton
                            Color="Color.Primary"
                            Variant="Variant.Filled"
                            Disabled="@IsDisabled(quiz)"
                            DropShadow="false"
                            Ripple="false"
                            IsLoading="@IsLoading(quiz.Difficulty)"
                            LoadingText="@L["Loading_Title"]"
                            OnClick="@(() => CreateAsync(quiz.Difficulty))"
                            Text="@L["Start_Quiz_Button"]"/>
                        break;

                    case AccessStatus.RequiredAccessInventory:
                        <MudButton
                            Color="Color.Primary"
                            Variant="Variant.Filled"
                            DropShadow="false"
                            Ripple="false"
                            EndIcon="@EduIcons.Store"
                            Href="@HistoryUrl.Store.Index(CategoryType.Quiz, quiz.AccessInventory.InventoryId)">
                            @L["BuyInStore_Button"]
                        </MudButton>
                        break;

                    case AccessStatus.RequiredSubscription:
                        break;
                }
            </FooterContent>
        </DifficultyCard>
    }
</section>

@code {
    private bool _isLoading;
    private DifficultyType _difficulty;

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [Parameter, EditorRequired]
    public required QuizInformationModel[] Quizzes { get; set; }

    [Parameter]
    public EventCallback<DifficultyType> OnClick { get; set; }

    [Parameter]
    public string? Class { get; set; }

    private async Task CreateAsync(DifficultyType difficulty)
    {
        _isLoading = true;
        _difficulty = difficulty;

        try
        {
            await OnClick.InvokeAsync(difficulty);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private bool IsLoading(DifficultyType difficulty) =>
        _difficulty == difficulty && _isLoading;

    private bool IsDisabled(QuizInformationModel quiz)
    {
        if (quiz.Status != AccessStatus.Allowed)
            return true;

        return _isLoading && quiz.Difficulty != _difficulty;
    }

}
