@using Education.Client.Features.History.Clients.Course.Model
<EduFillGrid Class="@Class">
    @foreach (var examination in Examinations)
    {
        <DifficultyCard Title="@L.GetExaminationDifficultyTitle(examination.Difficulty)" AccessInventory="@examination.AccessInventory">
            <ChildContent>
                <MudList T="string" Class="flex-1" Dense Gutters="false" Padding="false">
                    <MudListItem T="string">
                        @L["Question_QuantityAndTypes_Title", examination.Question.Quantity, string.Join(", ", examination.Question.Kinds.Select(x => L[$"Question_{x}_Kind"]))]
                    </MudListItem>
                    <MudListItem T="string">
                        <RewardsDisplay Rewards="@examination.Rewards" Typo="Typo.body2" Horizontal/>
                    </MudListItem>
                </MudList>
            </ChildContent>
            <FooterContent>
                <LoadingButton
                    Color="Color.Primary"
                    Variant="Variant.Filled"
                    Text="@L["Start_Examination_Button"]"
                    LoadingText="@L["Loading_Title"]"
                    IsLoading="@IsLoading(examination.Difficulty)"
                    Disabled="@IsDisabled(examination)"
                    OnClick="@(() => CreateAsync(examination.Difficulty))"
                    Ripple="false"
                    DropShadow/>
            </FooterContent>
        </DifficultyCard>
    }
</EduFillGrid>

@code {
    private bool _isLoading;
    private DifficultyType _difficulty;

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [Parameter, EditorRequired]
    public required ExaminationInformationModel[] Examinations { get; set; }

    [Parameter]
    public EventCallback<DifficultyType> OnClick { get; set; }

    [Parameter]
    public string? Class { get; set; }

    private async Task CreateAsync(DifficultyType difficulty)
    {
        _isLoading = true;
        _difficulty = difficulty;

        try
        {
            await OnClick.InvokeAsync(difficulty);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private bool IsLoading(DifficultyType difficulty) =>
        _difficulty == difficulty && _isLoading;

    private bool IsDisabled(ExaminationInformationModel examination)
    {
        if (!examination.IsAllowed)
            return true;

        return _isLoading && examination.Difficulty != _difficulty;
    }

}
