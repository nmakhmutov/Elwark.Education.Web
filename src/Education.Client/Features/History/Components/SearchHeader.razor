@using Education.Client.Gateways.History

<div class="container @Class">
    <h1 class="title">
        @L["Subject:History"]
    </h1>
    <h2 class="subtitle">
        @L["History:Description"]
    </h2>

    <CenteredContainer MaxWidth="ContainerWidth.W960" Class="pt-6 pt-md-12">
        <MudPaper Elevation="0">
            <MudAutocomplete
                T="TopicSummary"
                Dense="true"
                DebounceInterval="300"
                AdornmentIcon="@Icons.Filled.Search"
                Placeholder="@L["Search"]"
                Variant="Variant.Outlined"
                SearchFunc="Search"
                ValueChanged="OnSearchResult">
                <ItemTemplate Context="result">
                    <div class="d-flex align-center">
                        <MudAvatar Image="@result.Image" Size="Size.Large" Square="true" Class="mr-4"/>
                        <div>
                            <MudText>@result.Title</MudText>
                        </div>
                    </div>
                </ItemTemplate>
            </MudAutocomplete>
        </MudPaper>
    </CenteredContainer>

    <CenteredContainer MaxWidth="ContainerWidth.W960" Class="py-6 py-md-12">
        <div class="d-flex flex-wrap justify-space-between">
            @foreach (var epoch in Enum.GetValues<EpochType>().Where(x => x != EpochType.None))
            {
                <div class="pa-3">
                    <MudLink Href="@Links.History.TopicByEpoch(epoch)" Color="Color.Inherit" Underline="Underline.Always">
                        @L[$"History:{epoch}"]
                    </MudLink>
                </div>
            }
        </div>
    </CenteredContainer>
</div>

@code {

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public Func<string, Task<IEnumerable<TopicSummary>>> Search { get; set; } = _ =>
        Task.FromResult<IEnumerable<TopicSummary>>(Array.Empty<TopicSummary>());

    private void OnSearchResult(TopicSummary entry)
    {
        NavigationManager.NavigateTo(Links.History.TopicById(entry.Id));
    }

}
