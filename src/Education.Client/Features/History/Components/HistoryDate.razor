@using System.Text
<MudText Typo="@Typo" Color="@Color" Align="Align" Class="@Class">
    @_date

    @if (_isBce)
    {
        <MudText Class="pl-1" Color="Color.Inherit" Typo="Typo.caption">
            @L["History_Date_BCE"]
        </MudText>
    }
</MudText>

@code {
    private string? _date;
    private bool _isBce;

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [Parameter]
    public HistoricalDateModel? Date { get; set; }

    [Parameter]
    public Typo Typo { get; set; } = Typo.subtitle1;

    [Parameter]
    public Color Color { get; set; } = Color.Default;

    [Parameter]
    public Align Align { get; set; }

    [Parameter]
    public string? Class { get; set; }

    protected override void OnParametersSet() =>
        _date = Date is null ? L["Unknown_Title"] : Format(Date);

    private string Format(HistoricalDateModel date)
    {
        var sb = new StringBuilder(15);

        if (date.Day.HasValue)
            sb.Append(date.Day.Value)
                .Append(' ');

        if (date.Month.HasValue)
        {
            var month = date.Day.HasValue
                ? CultureInfo.InvariantCulture.DateTimeFormat.GetAbbreviatedMonthName((int)date.Month.Value)
                : CultureInfo.InvariantCulture.DateTimeFormat.GetMonthName((int)date.Month.Value);

            sb.Append(month)
                .Append(' ');
        }

        sb.Append(Math.Abs(date.Year));

        _isBce = date.Year < 0;

        return sb.ToString();
    }

}
