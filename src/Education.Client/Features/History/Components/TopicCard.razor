@using Education.Client.Gateways.Models.Content
@using Education.Client.Gateways.History
@using Education.Client.Extensions

<section class="card">
    <header class="card-header">
        <a href="@Links.History.TopicById(Id)">
            <img src="@Image" alt="@Title"/>
        </a>
        <div class="rating-container">
            <MudTooltip Placement="Placement.Top" Text="@(L["Rating"] + " " + Rating.FiveStarts.ToReadable())">
                <MudRating MaxValue="5" Size="Size.Small" ReadOnly="true" SelectedValue="@((int)Math.Round(Rating.FiveStarts))"/>
            </MudTooltip>
        </div>
    </header>
    <aside class="d-flex align-center justify-space-between px-3">
        <MudChip Label="true" Class="ma-0" Size="Size.Small" Color="Color.Primary" Link="@Links.History.TopicByEpoch(Epoch)">
            @L[$"History:{Epoch}"]
        </MudChip>

        <FavoriteToggleButton
            IsFavorite="@IsFavorite"
            TopicId="@Id"
            OnFavoriteClick="@OnFavoriteClick"/>
    </aside>

    <article class="px-3">
        <MudLink Href="@Links.History.TopicById(Id)" Typo="Typo.h6">
            @Title
        </MudLink>
        <MudText Typo="Typo.body2" Class="pt-3">
            @Overview
        </MudText>
    </article>

    <section class="progress">
        <TopicProgressView Class="px-3" Progress="Progress"/>
    </section>
</section>

@code {

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Parameter]
    public string Id { get; set; } = string.Empty;

    [Parameter]
    public EpochType Epoch { get; set; }

    [Parameter]
    public string Image { get; set; } = string.Empty;

    [Parameter]
    public string Title { get; set; } = string.Empty;

    [Parameter]
    public string Overview { get; set; } = string.Empty;

    [Parameter]
    public ContentRating Rating { get; set; } = default!;

    [Parameter]
    public UserTopicProgress Progress { get; set; } = default!;

    [Parameter]
    public bool IsFavorite { get; set; }

    [Parameter]
    public Func<string, Task<bool>> OnFavoriteClick { get; set; } = _ => Task.FromResult(false);

    private async Task OnFavoriteChanged(bool toggled) =>
        IsFavorite = await OnFavoriteClick.Invoke(Id);

}
