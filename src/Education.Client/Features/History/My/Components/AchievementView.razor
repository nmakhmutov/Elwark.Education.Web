@using Education.Client.Gateways.History.User

<section class="grid">
    @switch (Achievement)
    {
        case CompletedAchievement(_, var title, _, var completedAt):
            <aside class="icon yellow accent-4 grey-text text-darken-3">
                <MudIcon Icon="@_icon" Size="Size.Large" Color="Color.Inherit"/>
            </aside>
            <header class="header">
                <h6 class="title">
                    @title
                </h6>
                <MudText Typo="Typo.caption">
                    @L["Achievement:Completed"] @completedAt.ToSimpleFormat()
                </MudText>
            </header>
            break;

        case ProgressiveAchievement(_, var title, _, var completeness, var rewards):
            <aside class="icon @_background">
                <MudIcon Icon="@_icon" Size="Size.Large" Color="Color.Inherit"/>
            </aside>
            <header class="header">
                <h6 class="title">
                    @title
                </h6>
            </header>
            <footer class="progress">
                <MudProgressLinear Class="mb-1" Min="0" Max="100" Value="@completeness" Color="Color.Primary"/>
                <div class="d-flex flex-row">
                    @foreach (var reward in rewards)
                    {
                        <GameCurrencyText Currency="@reward"/>
                    }
                </div>
            </footer>
            break;

        case LadderAchievement(_, var title, _, var level, var score, var goal, var completeness, var rewards):
            <aside class="icon @_background">
                <MudIcon Icon="@_icon" Size="Size.Large" Color="Color.Inherit"/>
                <MudText Typo="Typo.caption" Class="mt-1" Style="text-transform: uppercase" Color="Color.Inherit">
                    @L["Achievement:Level"] @level
                </MudText>
            </aside>
            <header class="header">
                <h6 class="title">
                    @title
                </h6>
            </header>
            <footer class="progress">
                <div class="d-flex flex-row mb-1">
                    <HumanReadableText Value="@score" Typo="Typo.subtitle2"/>
                    <span>/</span>
                    <HumanReadableText Value="@goal" Typo="Typo.subtitle2"/>
                </div>
                <MudProgressLinear Class="mb-1" Min="0" Max="100" Value="@completeness" Color="Color.Primary"/>
                <div class="d-flex flex-row">
                    @foreach (var reward in rewards)
                    {
                        <GameCurrencyText Currency="@reward"/>
                    }
                </div>
            </footer>
            break;

        default:
            throw new ArgumentOutOfRangeException(nameof(Achievement));
    }

    <section class="description">
        <MudText Typo="Typo.body2">
            @Achievement.Description
        </MudText>
    </section>
</section>

@code {
    private string _icon = string.Empty;
    private string _background = string.Empty;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Parameter, EditorRequired]
    public Achievement Achievement { get; set; } = default!;

    protected override void OnInitialized() => 
        (_icon, _background) = Achievement.Name switch {
        "EasyTest.Successful" => (EducationIcons.Tests, "green default white-text"),
        "EasyTest.Score" => (EducationIcons.Score, "green default white-text"),
        "EasyTest.WithoutMistakes" => (Icons.Outlined.AddTask, "green default white-text"),
        "EasyTest.CorrectAnswers" => (Icons.Outlined.QuestionAnswer, "green default white-text"),
            
        "HardTest.Successful" => (EducationIcons.Tests, "indigo default white-text"),
        "HardTest.Score" => (EducationIcons.Score, "indigo default white-text"),
        "HardTest.WithoutMistakes" => (Icons.Outlined.AddTask, "indigo default white-text"),
        "HardTest.CorrectAnswers" => (Icons.Outlined.QuestionAnswer, "indigo default white-text"),
            
        "MixedTest.Successful" => (EducationIcons.Tests, "red accent-2 white-text"),
        "MixedTest.Score" => (EducationIcons.Score, "red accent-2 white-text"),
        "MixedTest.WithoutMistakes" => (Icons.Outlined.AddTask, "red accent-2 white-text"),
        "MixedTest.CorrectAnswers" => (Icons.Outlined.QuestionAnswer, "red accent-2 white-text"),
            
        "AllTest.Successful" => (EducationIcons.Tests, "light-blue darken-1 white-text"),
        "AllTest.Score" => (EducationIcons.Score, "light-blue darken-1 white-text"),
        "AllTest.CompleteOnceAllType" => (Icons.Outlined.DoneAll, "light-blue darken-1 white-text"),
            
        "EventGuesser.Successful" => (Icons.Outlined.ManageSearch, "amber darken-2 white-text"),
            
        _=> (EducationIcons.Achievement, "black white-text")
        };

}
