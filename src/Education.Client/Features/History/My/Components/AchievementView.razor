@using Education.Client.Gateways.History.Me
@using Education.Client.Extensions

<section class="grid">
    @switch (Achievement)
    {
        case CompletedAchievement(_, var title, _, var completedAt):
            <aside class="icon yellow accent-4 grey-text text-darken-3">
                <MudIcon Icon="@_icon" Size="Size.Large" Color="Color.Inherit"/>
            </aside>
            <h6 class="title mud-typography mud-typography-subtitle1">
                @title
            </h6>
            <footer class="progress">
                <MudText Typo="Typo.body1">
                    @L["Achievement:Completed"] @completedAt.ToSimpleFormat()
                </MudText>
            </footer>
            break;

        case LadderAchievement(_, var title, _, var level, var score, var goal, var progress, var reward):
            <aside class="icon @_background">
                <MudIcon Icon="@_icon" Size="Size.Large" Color="Color.Inherit"/>
                <MudText Typo="Typo.caption" Class="mt-1" Style="text-transform: uppercase" Color="Color.Inherit">
                    @L["Achievement:Level"] @level
                </MudText>
            </aside>
            <h6 class="title mud-typography mud-typography-subtitle1">
                @title
            </h6>
            <footer class="progress">
                <div class="d-flex flex-row justify-space-between mb-1">
                    <div class="d-flex align-center">
                        <HumanReadableText Value="@score" Typo="Typo.subtitle2"/>/<HumanReadableText Value="@goal" Typo="Typo.subtitle2"/>
                    </div>
                    <div class="d-flex flex-row align-center">
                        +@reward.Experience
                        <MudIcon Size="Size.Small" Color="Color.Primary" Class="ml-1" Icon="@EducationIcons.Experience"/>
                    </div>
                </div>
                <MudProgressLinear Min="0" Max="100" Value="@progress" Color="Color.Primary"/>
            </footer>
            break;
    }
    @if (ShowDescription)
    {
        <section class="description">
            <MudText Typo="Typo.body2">
                @Achievement.Description
            </MudText>
        </section>
    }
</section>

@code {
    private string _icon = string.Empty;
    private string _background = string.Empty;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Parameter, EditorRequired]
    public Achievement Achievement { get; set; } = default!;

    [Parameter]
    public bool ShowDescription { get; set; }

    protected override void OnInitialized()
    {
        (_icon, _background) = Achievement.Name switch {
            "EasyTest.Completed" => (EducationIcons.Tests, "green lighten-1 white-text"),
            "EasyTest.Score" => (EducationIcons.Score, "green lighten-1 white-text"),
            "EasyTest.WithoutMistakes" => (Icons.Outlined.AddTask, "green lighten-1 white-text"),
            
            "HardTest.Completed" => (EducationIcons.Tests, "indigo default white-text"),
            "HardTest.Score" => (EducationIcons.Score, "indigo default white-text"),
            "HardTest.WithoutMistakes" => (Icons.Outlined.AddTask, "indigo default white-text"),
            
            "MixedTest.Completed" => (EducationIcons.Tests, "red accent-2 white-text"),
            "MixedTest.Score" => (EducationIcons.Score, "red accent-2 white-text"),
            "MixedTest.WithoutMistakes" => (Icons.Outlined.AddTask, "red accent-2 white-text"),
            
            "AllTest.CompleteOnceAllType" => (Icons.Outlined.DoneAll, "yellow darken-2 white-text"),
            "AllTest.Score" => (EducationIcons.Score, "light-blue darken-1 white-text"),
            "AllTest.Completed" => (EducationIcons.Tests, "light-blue darken-1 white-text"),
            "AllTest.WithoutMistakes" => (Icons.Outlined.AddTask, "light-blue darken-1 white-text"),
            
            "TotalAnswersAchievement" => (Icons.Outlined.RecordVoiceOver, "light-blue darken-1 white-text"),
            "TotalCorrectAnswersAchievement" => (Icons.Outlined.TaskAlt, "light-blue darken-1 white-text"),
            
            _=> (EducationIcons.Achievement, "black white-text")
            };
    }

}
