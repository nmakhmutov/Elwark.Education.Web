@using Education.Client.Gateways.History.Me
@using ApexCharts
@using Color = MudBlazor.Color

@implements IDisposable

<MudCard Class="@Class">
    <MudCardHeader Class="pb-0 px-3 pt-3 px-sm-6 pt-sm-6">
        <CardHeaderAvatar>
            <MudAvatar Color="Color.Primary" Size="Size.Medium">
                <MudIcon Icon="@EducationIcons.MyActivity" Size="Size.Medium"/>
            </MudAvatar>
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudLink Typo="Typo.h6" Href="@Links.History.MyStatistics">
                @Title
            </MudLink>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent Class="pa-3 pa-sm-6">
        <div style="max-height: 400px; height: 100%; position: relative">
            <ApexChart @ref="@_chart" TItem="ActivityOverview" Options="_options" Height="@("400px")">
                <ApexPointSeries
                    TItem="ActivityOverview"
                    Items="Activities"
                    Name="@L["NumberOfTests:Total"]"
                    Stroke="@(new SeriesStroke { Width = 3, Color = Colors.Green.Accent4 })"
                    SeriesType="SeriesType.Area"
                    XValue="@(e => e.Date.ToString("dd MMM"))"
                    YValue="@(x => x.Total)"/>
            </ApexChart>
        </div>
    </MudCardContent>
</MudCard>

@code {
    private ApexChart<ActivityOverview> _chart = default!;
    private ApexChartOptions<ActivityOverview>? _options;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private ThemeProvider ThemeProvider { get; set; } = default!;

    [Parameter]
    public string? Class { get; set; }

    [Parameter, EditorRequired]
    public string Title { get; set; } = string.Empty;

    [Parameter, EditorRequired]
    public ActivityOverview[] Activities { get; set; } = Array.Empty<ActivityOverview>();

    protected override void OnInitialized()
    {
        _options = new ApexChartOptions<ActivityOverview>
        {
            Chart = new Chart
            {
                Toolbar = new Toolbar
                {
                    Show = false
                },
                Selection = new Selection
                {
                    Enabled = false
                },
                Zoom = new Zoom
                {
                    Enabled = false
                },
                Background = "transparent"
            },
            Grid = new Grid
            {
                BorderColor = ThemeProvider.Theme.Palette.Divider.Value
            },
            Theme = new Theme
            {
                Mode = ThemeProvider.Type == ThemeProvider.ThemeType.Light ? Mode.Light : Mode.Dark,
            }
        };

        ThemeProvider.OnChange += Update;
    }

    public void Dispose() => ThemeProvider.OnChange -= Update;

    private void Update()
    {
        if (_options is null)
            return;

        _options.Theme.Mode = ThemeProvider.Type == ThemeProvider.ThemeType.Light ? Mode.Light : Mode.Dark;
        _options.Grid.BorderColor = ThemeProvider.Theme.Palette.Divider.Value;
        _chart.SetRerenderChart();
        StateHasChanged();
    }

}
