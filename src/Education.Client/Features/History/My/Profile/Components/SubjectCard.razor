@using Education.Client.Gateways.Models.User
<MudPaper Class="@(Class + " d-flex flex-column")" Elevation="0">
    <section class="background">
        <div class="cover">
            <div class="title-container">
                <MudText Typo="Typo.h2" Color="Color.Inherit">
                    @L[$"Subject:{Subject}"]
                </MudText>
            </div>
        </div>
    </section>
    <div Class="d-flex flex-column pa-3 pa-sm-6 h-100">
        <ul class="flex-grow-1 mb-3 mb-sm-6">
            <li class="row d-flex flex-row align-start justify-space-between">
                <MudText Typo="Typo.subtitle1">
                    @L["Subscription"]
                </MudText>
                <MudText Typo="Typo.subtitle1">
                    @L[$"Subscription:{Subscription}"]
                </MudText>
            </li>
            <li class="row d-flex flex-row align-start justify-space-between">
                <MudText Typo="Typo.subtitle1">
                    @L["Subscription:TestDurationCoefficient"]
                </MudText>
                <MudText Typo="Typo.subtitle1" Class="ml-3">
                    @("x" + TestDurationCoefficient)
                </MudText>
            </li>
            <li class="row">
                <div class="d-flex flex-row align-start justify-space-between">
                    <MudText Typo="Typo.subtitle1">
                        @L["Subscription:TestCreation"]
                    </MudText>
                    <RestrictionQuantityText Restriction="@TestCreation" Class="ml-3"/>
                </div>
                @if (TestCreation.RestoreAt.HasValue)
                {
                    <MudText Typo="Typo.caption">
                        <em>
                            @L["Subscription:RestrictionRestoreAt", TestCreation.RestoreAt.Value.ToSimpleFormat()]
                        </em>
                    </MudText>
                }
            </li>
            <li class="row">
                <div class="d-flex flex-row align-start justify-space-between">
                    <MudText Typo="Typo.subtitle1">
                        @L["Subscription:TestMistakes"]
                    </MudText>
                    <RestrictionQuantityText Restriction="@TestQuestionMistakes" Class="ml-3"/>
                </div>
                @if (TestQuestionMistakes.RestoreAt.HasValue)
                {
                    <MudText Typo="Typo.caption">
                        <em>
                            @L["Subscription:RestrictionRestoreAt", TestQuestionMistakes.RestoreAt.Value.ToSimpleFormat()]
                        </em>
                    </MudText>
                }
            </li>
            <li class="row">
                <div class="d-flex flex-row align-start justify-space-between">
                    <MudText Typo="Typo.subtitle1">
                        @L["Subscription:EventGuesserCreation"]
                    </MudText>
                    <RestrictionQuantityText Restriction="@EventGuesserCreation" Class="ml-3"/>
                </div>
                @if (EventGuesserCreation.RestoreAt.HasValue)
                {
                    <MudText Typo="Typo.caption">
                        <em>
                            @L["Subscription:RestrictionRestoreAt", EventGuesserCreation.RestoreAt.Value.ToSimpleFormat()]
                        </em>
                    </MudText>
                }
            </li>
        </ul>
        @if (Subscription == SubscriptionType.Free)
        {
            <div class="d-flex flex-row justify-center">
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@OnBuyClick">
                    @L["Subscription:Upgrade"]
                </MudButton>
            </div>
        }
    </div>
</MudPaper>

@code {

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Parameter]
    public string? Class { get; set; }

    [Parameter, EditorRequired]
    public SubjectType Subject { get; set; }

    [Parameter, EditorRequired]
    public SubscriptionType Subscription { get; set; }

    [Parameter, EditorRequired]
    public Restriction TestCreation { get; set; } = default!;

    [Parameter, EditorRequired]
    public Restriction TestQuestionMistakes { get; set; } = default!;

    [Parameter, EditorRequired]
    public Restriction EventGuesserCreation { get; set; } = default!;

    [Parameter, EditorRequired]
    public double TestDurationCoefficient { get; set; }

    [Parameter, EditorRequired]
    public EventCallback OnBuyClick { get; set; }

}
