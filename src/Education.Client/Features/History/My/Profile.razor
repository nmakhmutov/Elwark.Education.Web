@page "/history/my/profile"
@layout HistoryLayout

@using Education.Client.Gateways.History
@using Education.Client.Gateways.History.Me
@using MudBlazor.Services
@using Education.Client.Features.History.My.Components

@implements IDisposable
@attribute [Authorize]

<PageTitle>@L["Profile"]</PageTitle>
<MainContainer>
    <PageHeader Title="@L["Profile"]" Class="mb-3 mb-sm-6" Breadcrumbs="@Breadcrumbs"/>
    <ApiViewer Response="@_overview">
        <Loading>
            <div class="grid">
                <SkeletonCard Class="subject"/>
                <SkeletonCard Class="level"/>
                <SkeletonCard Class="achievements"/>
                <SkeletonCard Class="balance"/>
                <SkeletonCard Class="daily-reward"/>
                <SkeletonCard Class="easy-test"/>
                <SkeletonCard Class="hard-test"/>
                <SkeletonCard Class="mixed-test"/>
                <SkeletonCard Class="event-guesser"/>
                <SkeletonCard Class="activity"/>
            </div>
        </Loading>
        <Success Context="overview">
            <div class="grid">
                <SubjectCard
                    Class="subject"
                    Subject="SubjectType.History"
                    Subscription="@overview.Subscription"
                    TestCreation="@overview.TestCreation"
                    TestQuestionMistakes="@overview.TestMistakes"
                    TestDurationCoefficient="@overview.TestDurationCoefficient"
                    EventGuesserCreation="@overview.EventGuesser"
                    OnBuyClick="@OnBuyClick"/>

                <LevelCard
                    Class="level"
                    Level="@overview.Profile.Level"
                    Experience="@overview.Profile.Experience"
                    NextLevelExperience="@overview.Profile.NextLevelExperience"/>

                <AchievementsCard Class="achievements" Achievements="@overview.Achievements"/>

                <BalanceCard
                    Class="balance"
                    Orientation="@_timelineOrientation"
                    Balance="@overview.Profile.Balance"
                    Experiences="@((_timelineOrientation == TimelineOrientation.Horizontal ? overview.Profile.Transactions.Take(_recentCount).Reverse() : overview.Profile.Transactions.Take(_recentCount)).ToArray())"/>

                <DailyRewardCard
                    Class="daily-reward"
                    Reward="@overview.DailyReward"
                    OnCollect="@CollectDailyReward"/>

                <StatisticsCard
                    Class="easy-test"
                    Icon="@EducationIcons.Tests"
                    Title="@L["Tests:Easy"]"
                    Value="@overview.Statistics.EasyTest.NumberOfTests.Total"
                    Href="@Links.History.MyEasyTests">
                    <Subheader Title="@L["Score"]" Subtitle="@L["ForAllTime"]"/>
                    <ScoreChart Value="@overview.Statistics.EasyTest.Score"/>
                </StatisticsCard>

                <StatisticsCard
                    Class="hard-test"
                    Icon="@EducationIcons.Tests"
                    Title="@L["Tests:Hard"]"
                    Value="@overview.Statistics.HardTest.NumberOfTests.Total"
                    Href="@Links.History.MyHardTests">
                    <Subheader Title="@L["Score"]" Subtitle="@L["ForAllTime"]"/>
                    <ScoreChart Value="@overview.Statistics.HardTest.Score"/>
                </StatisticsCard>

                <StatisticsCard
                    Class="mixed-test"
                    Icon="@EducationIcons.Tests"
                    Title="@L["Tests:Mixed"]"
                    Value="@overview.Statistics.MixedTest.NumberOfTests.Total"
                    Href="@Links.History.MyMixedTests">
                    <Subheader Title="@L["Score"]" Subtitle="@L["ForAllTime"]"/>
                    <ScoreChart Value="@overview.Statistics.MixedTest.Score"/>
                </StatisticsCard>

                <StatisticsCard
                    Class="event-guesser"
                    Icon="@EducationIcons.EventGuesser"
                    Title="@L["EventGuesser"]"
                    Value="@overview.Statistics.EventGuesser.Tests"
                    Href="@Links.History.MyEventGuessers">
                    <Subheader Title="@L["Score"]" Subtitle="@L["ForAllTime"]"/>
                    <EventGuesserScoreChart
                        Score="@overview.Statistics.EventGuesser.Score"
                        Points="@overview.Statistics.EventGuesser.Points"
                        Bonus="@overview.Statistics.EventGuesser.Bonus"/>
                </StatisticsCard>

                <StatisticsCard
                    Class="activity"
                    Icon="@EducationIcons.Experience"
                    Title="@L["Experience:MyProgress"]"
                    Value="@overview.Profile.Balance">
                    @if (overview.Statistics.Progress.Length > 0)
                    {
                        <MudChart
                            ChartType="ChartType.Line"
                            Width="100%"
                            Height="300px"
                            ChartOptions="@(new ChartOptions { DisableLegend = true })"
                            ChartSeries="@_dailyChartSeries"
                            XAxisLabels="@_dailyXAxis.ToArray()"/>
                    }
                </StatisticsCard>
            </div>
        </Success>
    </ApiViewer>
</MainContainer>

@code {

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["Account"].Value, Links.Account.Index)
    };

    private ApiResponse<HistoryUserProfile> _overview = ApiResponse<HistoryUserProfile>.Loading();
    private TimelineOrientation _timelineOrientation = TimelineOrientation.Vertical;
    private int _recentCount = 10;
    private readonly List<string> _dailyXAxis = new();
    private readonly List<ChartSeries> _dailyChartSeries = new();

    [Inject]
    private IDialogService Dialog { get; set; } = default!;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryClient HistoryClient { get; set; } = default!;

    [Inject]
    private IResizeListenerService ResizeListener { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        _overview = await HistoryClient.Me.GetOverviewAsync();
        if (_overview.Status == ResponseStatus.Success)
        {
            _dailyXAxis.Clear();
            _dailyChartSeries.Clear();
            var list = new List<double>();

            foreach (var (createdAt,points) in _overview.Data.Statistics.Progress.OrderBy(x => x.CreatedAt))
            {
                _dailyXAxis.Add(createdAt.ToString("dd MMM"));
                list.Add(points);
            }

            _dailyChartSeries.Add(new ChartSeries
            {
                Data = list.ToArray()
            });
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ResizeListener.OnResized += OnWindowSizeChanged;
            OnWindowSizeChanged(null, await ResizeListener.GetBrowserWindowSize());
        }
    }

    private void OnBuyClick()
    {
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Medium,
            NoHeader = true,
            CloseButton = false,
            FullWidth = true
        };

        var parameters = new DialogParameters
        {
            [nameof(SubscriptionModal.SubjectType)] = SubjectType.History
        };

        Dialog.Show<SubscriptionModal>(null, parameters, options);
    }

    private async Task CollectDailyReward()
    {
        var response = await HistoryClient.Me.CollectDailyReward();
        if (response.Status == ResponseStatus.Success)
            await OnInitializedAsync();
    }

    private void OnWindowSizeChanged(object? sender, BrowserWindowSize e)
    {
        var (orientation, count) = e switch {
        {Width: < 1280} => (TimelineOrientation.Vertical, 10),
        {Width: >= 1280 and < 1450} => (TimelineOrientation.Horizontal, 3),
        {Width: >= 1450 and < 1620} => (TimelineOrientation.Horizontal, 4),
        {Width: >= 1620 and < 1790} => (TimelineOrientation.Horizontal, 5),
        {Width: >= 1790 and < 1960} => (TimelineOrientation.Horizontal, 6),
        {Width: >= 1960 and < 2130} => (TimelineOrientation.Horizontal, 7),
        {Width: >= 2130 and < 2300} => (TimelineOrientation.Horizontal, 8),
            _ => (TimelineOrientation.Horizontal, 10)
            };

        if (_timelineOrientation == orientation && _recentCount == count)
            return;

        _timelineOrientation = orientation;
        _recentCount = count;
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        ResizeListener.OnResized -= OnWindowSizeChanged;
    }

}
