@page "/history/tests/{id}"
@layout HistoryLayout

@using Education.Client.Gateways.History.Test
@using Education.Client.Gateways.History
@using Education.Client.Features.History.Tests.Test.Components

@attribute [Authorize]

<EduPage Subject="@L["Subject:History"]" ShowFooter="@_response.IsLoaded">
    <ApiViewer Response="@_response">
        <Success Context="test">
            <PageTitle>@L[$"Test:{test.TestType}"]</PageTitle>

            <EduContainer MaxWidth="EduWidth.W1280" Paper="true">
                <TestHeader
                    Type="@test.TestType"
                    AllowedMistakes="@_allowedMistakes"
                    CurrentQuestion="@(_questionIndex + 1)"
                    TotalQuestions="@_questions.Count"
                    ExpiredAt="@test.ExpiredAt"
                    CountDownColor="@_countdownColor"
                    OnComplete="@OnExpired"/>
            </EduContainer>

            <EduContainer MaxWidth="EduWidth.W1280" Paper="true">
                <div class="d-flex flex-column align-center pa-3 pa-sm-6">
                    <MudText Typo="Typo.subtitle1" Class="mb-3">
                        @_question.Topic.Title
                    </MudText>

                    @if (_question.Image is not null)
                    {
                        <img src="@_question.Image" alt="@_question.Title" class="image mb-3"/>
                    }

                    <MudText Typo="Typo.h6" Class="mb-3">
                        @_question.Title
                    </MudText>

                    @switch (_question.Type)
                    {
                        case QuestionType.TextAnswer:
                            <TextAnswerForm
                                OnAnswer="@OnTextAnswer"
                                OnNext="@OnNext"
                                OnComplete="@OnComplete"/>
                            break;

                        case QuestionType.OneAnswer:
                            <OneAnswerForm
                                Options="@_question.Options"
                                OnAnswer="@OnOneAnswer"
                                OnNext="@OnNext"
                                OnComplete="@OnComplete"/>
                            break;

                        case QuestionType.ManyAnswers:
                            <ManyAnswerForm
                                Options="@_question.Options"
                                OnAnswer="@OnManyAnswer"
                                OnNext="@OnNext"
                                OnComplete="@OnComplete"/>
                            break;

                        case QuestionType.SortedAnswers:
                            break;

                        default:
                            throw new ArgumentOutOfRangeException();
                    }
                </div>
            </EduContainer>
        </Success>
    </ApiViewer>
</EduPage>

@code {
    private Color _countdownColor = Color.Default;
    private ApiResponse<TestModel> _response = ApiResponse<TestModel>.Loading();
    private List<TestQuestion> _questions = new();
    private int _allowedMistakes;
    private int _questionIndex;
    private TestQuestion _question = default!;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryClient HistoryClient { get; set; } = default!;

    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    [Parameter]
    public string Id { get; init; } = default!;

    protected override async Task OnInitializedAsync()
    {
        _response = await HistoryClient.Test.GetAsync(Id);

        if (_response.Status == ResponseStatus.Fail)
        {
            if (_response.Error.IsNotFound() || _response.Error.IsExpired())
                Navigation.NavigateTo(Links.History.TopicTest.Conclusion(Id));

            return;
        }

        _questions = _response.Data.Questions
            .OrderByDescending(x => x.IsCompleted)
            .ToList();

        _allowedMistakes = _response.Data.AllowedMistakes;
        _questionIndex = _questions.FindLastIndex(x => x.IsCompleted) + 1;
        if (_questionIndex == _questions.Count)
        {
            Navigation.NavigateTo(Links.History.TopicTest.Conclusion(Id));
            return;
        }

        _question = _questions[_questionIndex];
    }

    private async Task OnExpired()
    {
        _countdownColor = Color.Error;
        _response = await HistoryClient.Test.GetAsync(Id);

        if (_response.Status == ResponseStatus.Fail && (_response.Error.IsExpired() || _response.Error.IsNotFound()))
            Navigation.NavigateTo(Links.History.TopicTest.Conclusion(Id));
    }

    private async Task<TextAnswerResult> OnTextAnswer(TextAnswer answer)
    {
        var result = await HistoryClient.Test.CheckAsync(_response.Data.Id, _question.Id, answer);
        if (!result.IsSuccess)
        {
            _response = ApiResponse<TestModel>.Fail(result.Error);
            return new TextAnswerResult(false, false, 0, string.Empty);
        }

        UpdateState(result.Data);

        return result.Data;
    }

    private async Task<OneAnswerResult> OnOneAnswer(OneAnswer answer)
    {
        var result = await HistoryClient.Test.CheckAsync(_response.Data.Id, _question.Id, answer);
        if (!result.IsSuccess)
        {
            _response = ApiResponse<TestModel>.Fail(result.Error);
            return new OneAnswerResult(false, false, 0, 0);
        }

        UpdateState(result.Data);

        return result.Data;
    }

    private async Task<ManyAnswersResult> OnManyAnswer(ManyAnswer answer)
    {
        var result = await HistoryClient.Test.CheckAsync(_response.Data.Id, _question.Id, answer);
        if (!result.IsSuccess)
        {
            _response = ApiResponse<TestModel>.Fail(result.Error);
            return new ManyAnswersResult(false, false, 0, Array.Empty<int>());
        }

        UpdateState(result.Data);

        return result.Data;
    }

    private void UpdateState(TestAnswerResult result)
    {
        _allowedMistakes = result.AllowedMistakes;
        if (result.IsCorrect)
            return;

        var wrong = _questions.First(x => x.Id == _question.Id);
        if (wrong.CanAnswerAgain)
            _questions.Add(wrong with{Options = wrong.Options.OrderBy(_ => Guid.NewGuid()).ToArray()});
    }

    private void OnNext()
    {
        _questionIndex++;
        _question = _questions[_questionIndex];
        StateHasChanged();
    }

    private void OnComplete() => Navigation.NavigateTo(Links.History.TopicTest.Conclusion(Id));

}
