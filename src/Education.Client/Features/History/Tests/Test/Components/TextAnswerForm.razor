@using FluentValidation

<EditForm Model="@_model" OnValidSubmit="OnValidSubmit">
    <FluentValidationValidator/>

    <div class="d-flex flex-column mb-3 mb-sm-6">
        <MudTextField Label="@L["Test:YourAnswer"]" @bind-Value="@_model.Value" For="@(() => _model.Value)" Disabled="@(_result is not null)"/>
        @if (_result is not null)
        {
            <MudText Typo="Typo.subtitle2" Color="@(_result.IsCorrect ? Color.Success : Color.Error)">
                @_result.Text
            </MudText>
        }
    </div>

    <div class="d-flex flex-row justify-center mb-3 mb-sm-6">
        @if (_result is null)
        {
            <LoadingButton
                ButtonType="ButtonType.Submit"
                Variant="Variant.Filled"
                Color="Color.Primary"
                IsLoading="@_isLoading"
                Text="@L["Test:Answer"]"
                LoadingText="@L["Loading"]"/>
        }
        else if (_result is {IsTestComplete: true})
        {
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@OnComplete">
                @L["Test:Result"]
            </MudButton>
        }
        else if (_result is {IsTestComplete: false})
        {
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@OnNext">
                @L["Test:Next"]
            </MudButton>
        }
    </div>

    <div class="d-flex flex-row justify-center">
        @if (_result is {IsCorrect: true})
        {
            <MudText Typo="Typo.subtitle2" Color="@Color.Success">
                @L["Test:CorrectAnswer"]
            </MudText>
        }
        else if (_result is {IsCorrect: false})
        {
            <MudText Typo="Typo.subtitle2" Color="@Color.Error">
                @L["Test:IncorrectAnswer"]
            </MudText>
        }
    </div>
</EditForm>

@code {
    private Model _model = new();
    private TextAnswerResult? _result;
    private bool _isLoading;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Parameter, EditorRequired]
    public Func<TextAnswer, Task<TextAnswerResult>> OnAnswer { get; set; } = default!;

    [Parameter, EditorRequired]
    public EventCallback OnNext { get; set; }

    [Parameter, EditorRequired]
    public EventCallback OnComplete { get; set; }

    protected override void OnParametersSet()
    {
        _isLoading = false;
        _result = null;
        _model = new Model();
    }

    private async Task OnValidSubmit()
    {
        _isLoading = true;
        _result = await OnAnswer(new TextAnswer(_model.Value!));
        _isLoading = false;
    }

    public record Model
    {
        public string? Value { get; set; }

        public class Validator : AbstractValidator<Model>
        {
            public Validator(IStringLocalizer<App> localizer)
            {
                RuleFor(x => x.Value)
                    .NotEmpty()
                    .WithMessage(localizer["Test:AnswerCannotBeEmpty"]);
            }
        }
    }

}
