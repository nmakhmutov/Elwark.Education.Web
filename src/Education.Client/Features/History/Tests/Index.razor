@page "/history/tests"
@layout HistoryLayout
@attribute [Authorize]

@using Education.Client.Gateways.History.Test
@using Education.Client.Gateways.History

<PageTitle>@L["Tests"]</PageTitle>

<EduPage Subject="@L["Subject:History"]" ShowFooter="@_response.IsLoaded">
    <ApiViewer Response="@_response">
        <Loading>
            <div class="background d-flex justify-center align-center">
                <PageSpinner/>
            </div>
        </Loading>
        <Success Context="builder">
            <div class="background pa-3 pa-sm-6">
                <PageHeader Title="@L["Tests"]" Class="mb-3 mb-sm-6" Breadcrumbs="@Breadcrumbs"/>
                <section class="grid">
                    <section>
                        <EditForm Model="@_model" OnValidSubmit="@OnValidSubmit">
                            <MudSelect Label="@L["History:Epoch"]" @bind-Value="@_model.Epoch" Class="mb-3">
                                <MudSelectItem Value="@EpochType.None">@L["All"]</MudSelectItem>
                                @foreach (var period in Enum.GetValues<EpochType>().Where(x => x != EpochType.None))
                                {
                                    <MudSelectItem Value="@period">
                                        @L[$"History:{period}"]
                                    </MudSelectItem>
                                }
                            </MudSelect>

                            <MudSelect Label="@L["Test:Difficulty"]" @bind-Value="@_model.Difficulty" Class="mb-3">
                                @foreach (var difficulty in Enum.GetValues<TestType>())
                                {
                                    <MudSelectItem Value="@difficulty">
                                        @L[$"Test:{difficulty}"]
                                    </MudSelectItem>
                                }
                            </MudSelect>

                            <div class="d-flex justify-space-between mb-3">
                                <MudText Typo="Typo.subtitle1">
                                    @L["Subscription:TestCreation"]
                                </MudText>
                                <RestrictionQuantityText Restriction="@builder.Restriction.TestCreation.Restriction" Class="mr-2"/>
                            </div>

                            <TestPermissionWrapper
                                Class="mb-3 mb-sm-6"
                                Subject="@SubjectType.History"
                                Status="@builder.Restriction.TestCreation.Status"
                                Typo="Typo.subtitle1">
                                <div class="d-flex justify-end">
                                    <LoadingButton
                                        Class="ml-auto"
                                        ButtonType="ButtonType.Submit"
                                        Text="@L["Test:Create"]"
                                        LoadingText="@L["Test:Creating"]"
                                        IsLoading="@_isLoading"/>
                                </div>
                            </TestPermissionWrapper>
                        </EditForm>

                        @if (builder.CurrentTests.Length > 0)
                        {
                            <MudText Typo="Typo.h5" Class="mb-1">
                                @L["CurrentTests"]
                            </MudText>
                            <section class="d-flex flex-wrap flex-row mb-3 mb-sm-6">
                                @foreach (var test in builder.CurrentTests)
                                {
                                    <div class="mr-3 mr-sm-6">
                                        <MudLink Typo="Typo.subtitle1" Href="@Links.History.TestById(test.Id)">
                                            @L[$"Test:{test.Type}"]
                                        </MudLink>
                                        <div class="d-flex flex-row align-center">
                                            <MudIcon Icon="@Icons.Filled.Timer" Size="Size.Small" Class="mr-1"/>
                                            <MudText Typo="Typo.body2">
                                                @test.ExpiredAt.ToSimpleFormat()
                                            </MudText>
                                        </div>
                                    </div>
                                }
                            </section>
                        }
                    </section>

                    <aside>
                        <MudText Typo="Typo.h5" Class="mb-3">@builder.Rule.Title</MudText>
                        <SimpleMarkdown Text="@builder.Rule.Content"/>
                    </aside>
                </section>
            </div>
        </Success>
    </ApiViewer>
</EduPage>

@code {
    private bool _isLoading;
    private ApiResponse<TestBuilder> _response = ApiResponse<TestBuilder>.Loading();
    private readonly Model _model = new();

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["Subject:History"].Value, Links.History.Index)
    };

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryClient Client { get; set; } = default!;

    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    protected override async Task OnInitializedAsync() =>
        _response = await Client.Test.GetTestBuilderAsync();

    private async Task OnValidSubmit()
    {
        _isLoading = true;

        var request = new CreateTestRequest(_model.Epoch);
        var response = _model.Difficulty switch {
            TestType.Easy => await Client.Test.CreateRandomEasyTestAsync(request),
            TestType.Hard => await Client.Test.CreateRandomHardTestAsync(request),
            TestType.Mixed => await Client.Test.CreateRandomMixedTestAsync(request),
            _ => throw new ArgumentOutOfRangeException()
            };

        if (response.IsSuccess)
            Navigation.NavigateTo(Links.History.TestById(response.Data.Id));
        else
            Snackbar.Add(response.Error.Message, Severity.Error);

        _isLoading = false;
    }

    internal sealed record Model
    {
        public EpochType Epoch { get; set; } = EpochType.None;

        public TestType Difficulty { get; set; } = TestType.Easy;
    }

}
