@page "/history/tests/{id}/conclusion"
@layout HistoryLayout

@using Education.Client.Gateways.History
@using Education.Client.Gateways.History.Test
@using Education.Client.Features.History.Tests.Conclusion.Components

@attribute [Authorize]

<ApiViewer Response="@_response">
    <Loading>
        <CenteredContainer MaxWidth="ContainerWidth.W1280" Class="my-3 my-sm-6" Paper="true" Elevation="1">
            <div class="pa-3">
                <MudSkeleton Width="30%"/>
                <MudSkeleton Width="100%"/>
            </div>
        </CenteredContainer>
        <CenteredContainer MaxWidth="ContainerWidth.W1280" Class="mb-3 mb-sm-6">
            <DefaultFitGrid>
                <SkeletonCard/>
                <SkeletonCard/>
                <SkeletonCard/>
            </DefaultFitGrid>
        </CenteredContainer>
        <CenteredContainer MaxWidth="ContainerWidth.W1280">
            <SkeletonCard/>
        </CenteredContainer>
    </Loading>
    <Success Context="conclusion">
        @switch (conclusion)
        {
            case EasyTestConclusion test:
                <PageTitle>@test.Topic.Title</PageTitle>
                <EasyTestView Conclusion="@test"/>
                break;

            case HardTestConclusion test:
                <PageTitle>@test.Topic.Title</PageTitle>
                <HardTestView Conclusion="@test"/>
                break;

            case MixedTestConclusion test:
                <PageTitle>@L["Test:Mixed"]</PageTitle>
                <MixedTestView Conclusion="@test"/>
                break;

            default:
                throw new ArgumentOutOfRangeException(nameof(conclusion));
        }

    </Success>
</ApiViewer>

@code {
    private ApiResponse<TestConclusion> _response = ApiResponse<TestConclusion>.Loading();
    
    [Inject]
    private IHistoryClient HistoryClient { get; set; } = default!;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Parameter]
    public string Id { get; set; } = string.Empty;

    protected override async Task OnParametersSetAsync() =>
        _response = await HistoryClient.Test.GetConclusionAsync(Id);

}
