@using Education.Client.Features.History.Clients.Flow.Model
<section class="d-flex flex-column mud-paper gap-3 gap-sm-6 pa-3 pa-sm-6 @Class">
    <div class="d-flex justify-space-between align-center">
        <MudText Typo="Typo.body1">
            @L["Flow_Streak_Title"]
        </MudText>

        <div class="d-flex align-center">
            <MudText Typo="Typo.body1">
                @Streak.Current / @Streak.Best
            </MudText>
            <MudIcon Class="mud-text-secondary" Icon="@Icons.Material.Filled.Whatshot" Size="Size.Small"/>
        </div>
    </div>

    <div>
        <MudText Typo="Typo.body1">
            @L["Flow_Track_Title"]
        </MudText>

        <MudProgressLinear Max="@Track.Threshold" Value="@Track.Current" Color="Color.Primary" Rounded/>

        <div class="d-flex justify-space-between align-center">
            <MudText Typo="Typo.body1">
                @Track.Current / @Track.Threshold
            </MudText>

            <RewardsDisplay Rewards="@Track.Rewards" Typo="Typo.body1" Horizontal/>
        </div>
    </div>

    <div class="d-flex justify-space-between align-center gap-3">
        <RewardsDisplay Rewards="@Bank" Typo="Typo.body1" Horizontal/>

        <LoadingButton
            Variant="Variant.Filled"
            Color="Color.Primary"
            IsLoading="@_isLoading"
            Text="@L["Flow_CollectBank"]"
            LoadingText="@L["Loading_Title"]"
            OnClick="@OnCollectBank"
            Disabled="@(Bank.Length == 0)"
            DisableElevation/>
    </div>
</section>

@code {
    private bool _isLoading;

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [Parameter, EditorRequired]
    public required StreakModel Streak { get; set; }

    [Parameter, EditorRequired]
    public required TrackModel Track { get; set; }

    [Parameter, EditorRequired]
    public Reward[] Bank { get; set; } = [];

    [Parameter, EditorRequired]
    public EventCallback OnBankCollectClick { get; set; }

    [Parameter]
    public string? Class { get; set; }

    private async Task OnCollectBank()
    {
        _isLoading = true;

        try
        {
            await OnBankCollectClick.InvokeAsync();
        }
        finally
        {
            _isLoading = false;
        }
    }

}
