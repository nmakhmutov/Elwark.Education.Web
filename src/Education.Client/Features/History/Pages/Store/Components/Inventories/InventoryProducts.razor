@using Education.Client.Features.History.Clients.Product
@using Education.Client.Features.History.Clients.Product.Model
@using Education.Client.Features.History.Clients.User.Model
<ApiViewer Result="@_response" OnReloadClick="@OnInitializedAsync">
    <ChildContent>
        <MudChipSet
            Class="d-flex flex-wrap justify-center justify-sm-start mb-3 mb-sm-6"
            @bind-SelectedChip="@_selectedChip"
            Mandatory
            Filter>

            @foreach (var category in _categories)
            {
                <MudChip
                    Class="px-6"
                    Value="@category"
                    Text="@(category == CategoryType.None ? L["History_Inventory_Category_All"] : L.GetInventoryCategoryTitle(category))"
                    Color="Color.Primary"
                    SelectedColor="Color.Secondary"
                    Variant="Variant.Outlined"
                    OnClick=@(() => CategoryChanged.InvokeAsync(category))
                    Default="@(category == Category)"/>
            }
        </MudChipSet>

        <InventoryGrid
            Inventories="@context.Filter(SelectedCategory).ToArray()"
            ColumnSize="Size.Medium">
            <ChildContent Context="inventory">
                @switch (inventory)
                {
                    case Product.SystemModel system:
                        <InventoryInfoCard
                            Title="@system.Title"
                            Subtitle="@L.GetInventoryCategoryTitles(inventory.Categories)"
                            Overview="@system.Overview"
                            IconUrl="@system.ImageUrl">
                            <MudBadge
                                Class="w-100 mt-3"
                                Icon="@Icons.Material.Outlined.Lock"
                                Color="@Color.Error"
                                Visible="@(!IsAffordable(system))"
                                Bordered
                                Overlap>
                                <PriceButton Price="@system.Selling" OnClick="@(() => OpenInventoryDialog(system))"/>
                            </MudBadge>
                        </InventoryInfoCard>
                        break;

                    case Product.BundleModel bundle:
                        <BundleCard
                            Bundle="@bundle"
                            ShowLockBadge="@(!IsAffordable(bundle))"
                            OnPurchaseClick="@OpenBundleDialog"/>
                        break;

                    case Product.UpcomingModel upcoming:
                        <InventoryInfoCard
                            Title="@upcoming.Title"
                            Subtitle="@L.GetInventoryCategoryTitles(upcoming.Categories)"
                            Overview="@upcoming.Overview"
                            IconUrl="@upcoming.ImageUrl">
                            <MudAlert Class="mt-3" Severity="Severity.Info" ContentAlignment="HorizontalAlignment.Center" NoIcon Dense>
                                @L["InventoryStore_UnlockedAtLevel", upcoming.RequiredLevel]
                            </MudAlert>
                        </InventoryInfoCard>
                        break;
                }
            </ChildContent>
            <EmptyContent>
                <EduNoContent
                    Title="@L["InventoryStore_Inventories_NotFound_Title"]"
                    Subtitle="@L["InventoryStore_NotFound_Description"]"
                    Icon="@EduIcons.Inventory"
                    Size="Size.Large"/>
            </EmptyContent>
        </InventoryGrid>
    </ChildContent>
    <Loading>
        <div class="d-flex gap-3 mb-3 mb-sm-6">
            <MudSkeleton Class="rounded" SkeletonType="SkeletonType.Rectangle" Width="92px" Height="34px"/>
            <MudSkeleton Class="rounded" SkeletonType="SkeletonType.Rectangle" Width="92px" Height="34px"/>
            <MudSkeleton Class="rounded" SkeletonType="SkeletonType.Rectangle" Width="92px" Height="34px"/>
            <MudSkeleton Class="rounded" SkeletonType="SkeletonType.Rectangle" Width="92px" Height="34px"/>
            <MudSkeleton Class="rounded" SkeletonType="SkeletonType.Rectangle" Width="92px" Height="34px"/>
        </div>
        <InventoryGrid Inventories="@(Enumerable.Range(0, 12).ToArray())" ColumnSize="Size.Medium">
            <InventorySkeletonCard>
                <div class="d-flex justify-space-between align-center mt-6">
                    <MudSkeleton SkeletonType="SkeletonType.Circle" Width="24px" Height="24px"/>
                    <MudIconButton Icon="@Icons.Material.Outlined.ShoppingCart" Variant="Variant.Filled" Disabled/>
                </div>
            </InventorySkeletonCard>
        </InventoryGrid>
    </Loading>
</ApiViewer>

@code {
    private MudChip? _selectedChip;
    private CategoryType[] _categories = [];
    private ApiResult<Product[]> _response = ApiResult<Product[]>.Loading();

    [Inject]
    private IHistoryProductClient ProductClient { get; init; } = default!;

    [Inject]
    private IDialogService DialogService { get; init; } = default!;

    [Inject]
    public IStringLocalizer<App> L { get; init; } = default!;

    [Parameter]
    public CategoryType Category { get; set; }

    [Parameter]
    public EventCallback<CategoryType> CategoryChanged { get; set; }

    [Parameter, EditorRequired]
    public required ProfileModel Profile { get; set; }

    [Parameter, EditorRequired]
    public required Func<Product, bool> IsAffordable { get; set; }

    [Parameter]
    public EventCallback<Product> OnProductPurchased { get; set; }

    private CategoryType SelectedCategory =>
        _selectedChip?.Value is CategoryType type ? type : CategoryType.None;

    protected override async Task OnInitializedAsync()
    {
        _response = await ProductClient.GetAsync();
        _categories = _response.Map(
                products => products.SelectMany(x => x.Categories)
                    .Append(CategoryType.None)
                    .Distinct()
                    .Order()
                    .ToArray()
            )
            .UnwrapOrElse(() => []);
    }

    private async Task OpenInventoryDialog(Product product)
    {
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Small,
            CloseOnEscapeKey = true,
            FullWidth = true,
            NoHeader = true,
            CloseButton = false
        };

        var parameters = new DialogParameters
        {
            [nameof(InventoryDialog.Product)] = product,
            [nameof(InventoryDialog.Profile)] = Profile
        };

        var dialog = await DialogService.ShowAsync<InventoryDialog>(product.Title, parameters, options);
        var result = await dialog.Result;
        if (result.Canceled)
            return;

        await OnProductPurchased.InvokeAsync(product);
    }

    private async Task OpenBundleDialog(Product.BundleModel product)
    {
        var options = new DialogOptions
        {
            MaxWidth = product.Inventories.Length > 3 ? MaxWidth.Medium : MaxWidth.Small,
            CloseOnEscapeKey = true,
            FullWidth = true,
            NoHeader = true,
            CloseButton = false
        };

        var parameters = new DialogParameters
        {
            [nameof(BundleDialog.Product)] = product,
            [nameof(BundleDialog.Profile)] = Profile
        };

        var dialog = await DialogService.ShowAsync<BundleDialog>(product.Title, parameters, options);
        var result = await dialog.Result;
        if (result.Canceled)
            return;

        await OnProductPurchased.InvokeAsync(product);
    }

}
