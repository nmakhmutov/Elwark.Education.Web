@using Education.Client.Features.History.Clients.Store.Model
@using Education.Client.Features.History.Clients.User.Model
@using Education.Client.Features.History.Clients.Store
<ApiViewer Result="@_result" OnReloadClick="@OnInitializedAsync">
    <ChildContent Context="inventories">
        <InventoryGrid Inventory="@ApplyFilter(inventories)" ColumnSize="Size.Medium">
            <ChildContent Context="inventory">
                <InventoryInfoCard
                    Overview="@inventory.Overview"
                    Subtitle="@L.GetInventoryCategoryTypeTitle(inventory.Category)"
                    Title="@inventory.Title"
                    IconUrl="@inventory.ImageUrl">
                    <MudBadge
                        Class="w-100 mt-3"
                        Icon="@Icons.Material.Outlined.Lock"
                        Color="@Color.Error"
                        Visible="@(!IsAffordable(inventory))"
                        Bordered
                        Overlap>
                        <PriceButton Price="@inventory.Selling" OnClick="@(() => OpenPurchaseDialog(inventory))"/>
                    </MudBadge>
                </InventoryInfoCard>
            </ChildContent>
            <EmptyContent>
                <NoContent
                    Icon="@EduIcons.Inventory"
                    Title="@L["InventoryStore_Inventories_NotFound_Title"]"
                    Subtitle="@L["InventoryStore_NotFound_Description"]"/>
            </EmptyContent>
        </InventoryGrid>
    </ChildContent>
    <Loading>
        <InventoryGrid Inventory="@(Enumerable.Range(0, 6).ToArray())" ColumnSize="Size.Medium">
            <InventorySkeletonCard>
                <div class="d-flex justify-space-between align-center mt-6">
                    <MudSkeleton SkeletonType="SkeletonType.Circle" Width="24px" Height="24px"/>
                    <MudIconButton Icon="@Icons.Material.Outlined.ShoppingCart" Variant="Variant.Filled" Disabled/>
                </div>
            </InventorySkeletonCard>
        </InventoryGrid>
    </Loading>
</ApiViewer>

@code {
    private ApiResult<ProductInventoryModel[]> _result = ApiResult<ProductInventoryModel[]>.Loading();

    [Inject]
    private IHistoryStoreClient StoreClient { get; init; } = default!;

    [Inject]
    private IDialogService DialogService { get; init; } = default!;

    [Inject]
    public IStringLocalizer<App> L { get; init; } = default!;

    [Parameter, EditorRequired]
    public required ProfileModel Profile { get; set; }

    [Parameter, EditorRequired]
    public required ProductsFilter Filter { get; set; }

    [Parameter, EditorRequired]
    public required Func<ProductInventoryModel, bool> IsAffordable { get; set; }

    [Parameter]
    public EventCallback<ProductInventoryModel> OnProductPurchased { get; set; }

    protected override async Task OnInitializedAsync() =>
        _result = await StoreClient.GetInventoriesAsync();

    private ProductInventoryModel[] ApplyFilter(IEnumerable<ProductInventoryModel> source)
    {
        if (Filter.Category != CategoryType.None)
            source = source.Where(x => x.Category == Filter.Category);

        if (!string.IsNullOrEmpty(Filter.Search))
            source = source.Where(x => x.Title.Contains(Filter.Search, StringComparison.OrdinalIgnoreCase));

        return source.ToArray();
    }

    private async Task OpenPurchaseDialog(ProductInventoryModel product)
    {
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Small,
            CloseOnEscapeKey = true,
            FullWidth = true,
            NoHeader = true,
            CloseButton = false
        };

        var parameters = new DialogParameters
        {
            [nameof(InventoryDialog.Product)] = product,
            [nameof(InventoryDialog.Profile)] = Profile
        };

        var dialog = await DialogService.ShowAsync<InventoryDialog>(product.Title, parameters, options);
        var result = await dialog.Result;
        if (result.Canceled)
            return;

        await OnProductPurchased.InvokeAsync(product);
    }

}