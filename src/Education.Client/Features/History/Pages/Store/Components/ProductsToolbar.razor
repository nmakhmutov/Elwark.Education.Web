<div class="d-flex align-center dropdown @Class">
    <MudSelect
        T="CategoryType"
        Value="@Filter.Category"
        ValueChanged="@CategoryChanged"
        Margin="Margin.Dense"
        Variant="Variant.Outlined"
        Dense>
        <MudSelectItem Value="@CategoryType.None">
            @L["History_Inventory_Category_All"]
        </MudSelectItem>
        <MudSelectItem Value="@CategoryType.Profile">
            @L.GetInventoryCategoryTitle(CategoryType.Profile)
        </MudSelectItem>
        <MudSelectItem Value="@CategoryType.Quiz">
            @L.GetInventoryCategoryTitle(CategoryType.Quiz)
        </MudSelectItem>
        <MudSelectItem Value="@CategoryType.Examination">
            @L.GetInventoryCategoryTitle(CategoryType.Examination)
        </MudSelectItem>
        <MudSelectItem Value="@CategoryType.DateGuesser">
            @L.GetInventoryCategoryTitle(CategoryType.DateGuesser)
        </MudSelectItem>
    </MudSelect>
</div>

@code {

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [Parameter]
    public ProductsFilter Filter { get; init; } = ProductsFilter.Empty;

    [Parameter]
    public EventCallback<ProductsFilter> FilterChanged { get; set; }

    [Parameter]
    public string? Class { get; set; }

    private Task CategoryChanged(CategoryType category) =>
        FilterChanged.InvokeAsync(new ProductsFilter(category));

}
