@using Education.Client.Features.History.Clients.Order
@using Education.Client.Features.History.Clients.Order.Model
@using Education.Client.Features.History.Clients.Order.Request
@using Education.Client.Features.History.Clients.Product.Model
@using Education.Client.Features.History.Clients.User.Model
<MudDialog
    Class="pa-3 pa-sm-6"
    ClassContent="pa-0"
    ClassActions="pa-0"
    DefaultFocus="DefaultFocus.Element"
    DisableSidePadding>
    <DialogContent>
        <header class="d-flex justify-space-between align-center gap-3">
            <MudText Typo="Typo.h5" Title="@Product.Title">
                @Product.Title
            </MudText>

            <MudIconButton Icon="@Icons.Material.Outlined.Close" OnClick="@OnCloseClick"/>
        </header>

        <header class="d-flex gap-3 gap-sm-6 mb-3 mb-sm-6">
            <InventoryIcon Class="pa-6" ImageUrl="@Product.ImageUrl" Title="@Product.Title"/>

            <div class="overview d-flex flex-column">
                <MudText Class="mb-3" Typo="Typo.body1">
                    @Product.Overview
                </MudText>

                @if (Product is Product.SystemModel { Weight: > 0 } inventory)
                {
                    <InBackpackCount InventoryId="@inventory.InventoryId"/>
                }
            </div>
        </header>

        @if (_status is null)
        {
            <div class="d-flex flex-column flex-sm-row justify-space-between align-sm-end gap-3">
                @if (Product.Selling.Discount > 0)
                {
                    <div class="d-flex flex-column gap-1">
                        <MudText Typo="Typo.caption">
                            @L["Product_Discount"]
                        </MudText>
                        <div class="price d-flex align-center">
                            <MudIcon
                                Class="mr-1"
                                Color="Color.Error"
                                Icon="@Icons.Material.Outlined.Discount"
                                Size="Size.Medium"/>
                            <MudText Typo="Typo.h5">
                                -@Product.Selling.Discount%
                            </MudText>
                        </div>
                    </div>
                }

                <div class="d-flex flex-column gap-1">
                    <MudText Typo="Typo.caption">
                        @L["Product_TotalPrice"]
                    </MudText>
                    <div class="d-flex">
                        <GameMoneyDisplay
                            Class="price"
                            Currency="@TotalPrice.Currency"
                            Amount="@TotalPrice.Amount"
                            Typo="Typo.h5"
                            IconSize="Size.Medium"
                            Horizontal/>
                        @if (Product.Selling.Discount > 0)
                        {
                            <MudText Class="mud-text-secondary align-self-start ml-1" Typo="Typo.subtitle1">
                                <s>@OriginalPrice.Amount.ToMetric()</s>
                            </MudText>
                        }
                    </div>
                </div>

                <div class="d-flex flex-column gap-1">
                    <MudText Typo="Typo.caption">
                        @L["Product_Quantity"]
                    </MudText>

                    <div class="d-flex align-center gap-3">
                        <MudIconButton Color="Color.Default"
                                       Disabled="@(_quantity == Min)"
                                       DisableElevation
                                       Icon="@Icons.Material.Outlined.Remove"
                                       OnClick="@OnRemoveQuantityClick"
                                       Variant="Variant.Outlined"/>

                        <MudNumericField @bind-Value="@_quantity"
                                         Class="number-input"
                                         HideSpinButtons
                                         Margin="Margin.Dense"
                                         Max="@Max"
                                         Min="@Min"
                                         Variant="Variant.Outlined"/>

                        <MudIconButton Color="Color.Default"
                                       Disabled="@(_quantity == Max)"
                                       DisableElevation
                                       Icon="@Icons.Material.Outlined.Add"
                                       OnClick="@OnAddQuantityClick"
                                       Variant="Variant.Outlined"/>
                    </div>
                </div>

                <EduLoadingButton Color="Color.Primary"
                                  Disabled="@(_error is not null)"
                                  DisableElevation
                                  IsLoading="@(_status is not null)"
                                  OnClick="@OnPurchaseClick"
                                  Text="@L["Product_BuyNow"]"
                                  Variant="Variant.Filled"/>
            </div>
        }
        else
        {
            if (_error is null)
            {
                <MudProgressLinear
                    Color="@(_status.IsRejected ? Color.Error : Color.Primary)"
                    Value="@_status.Progress"
                    Striped="@(!_status.IsFinal)"/>

                <MudText Typo="Typo.subtitle2" Align="Align.Center">
                    @L[$"OrderStatus_{_status.Status}"]
                </MudText>
            }
        }

        @_error

    </DialogContent>
</MudDialog>

@code {
    private const byte Min = 1;
    private const byte Max = 42;
    private byte _quantity = 1;
    private OrderStatusModel? _status;
    private RenderFragment? _error;

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [Inject]
    private IHistoryOrderClient OrderClient { get; init; } = default!;

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; } = default!;

    [Parameter, EditorRequired]
    public required Product Product { get; set; }

    [Parameter, EditorRequired]
    public required ProfileModel Profile { get; set; }

    protected override void OnParametersSet() =>
        UpdateErrorState();

    private void OnAddQuantityClick()
    {
        _quantity++;
        UpdateErrorState();
    }

    private void OnRemoveQuantityClick()
    {
        _quantity--;
        UpdateErrorState();
    }

    private void OnCloseClick() =>
        MudDialog.Close(_status is null ? DialogResult.Cancel() : DialogResult.Ok(true));

    private async Task OnPurchaseClick()
    {
        UpdateErrorState();
        if (_error is not null)
            return;

        _status = new OrderStatusModel(Guid.Empty, "Creating");

        var result = await OrderClient.CheckoutAsync(CheckoutRequest.Selling(Guid.NewGuid(), Product.ProductId, _quantity));
        if (result.MatchError(x => UpdateErrorState(x)))
            return;

        result.Match(x => _status = x);
        StateHasChanged();

        var delay = TimeSpan.FromSeconds(1);
        await InvokeAsync(async () =>
        {
            while (_status is { IsFinal: false })
            {
                await Task.Delay(delay);

                var status = await OrderClient.GetStatus(_status.Id);
                status.Match(x => _status = x, e => UpdateErrorState(e));
                StateHasChanged();

                if (_status is { IsFinal: true, IsRejected: false })
                {
                    MudDialog.Close(DialogResult.Ok(true));
                    return;
                }

                if (_error is not null)
                    return;
            }
        });
    }

    private GameMoneyModel OriginalPrice =>
        Product.Selling.Original with
        {
            Amount = Product.Selling.Original.Amount * _quantity
        };

    private GameMoneyModel TotalPrice =>
        Product.Selling.Total with
        {
            Amount = Product.Selling.Total.Amount * _quantity
        };

    private uint TotalWeight =>
        Product.Weight * _quantity;

    private void UpdateErrorState(Error? error = null)
    {
        _error = CreateError();

        return;

        RenderFragment? CreateError()
        {
            if (error is not null)
            {
                return @<div class="d-flex flex-column mt-3 mt-sm-6">
                    <MudText Typo="Typo.subtitle1" Color="Color.Error">
                        @error.Title
                    </MudText>
                    <MudText Typo="Typo.subtitle2">
                        @error.Detail
                    </MudText>
                </div>;
            }

            if (!Profile.Wallet.TryGetValue(TotalPrice.Currency, out var amount) || TotalPrice.Amount > amount)
            {
                return @<div class="d-flex flex-row align-center mt-3 mt-sm-6">
                    <MudText Class="mr-1" Typo="Typo.subtitle1" Color="Color.Error">
                        @L["NotEnough_Title"]
                    </MudText>
                    <MudIcon Color="Color.Error" Size="Size.Small" Icon="@TotalPrice.Currency.GetIcon()"/>
                </div>;
            }

            if (TotalWeight > Profile.Backpack.Emptiness)
                return @<div class="d-flex flex-column mt-3 mt-sm-6">
                    <MudText Typo="Typo.subtitle1" Color="Color.Error">
                        @L["Backpack_IsFull_Title"]
                    </MudText>
                    <MudText Typo="Typo.subtitle2">
                        @L["Backpack_IsFull_Description"]
                    </MudText>
                </div>;

            return null;
        }
    }

}
