@page "/history/store"
@using Education.Client.Features.History.Clients.Product.Model
@layout HistoryLayout
@attribute [Authorize]

<PageTitle>
    @L["InventoryStore_Title"]
</PageTitle>

<EduContainer Class="py-3 py-sm-6" MaxWidth="EduWidth.W1920">
    <div class="d-flex justify-space-between align-center flex-wrap gap-3 gap-sm-6">
        <PageBreadcrumbsHeader Items="@Breadcrumbs"/>

        <section class="d-flex align-center gap-3">
            @foreach (var (currency, amount) in _profile.Wallet)
            {
                <GameMoneyDisplay Currency="@currency" Amount="@amount" Typo="Typo.body1" Horizontal ShowFullValue/>
            }

            <BackpackOverview Fullness="@_profile.Backpack.Fullness" Capacity="@_profile.Backpack.Capacity"/>
        </section>
    </div>
</EduContainer>

<EduContainer Class="pb-3 pb-sm-6" MaxWidth="EduWidth.W1920">
    <ApiViewer Result="@_response" OnReloadClick="@OnInitializedAsync">
        <ChildContent>
            <MudChipSet Class="mb-3 mb-sm-6" Mandatory Filter>
                @foreach (var category in _categories)
                {
                    <MudChip
                        Class="px-6"
                        Value="@category"
                        Text="@L.GetInventoryCategoryTitle(category)"
                        Color="Color.Primary"
                        SelectedColor="Color.Secondary"
                        Variant="Variant.Outlined"
                        OnClick=@(() => ChangeCategory(category))
                        Default="@(category == _category)"/>
                }
            </MudChipSet>

            <section class="products">
                @foreach (var group in context.Filter(_category).Sort())
                {
                    <MudText Class="grid-column-full border-b mud-border-lines-default" Typo="Typo.h5">
                        @L[$"InventoryStore_Catalog_{group.Key}"]
                    </MudText>

                    @foreach (var inventory in group)
                    {
                        switch (inventory)
                        {
                            case Product.SystemModel system:
                                <InventoryCard
                                    Class="inventory"
                                    Title="@system.Title"
                                    Subtitle="@L.GetInventoryCategoryTitles(inventory.Categories)"
                                    Overview="@system.Overview"
                                    IconUrl="@system.ImageUrl"
                                    Price="system.Selling">
                                    <MudBadge
                                        Icon="@Icons.Material.Outlined.Lock"
                                        Color="@Color.Error"
                                        Visible="@(!IsAffordable(system))"
                                        Bordered
                                        Overlap>
                                        <MudButton Class="text-transform-none"
                                                   Color="Color.Primary"
                                                   DisableElevation
                                                   DisableRipple
                                                   FullWidth
                                                   OnClick="@(() => OpenInventoryDialog(system))"
                                                   Variant="Variant.Filled">
                                            @L["Button_Details"]
                                        </MudButton>
                                    </MudBadge>
                                </InventoryCard>
                                break;

                            case Product.BundleModel bundle:
                                <BundleCard Class="bundle" Bundle="@bundle">
                                    <MudBadge
                                        Icon="@Icons.Material.Outlined.Lock"
                                        Color="@Color.Error"
                                        Visible="@(!IsAffordable(bundle))"
                                        Bordered
                                        Overlap>
                                        <MudButton Class="text-transform-none"
                                                   Color="Color.Primary"
                                                   DisableElevation
                                                   DisableRipple
                                                   FullWidth
                                                   OnClick="@(() => OpenBundleDialog(bundle))"
                                                   Variant="Variant.Filled">
                                            @L["Button_Details"]
                                        </MudButton>
                                    </MudBadge>
                                </BundleCard>
                                break;

                            case Product.MoneyModel money:
                                <InventoryCard
                                    Class="inventory"
                                    Title="@money.Title"
                                    Subtitle="@L.GetInventoryCategoryTitles(inventory.Categories)"
                                    Overview="@money.Overview"
                                    IconUrl="@money.ImageUrl"
                                    Price="money.Selling">
                                    <MudBadge
                                        Icon="@Icons.Material.Outlined.Lock"
                                        Color="@Color.Error"
                                        Visible="@(!IsAffordable(money))"
                                        Bordered
                                        Overlap>
                                        <MudButton Class="text-transform-none"
                                                   Color="Color.Primary"
                                                   DisableElevation
                                                   DisableRipple
                                                   FullWidth
                                                   OnClick="@(() => OpenInventoryDialog(money))"
                                                   Variant="Variant.Filled">
                                            @L["Button_Details"]
                                        </MudButton>
                                    </MudBadge>
                                </InventoryCard>
                                break;

                            case Product.UpcomingModel upcoming:
                                <InventoryCard
                                    Class="inventory"
                                    Title="@upcoming.Title"
                                    Subtitle="@L.GetInventoryCategoryTitles(inventory.Categories)"
                                    Overview="@upcoming.Overview"
                                    IconUrl="@upcoming.ImageUrl"
                                    Price="upcoming.Selling">
                                    <MudAlert
                                        Class="mt-3"
                                        Severity="Severity.Info"
                                        ContentAlignment="HorizontalAlignment.Center"
                                        NoIcon
                                        Dense>
                                        @L["InventoryStore_UnlockedAtLevel", upcoming.RequiredLevel]
                                    </MudAlert>
                                </InventoryCard>
                                break;
                        }
                    }
                }
            </section>
        </ChildContent>
        <Loading>
            <div class="d-flex gap-3 mb-3 mb-sm-6">
                <MudSkeleton Class="rounded" SkeletonType="SkeletonType.Rectangle" Width="92px" Height="34px"/>
                <MudSkeleton Class="rounded" SkeletonType="SkeletonType.Rectangle" Width="92px" Height="34px"/>
                <MudSkeleton Class="rounded" SkeletonType="SkeletonType.Rectangle" Width="92px" Height="34px"/>
                <MudSkeleton Class="rounded" SkeletonType="SkeletonType.Rectangle" Width="92px" Height="34px"/>
                <MudSkeleton Class="rounded" SkeletonType="SkeletonType.Rectangle" Width="92px" Height="34px"/>
            </div>

            <section class="products">
                <div class="grid-column-full border-b mud-border-lines-default">
                    <MudSkeleton SkeletonType="SkeletonType.Text" Width="20%" Height="32px"/>
                </div>

                @for (var i = 0; i < 12; i++)
                {
                    <InventorySkeletonCard Class="inventory"/>
                }
            </section>
        </Loading>
    </ApiViewer>
    @* <InventoryProducts *@
    @*     Profile="@_profile" *@
    @*     Category="@_category" *@
    @*     CategoryChanged="@(x => ChangeCategory(x))" *@
    @*     IsAffordable="@IsInventoryAffordable" *@
    @*     OnProductPurchased="@UpdateProfileAsync"/> *@

    @* <ProfileCard *@
    @*     Class="profile" *@
    @*     Level="@_profile.Level" *@
    @*     Backpack="@_profile.Backpack" *@
    @*     Wallet="@_profile.Wallet"/> *@

    @* <ExchangeCard *@
    @*     Class="exchange" *@
    @*     Wallet="@_profile.Wallet" *@
    @*     OnExchanged="@UpdateProfileAsync"/> *@
</EduContainer>
