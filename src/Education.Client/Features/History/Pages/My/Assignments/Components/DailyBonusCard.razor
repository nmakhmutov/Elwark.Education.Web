@using Education.Client.Features.History.Clients.User.Model
<section class="mud-paper d-flex flex-column @Class">
    <header class="header">
        <MudText Typo="Typo.h5" Align="Align.Center" Class="white-text pt-3">
            @L["DailyBonus_Title"]
        </MudText>
        <div class="gift">
            <img class="gift-image" src="/images/history/gift-box.png" alt="Gift box" loading="lazy"/>
        </div>
    </header>

    <div class="flex-grow-1"></div>

    @if (Bonus.NextTimeAt.HasValue)
    {
        <div class="d-flex flex-column align-center pa-3 pa-sm-6">
            <MudText Typo="Typo.subtitle2">
                @L["DailyBonus_UnlockedAt"]
            </MudText>
            <EduCountdown
                Deadline="@Bonus.NextTimeAt.Value"
                Typo="Typo.h3"
                OnComplete="@OnReached"/>
        </div>
    }
    else
    {
        <RewardsDisplay Class="justify-center pa-6" Rewards="@Bonus.Rewards" Typo="Typo.h5" IconSize="Size.Medium" Horizontal/>

        <div class="d-flex justify-center px-3 pb-3 px-sm-6 pb-sm-6">
            <EduLoadingButton
                Class="mr-3"
                Color="Color.Primary"
                Disabled="@IsDisabled"
                DropShadow="false"
                FullWidth
                IsLoading="@IsLoading"
                LoadingText="@L["Loading_Title"]"
                OnClick="@ClaimAsync"
                Text="@L["DailyBonus_Claim"]"
                Variant="Variant.Filled"/>

            <EduLoadingButton
                Class="px-6"
                Color="Color.Default"
                Disabled="@IsDisabled"
                DropShadow="false"
                IsLoading="@IsLoading"
                LoadingText="@L["Loading_Title"]"
                OnClick="@RejectAsync"
                Text="@L["DailyBonus_Reject"]"
                Variant="Variant.Outlined"/>
        </div>
    }
</section>

@code {
    private Loading _loading = Loading.None;

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [Parameter, EditorRequired]
    public required DailyBonusModel Bonus { get; set; }

    [Parameter]
    public EventCallback OnClaim { get; set; }

    [Parameter]
    public EventCallback OnReject { get; set; }

    [Parameter]
    public EventCallback OnReached { get; set; }

    [Parameter]
    public string? Class { get; set; }

    private bool IsDisabled =>
        _loading != Loading.None;

    private bool IsLoading =>
        _loading == Loading.Reject;

    private async Task ClaimAsync()
    {
        _loading = Loading.Collect;
        await OnClaim.InvokeAsync();
        _loading = Loading.None;
    }

    private async Task RejectAsync()
    {
        _loading = Loading.Reject;
        await OnReject.InvokeAsync();
        _loading = Loading.None;
    }

    private enum Loading
    {
        None,
        Collect,
        Reject
    }

}
