@using ApexCharts
@using Education.Client.Features.History.Clients.Learner.Model.Quiz
<ApexChart @ref="@_chart" TItem="QuizStatisticsModel.DailyProgress" Options="Options" Height="@("350px")">
    <ApexPointSeries
        TItem="QuizStatisticsModel.DailyProgress"
        Items="@Progress"
        Name="@L["NumberOfQuizzes_Successful_Title"]"
        SeriesType="SeriesType.Bar"
        Stroke="@(new SeriesStroke
                {
                    Color = HistoryChart.Quiz.Completeness.Successful
                })"
        XValue="@(x => Customer.Humanize(x.Date, DateStyle.CustomerDayAndAbbreviatedMonth))"
        YValue="@(x => x.NumberOfQuizzes.Succeeded)"/>

    <ApexPointSeries
        TItem="QuizStatisticsModel.DailyProgress"
        Items="@Progress"
        Name="@L["NumberOfQuizzes_Failed_Title"]"
        SeriesType="SeriesType.Bar"
        Stroke="@(new SeriesStroke
                {
                    Color = HistoryChart.Quiz.Completeness.Failed
                })"
        XValue="@(x => Customer.Humanize(x.Date, DateStyle.CustomerDayAndAbbreviatedMonth))"
        YValue="@(x => x.NumberOfQuizzes.Failed)"/>

    <ApexPointSeries
        TItem="QuizStatisticsModel.DailyProgress"
        Items="@Progress"
        Name="@L["NumberOfQuizzes_MistakesLimitExceeded_Title"]"
        SeriesType="SeriesType.Bar"
        Stroke="@(new SeriesStroke
                {
                    Color = HistoryChart.Quiz.Completeness.MistakesLimitExceeded
                })"
        XValue="@(x => Customer.Humanize(x.Date, DateStyle.CustomerDayAndAbbreviatedMonth))"
        YValue="@(x => x.NumberOfQuizzes.MistakesLimitExceeded)"/>

    <ApexPointSeries
        TItem="QuizStatisticsModel.DailyProgress"
        Items="@Progress"
        Name="@L["NumberOfQuizzes_TimeExceeded_Title"]"
        SeriesType="SeriesType.Bar"
        Stroke="@(new SeriesStroke
                {
                    Color = HistoryChart.Quiz.Completeness.TimeExceeded
                })"
        XValue="@(x => Customer.Humanize(x.Date, DateStyle.CustomerDayAndAbbreviatedMonth))"
        YValue="@(x => x.NumberOfQuizzes.TimeExceeded)"/>
</ApexChart>

@code {
    private ApexChart<QuizStatisticsModel.DailyProgress>? _chart;

    private static ApexChartOptions<QuizStatisticsModel.DailyProgress> Options =>
        new()
        {
            Legend = new Legend
            {
                Show = false
            },
            Chart = new Chart
            {
                Stacked = true,
                Toolbar = new Toolbar
                {
                    Show = false
                },
                Selection = new Selection
                {
                    Enabled = false
                },
                Zoom = new Zoom
                {
                    Enabled = false
                },
                Background = "transparent",
                ForeColor = "var(--mud-palette-text-primary)"
            },
            Stroke = new Stroke
            {
                Show = false
            },
            Grid = new Grid
            {
                BorderColor = "var(--mud-palette-divider)"
            },
            Theme = new Theme()
        };

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [CascadingParameter]
    private EduThemeProvider? ThemeProvider { get; set; }

    [CascadingParameter]
    private CustomerState Customer { get; set; } = default!;

    [Parameter, EditorRequired]
    public required QuizStatisticsModel.DailyProgress[] Progress { get; set; }

    protected override Task OnParametersSetAsync()
    {
        var current = ThemeProvider is { IsDarkMode: true } ? Mode.Dark : Mode.Light;
        if (Options.Theme.Mode == current)
            return Task.CompletedTask;

        Options.Theme.Mode = current;
        return _chart is null ? Task.CompletedTask : _chart.UpdateOptionsAsync(false, false, false);
    }

}
