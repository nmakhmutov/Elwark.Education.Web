@using ApexCharts
@using Education.Client.Features.History.Clients.Learner.Model.Quiz
<ApexChart @ref="@_chart" TItem="QuizProgressModel" Options="Options">
    <ApexPointSeries
        TItem="QuizProgressModel"
        Items="@Activities"
        Name="@L["Quizzes_Easy_Title"]"
        Stroke="@(new SeriesStroke
                {
                    Width = 2,
                    Color = HistoryChart.Quiz.Difficulty.Easy
                })"
        SeriesType="SeriesType.Area"
        XValue="@(x => Customer.Humanize(x.Date, DateStyle))"
        YValue="@(x => x.Easy)"/>

    <ApexPointSeries
        TItem="QuizProgressModel"
        Items="@Activities"
        Name="@L["Quizzes_Hard_Title"]"
        Stroke="@(new SeriesStroke
                {
                    Width = 2,
                    Color = HistoryChart.Quiz.Difficulty.Hard
                })"
        SeriesType="SeriesType.Area"
        XValue="@(x => Customer.Humanize(x.Date, DateStyle))"
        YValue="@(x => x.Hard)"/>

    <ApexPointSeries
        TItem="QuizProgressModel"
        Items="@Activities"
        Name="@L["Quizzes_Expert_Title"]"
        Stroke="@(new SeriesStroke
                {
                    Width = 2,
                    Color = HistoryChart.Quiz.Difficulty.Expert
                })"
        SeriesType="SeriesType.Area"
        XValue="@(x => Customer.Humanize(x.Date, DateStyle))"
        YValue="@(x => x.Expert)"/>
</ApexChart>

@code {
    private ApexChart<QuizProgressModel>? _chart;

    private static ApexChartOptions<QuizProgressModel> Options =>
        new()
        {
            Legend = new Legend
            {
                Position = LegendPosition.Top,
                FontFamily = "var(--mud-typography-body1-family)",
                FontSize = "var(--mud-typography-body1-size)",
                FontWeight = "var(--mud-typography-body1-weight)"
            },
            Chart = new Chart
            {
                Width = "100%",
                Height = "350px",
                Background = "transparent",
                ForeColor = "var(--mud-palette-text-primary)"
            },
            Grid = new Grid
            {
                BorderColor = "var(--mud-palette-divider)"
            },
            Theme = new Theme()
        };

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [CascadingParameter]
    private EduThemeProvider? ThemeProvider { get; set; }

    [CascadingParameter]
    private CustomerState Customer { get; set; } = default!;

    [Parameter]
    public DateStyle DateStyle { get; set; }

    [Parameter, EditorRequired]
    public required QuizProgressModel[] Activities { get; set; }

    protected override Task OnParametersSetAsync()
    {
        var current = ThemeProvider is { IsDarkMode: true } ? Mode.Dark : Mode.Light;
        if (Options.Theme.Mode == current)
            return Task.CompletedTask;

        Options.Theme.Mode = current;
        return _chart is null ? Task.CompletedTask : _chart.UpdateOptionsAsync(false, false, false);
    }

}
