@using Education.Client.Features.History.Clients.Learner.Model.Examination
@using ApexCharts
<ApexChart @ref="@(_chart)" TItem="ExaminationStatisticsModel.DailyProgress" Options="_options" Height="@("350px")">
    <ApexPointSeries
        TItem="ExaminationStatisticsModel.DailyProgress"
        Items="@Progress"
        Name="@L["TimeSpent_Min_Title"]"
        Stroke="@(new SeriesStroke { Color = Colors.Green.Accent4 })"
        SeriesType="SeriesType.Bar"
        XValue="@(e => e.Date.ToString("dd MMM"))"
        YValue="@(x => (decimal)x.TimeSpent.Min.TotalMilliseconds)"/>

    <ApexPointSeries
        TItem="ExaminationStatisticsModel.DailyProgress"
        Items="@Progress"
        Name="@L["TimeSpent_Average_Title"]"
        Stroke="@(new SeriesStroke { Color = Colors.Blue.Default })"
        SeriesType="SeriesType.Bar"
        XValue="@(e => e.Date.ToString("dd MMM"))"
        YValue="@(x => (decimal)x.TimeSpent.Average.TotalMilliseconds)"/>

    <ApexPointSeries
        TItem="ExaminationStatisticsModel.DailyProgress"
        Items="@Progress"
        Name="@L["TimeSpent_Max_Title"]"
        Stroke="@(new SeriesStroke { Color = Colors.DeepPurple.Default })"
        SeriesType="SeriesType.Bar"
        XValue="@(e => e.Date.ToString("dd MMM"))"
        YValue="@(x => (decimal)x.TimeSpent.Max.TotalMilliseconds)"/>

</ApexChart>

@code {
    private ApexChart<ExaminationStatisticsModel.DailyProgress>? _chart;

    private ApexChartOptions<ExaminationStatisticsModel.DailyProgress> _options = new()
    {
        Yaxis =
        [
            new YAxis
            {
                Labels = new YAxisLabels
                {
                    Formatter = @"
                                     function(value) {
                                         var minutes = Math.floor(value / 60000);
                                         var seconds = ((value % 60000) / 1000).toFixed(0);
                                         return minutes + ':' + (seconds < 10 ? '0' : '') + seconds;
                                     }
                                     "
                }
            }
        ],
        Tooltip = new Tooltip
        {
            Y = new TooltipY
            {
                Formatter = @"
                                     function(value) {
                                         var minutes = Math.floor(value / 60000);
                                         var seconds = ((value % 60000) / 1000).toFixed(0);
                                         return minutes + ':' + (seconds < 10 ? '0' : '') + seconds;
                                     }
                                     "
            }
        },
        Legend = new Legend
        {
            Show = false
        },
        Chart = new Chart
        {
            Toolbar = new Toolbar
            {
                Show = false
            },
            Selection = new Selection
            {
                Enabled = false
            },
            Zoom = new Zoom
            {
                Enabled = false
            },
            Background = "transparent",
            ForeColor = "var(--mud-palette-text-primary)"
        },
        Stroke = new Stroke
        {
            Show = false
        },
        Grid = new Grid
        {
            BorderColor = "var(--mud-palette-divider)"
        },
        Theme = new Theme()
    };

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [CascadingParameter]
    private CascadingTheme? ThemeProvider { get; set; }

    [Parameter, EditorRequired]
    public required ExaminationStatisticsModel.DailyProgress[] Progress { get; set; }

    protected override Task OnParametersSetAsync()
    {
        var current = ThemeProvider?.IsDarkMode == true ? Mode.Dark : Mode.Light;
        if (_options.Theme.Mode == current)
            return Task.CompletedTask;

        _options.Theme.Mode = current;
        return _chart is null ? Task.CompletedTask : _chart.RenderAsync();
    }

}