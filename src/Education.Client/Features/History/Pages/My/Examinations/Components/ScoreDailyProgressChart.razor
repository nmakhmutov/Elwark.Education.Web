@using ApexCharts
@using Education.Client.Features.History.Clients.Learner.Model.Examination
<ApexChart @ref="@_chart" TItem="ExaminationStatisticsModel.DailyProgress" Options="_options" Height="@("350px")">
    <ApexPointSeries
        TItem="ExaminationStatisticsModel.DailyProgress"
        Items="@Progress"
        Name="@L["Score_Questions_Title"]"
        Stroke="@(new SeriesStroke { Color = HistoryChart.Examination.Score.Questions })"
        SeriesType="SeriesType.Bar"
        XValue="@(x => Customer.Humanize(x.Date, DateStyle.CustomerDayAndAbbreviatedMonth))"
        YValue="@(x => x.Score.Questions)"/>

    <ApexPointSeries
        TItem="ExaminationStatisticsModel.DailyProgress"
        Items="@Progress"
        Name="@L["Score_TimeBonus_Title"]"
        Stroke="@(new SeriesStroke { Color = HistoryChart.Examination.Score.SpeedBonus })"
        SeriesType="SeriesType.Bar"
        XValue="@(x => Customer.Humanize(x.Date, DateStyle.CustomerDayAndAbbreviatedMonth))"
        YValue="@(x => x.Score.TimeBonus)"/>

    <ApexPointSeries
        TItem="ExaminationStatisticsModel.DailyProgress"
        Items="@Progress"
        Name="@L["Score_AccuracyBonus_Title"]"
        Stroke="@(new SeriesStroke { Color = HistoryChart.Examination.Score.NoMistakesBonus })"
        SeriesType="SeriesType.Bar"
        XValue="@(x => Customer.Humanize(x.Date, DateStyle.CustomerDayAndAbbreviatedMonth))"
        YValue="@(x => x.Score.AccuracyBonus)"/>
</ApexChart>

@code {
    private ApexChart<ExaminationStatisticsModel.DailyProgress>? _chart;

    private ApexChartOptions<ExaminationStatisticsModel.DailyProgress> _options = new()
    {
        Legend = new Legend
        {
            Show = false
        },
        Chart = new Chart
        {
            Stacked = true,
            Toolbar = new Toolbar
            {
                Show = false
            },
            Selection = new Selection
            {
                Enabled = false
            },
            Zoom = new Zoom
            {
                Enabled = false
            },
            Background = "transparent",
            ForeColor = "var(--mud-palette-text-primary)"
        },
        Stroke = new Stroke
        {
            Show = false
        },
        Grid = new Grid
        {
            BorderColor = "var(--mud-palette-divider)"
        },
        Theme = new Theme()
    };

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [CascadingParameter]
    private EduThemeProvider? ThemeProvider { get; set; }

    [CascadingParameter]
    private CustomerState Customer { get; set; } = default!;

    [Parameter, EditorRequired]
    public required ExaminationStatisticsModel.DailyProgress[] Progress { get; set; }

    protected override Task OnParametersSetAsync()
    {
        var current = ThemeProvider?.IsDarkMode == true ? Mode.Dark : Mode.Light;
        if (_options.Theme.Mode == current)
            return Task.CompletedTask;

        _options.Theme.Mode = current;
        return _chart is null ? Task.CompletedTask : _chart.UpdateOptionsAsync(false, false, false);
    }

}
