@using Align = MudBlazor.Align
@using Color = MudBlazor.Color
@using Size = MudBlazor.Size
@using Education.Client.Features.History.Clients.User.Model
@using ApexCharts

<section class="mud-paper pa-3 @Class">
    <header class="mud-primary white-text rounded pa-3 mb-3">
        <div class="d-flex align-center justify-space-between gap-3 gap-sm-6">
            <div class="d-flex flex-column gap-3">
                <MudText Typo="Typo.subtitle1">
                    @L.GetInternalCurrencyTitle(Wallet.Currency)
                </MudText>
                <div class="d-flex align-center">
                    <MudIcon Class="mr-1" Icon="@Wallet.Currency.GetIcon()" Size="Size.Small"/>
                    <MudText Typo="Typo.h6">
                        @Wallet.Balance.ToString("G")
                    </MudText>
                </div>
            </div>

            <div class="d-flex flex-column gap-3">
                @CreateTrendChip(_tendingValue)

                @if (Wallet.Budgets.Length > 0)
                {
                    <ApexChart TItem="ApexData" Options="@_options" Width="@("100px")" Height="@("30px")">
                        <ApexPointSeries
                            TItem="ApexData"
                            Items="@_apex"
                            SeriesType="SeriesType.Line"
                            XValue="@(x => x.Month)"
                            YValue="@(x => x.Balance)"
                            OrderBy="@(x => x.X)"/>
                    </ApexChart>
                }
            </div>
        </div>
    </header>

    <MudTable
        T="WalletModel.BudgetModel"
        @ref="@_table"
        RowClass="cursor-pointer"
        Items="@Wallet.Budgets.Take(3)"
        OnRowClick="@RowClickAsync"
        Breakpoint="Breakpoint.None"
        Elevation="0"
        Hover>
        <RowTemplate>
            <MudTd>
                @CreateTrendIcon(context.Balance)
            </MudTd>
            <MudTd Class="flex-grow-1">
                <MudText Typo="Typo.subtitle2" Align="Align.Start">
                    @CultureInfo.InvariantCulture.DateTimeFormat.GetMonthName(context.Month.Month)
                </MudText>
            </MudTd>
            <MudTd>
                <MetricNumber Value="@context.Income" Typo="Typo.body1"/>
                <MudText Class="mud-text-secondary" Typo="Typo.body2">
                    @L["InternalMoney_Income_Title"]
                </MudText>
            </MudTd>
            <MudTd>
                <MetricNumber Value="@context.Expense" Typo="Typo.body1"/>
                <MudText Class="mud-text-secondary" Typo="Typo.body2">
                    @L["InternalMoney_Expense_Title"]
                </MudText>
            </MudTd>
            <MudTd Class="d-none d-sm-table-cell">
                <MudTooltip Text="@L["Button_Details"]">
                    <MudIcon Class="mud-text-secondary" Icon="@Icons.Material.Outlined.ReadMore"/>
                </MudTooltip>
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <div class="d-flex align-center gap-3 mx-3">
                <MudAvatar Class="rounded white-text" Color="@Color.Default" Size="Size.Large">
                    <MudIcon Icon="@Icons.Material.Outlined.HourglassEmpty" Size="Size.Medium"/>
                </MudAvatar>
                <div>
                    <MudText Typo="Typo.subtitle2" Align="Align.Start">
                        @L["InternalMoney_BalanceEmpty_Title"]
                    </MudText>
                    <MudText Typo="Typo.body2" Align="Align.Start">
                        @L["InternalMoney_BalanceEmpty_Description"]
                    </MudText>
                </div>
            </div>
        </NoRecordsContent>
    </MudTable>
</section>

@code {
    private double _tendingValue;
    private readonly List<ApexData> _apex = [];
    private MudTable<WalletModel.BudgetModel>? _table;

    private readonly ApexChartOptions<ApexData> _options = new()
    {
        Tooltip = new Tooltip
        {
            Enabled = false
        },
        Chart = new Chart
        {
            Background = "transparent",
            ForeColor = "var(--mud-palette-text-primary)",
            Sparkline = new ChartSparkline
            {
                Enabled = true
            }
        },
        Stroke = new Stroke
        {
            Colors = ["#FFFFFF"],
            Curve = Curve.Smooth,
            Width = 3
        }
    };

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [Inject]
    private IDialogService DialogService { get; init; } = default!;

    [Parameter, EditorRequired]
    public required WalletModel Wallet { get; set; }

    [Parameter]
    public string? Class { get; set; }

    protected override void OnParametersSet()
    {
        var (start, end) = Wallet.Budgets switch
        {
            [] => (0d, 0d),
            [var first] => (first.Balance, 0d),
            [var first, var second, ..] => (first.Balance, second.Balance)
        };

        _tendingValue = ((start - end) / Math.Abs(end) * 100) switch
        {
            double.NaN => 0,
            double.PositiveInfinity => 100,
            double.NegativeInfinity => -100,
            var x => x
        };

        var now = DateTime.UtcNow;
        var month = new DateOnly(now.Year, now.Month, 1);
        for (var i = 0; i < 12; i++)
        {
            var current = month.AddMonths(-i);
            var item = Wallet.Budgets.FirstOrDefault(x => x.Month == current);
            _apex.Add(new ApexData(current.ToDateTime(TimeOnly.MinValue), item?.Balance ?? 0));
        }
    }

    private RenderFragment CreateTrendIcon(double balance)
    {
        var trend = GetTrend(balance);

        return @<MudIcon Icon="@trend.Icon" Color="trend.Color" Size="Size.Medium"/>;
    }

    private RenderFragment CreateTrendChip(double balance)
    {
        var trend = GetTrend(balance);

        return
            @<MudChip
                 Class="white-text ma-0"
                 Text="@($"{_tendingValue.ToMetric("N1")}%")"
                 Icon="@trend.Icon"
                 IconColor="@trend.Color"
                 Label/>;
    }

    private Trend GetTrend(double trend) =>
        trend switch
        {
            > 0 => new Trend(Icons.Material.Outlined.TrendingUp, Color.Success),
            < 0 => new Trend(Icons.Material.Outlined.TrendingDown, Color.Error),
            _ => new Trend(Icons.Material.Outlined.TrendingFlat, Color.Default)
        };

    private Task RowClickAsync(TableRowClickEventArgs<WalletModel.BudgetModel> args) =>
        OpenSourceDetailModalAsync(args.Item);

    private async Task OpenSourceDetailModalAsync(WalletModel.BudgetModel budget)
    {
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Large,
            Position = DialogPosition.TopCenter,
            CloseOnEscapeKey = true,
            FullWidth = true,
            NoHeader = true,
            CloseButton = false
        };

        var parameters = new DialogParameters
        {
            [nameof(SourceDetailModal.Currency)] = Wallet.Currency,
            [nameof(SourceDetailModal.Budget)] = budget
        };

        await DialogService.ShowAsync<SourceDetailModal>(string.Empty, parameters, options);
    }

    private sealed record ApexData(DateTime Month, long Balance);

    private sealed record Trend(string Icon, Color Color);

}