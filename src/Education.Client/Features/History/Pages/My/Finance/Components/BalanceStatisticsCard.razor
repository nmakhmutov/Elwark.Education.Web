@using Education.Client.Features.History.Clients.User.Model
<section class="mud-paper pa-3 pa-sm-6 @Class">
    <header class="d-flex justify-space-between align-center mb-3 mb-sm-6">
        <MudText Class="flex-grow-1" Typo="Typo.h5">
            @L["GameMoney_BalanceStatistics_Title"]
        </MudText>

        @if (_activities.Count > 0)
        {
            <MudSelect
                T="GameCurrency"
                OuterClass="flex-grow-0"
                Variant="Variant.Outlined"
                Margin="Margin.Dense"
                @bind-Value="@_currency"
                For="@(() => _currency)"
                Label="@L["Currency_Title"]">
                @foreach (var currency in _activities.Keys)
                {
                    <MudSelectItem Value="@currency">
                        <div class="d-flex align-center gap-3">
                            <MudIcon Size="Size.Small" Icon="@currency.GetIcon()"/>
                            <MudText Typo="Typo.body1">
                                @L.GetGameCurrencyTitle(currency)
                            </MudText>
                        </div>
                    </MudSelectItem>
                }
            </MudSelect>
        }
    </header>

    @if (_activities.TryGetValue(_currency, out var value))
    {
        <ActivityChart Activities="@value"/>
    }
    else
    {
        <EduNoContent Title="@L["Activities_NoRecentActivities"]" Size="Size.Large"/>
    }
</section>

@code {
    private GameCurrency _currency;

    private Dictionary<GameCurrency, MoneyActivityModel[]> _activities = [];

    [Inject]
    public IStringLocalizer<App> L { get; init; } = default!;

    [Parameter, EditorRequired]
    public required MoneyActivityModel[] Activities { get; set; }

    [Parameter]
    public string? Class { get; set; }

    protected override void OnInitialized()
    {
        _activities = Activities
            .GroupBy(x => x.Currency)
            .OrderBy(x => x.Key)
            .ToDictionary(x => x.Key, x => x.ToArray());

        if (_activities.Count > 0)
            _currency = _activities.First().Key;
    }

}
