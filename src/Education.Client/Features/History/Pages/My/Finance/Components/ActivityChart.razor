@using ApexCharts
@using Education.Client.Features.History.Clients.User.Model
<ApexChart @ref="@_chart" TItem="MoneyActivityModel" Options="_options">
    <ApexPointSeries
        TItem="MoneyActivityModel"
        Items="@_activities"
        SeriesType="SeriesType.Area"
        Name="@L["GameMoney_Income_Title"]"
        XValue="@(x => Customer.Humanize(x.Day, DateStyle.CustomerDayAndAbbreviatedMonth))"
        YValue="@(x => x.Income)"/>

    <ApexPointSeries
        TItem="MoneyActivityModel"
        Items="@_activities"
        SeriesType="SeriesType.Area"
        Name="@L["GameMoney_Expense_Title"]"
        XValue="@(x => Customer.Humanize(x.Day, DateStyle.CustomerDayAndAbbreviatedMonth))"
        YValue="@(x => x.Expense)"/>
</ApexChart>

@code {
    private ApexChart<MoneyActivityModel>? _chart;

    private readonly ApexChartOptions<MoneyActivityModel> _options =
        new()
        {
            Legend = new Legend
            {
                Position = LegendPosition.Top,
                FontFamily = "var(--mud-typography-body1-family)",
                FontSize = "var(--mud-typography-body1-size)",
                FontWeight = "var(--mud-typography-body1-weight)"
            },
            Chart = new Chart
            {
                Width = "100%",
                Height = "350px",
                Background = "transparent",
                ForeColor = "var(--mud-palette-text-primary)",
                Toolbar = new Toolbar
                {
                    Show = false
                },
                Zoom = new Zoom
                {
                    Enabled = false
                }
            },
            Grid = new Grid
            {
                BorderColor = "var(--mud-palette-divider)"
            },
            Stroke = new Stroke
            {
                Width = 2
            },
            Theme = new Theme()
        };

    private List<MoneyActivityModel> _activities = [];

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [CascadingParameter]
    private EduThemeProvider? ThemeProvider { get; set; }

    [CascadingParameter]
    private CustomerState Customer { get; set; } = default!;

    [Parameter, EditorRequired]
    public required MoneyActivityModel[] Activities { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await UpdateSeries();
        await UpdateOptions();
    }

    private Task UpdateSeries()
    {
        if (Activities.Length == 0)
            return Task.CompletedTask;

        var today = DateOnly.FromDateTime(DateTime.UtcNow);
        var start = GetStartDay(today);

        _activities.Clear();

        var currency = Activities.Select(x => x.Currency).First();

        for (var day = start; day <= today; day = day.AddDays(1))
        {
            var model = Activities.FirstOrDefault(x => x.Day == day)
                ?? new MoneyActivityModel(day, currency, 0, 0, 0);

            _activities.Add(model);
        }

        return _chart is null ? Task.CompletedTask : _chart.UpdateSeriesAsync();
    }

    private DateOnly GetStartDay(DateOnly today)
    {
        var last = today.AddDays(-7);

        var min = Activities.Min(x => (DateOnly?)x.Day);
        if (min is null)
            return last;

        if (min < last)
            return (DateOnly)min;

        return last;
    }

    private Task UpdateOptions()
    {
        if (ThemeProvider is null)
            return Task.CompletedTask;

        _options.Colors = [ThemeProvider.Palette.Success.ToString(), ThemeProvider.Palette.Error.ToString()];

        var current = ThemeProvider.IsDarkMode ? Mode.Dark : Mode.Light;
        if (_options.Theme.Mode == current)
            return Task.CompletedTask;

        _options.Theme.Mode = current;
        return _chart is null ? Task.CompletedTask : _chart.UpdateOptionsAsync(false, false, false);
    }

}
