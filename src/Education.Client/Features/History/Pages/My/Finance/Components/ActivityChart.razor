@using Size = ApexCharts.Size
@using Education.Client.Features.History.Clients.User.Model
@using ApexCharts
<ApexChart @ref="@_chart" TItem="MoneyActivityModel" Options="_options">
    @foreach (var item in _activities)
    {
        <ApexPointSeries
            TItem="MoneyActivityModel"
            Items="item.Value"
            Name="@L.GetInternalCurrencyTitle(item.Key)"
            SeriesType="SeriesType.Bar"
            XValue="@(x => x.Day.ToString("dd MMM"))"
            YValue="@(x => x.Balance)"/>
    }
</ApexChart>

@code {
    private ApexChart<MoneyActivityModel>? _chart;

    private ApexChartOptions<MoneyActivityModel> _options = new()
    {
        Legend = new Legend
        {
            Position = LegendPosition.Top
        },
        Chart = new Chart
        {
            Width = "100%",
            Height = "350px",
            Background = "transparent",
            ForeColor = "var(--mud-palette-text-primary)"
        },
        Grid = new Grid
        {
            BorderColor = "var(--mud-palette-divider)"
        },
        Colors = [Colors.Blue.Default, Colors.DeepPurple.Default, Colors.Green.Accent4, Colors.Red.Default],
        Theme = new Theme()
    };

    private Dictionary<InternalCurrency, List<MoneyActivityModel>> _activities = [];

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [CascadingParameter]
    private CascadingTheme? ThemeProvider { get; set; }

    [Parameter, EditorRequired]
    public required MoneyActivityModel[] Activities { get; set; }

    protected override void OnInitialized()
    {
        if (Activities.Length == 0)
            return;

        var today = DateOnly.FromDateTime(DateTime.UtcNow);
        var start = GetStartDay(today);

        _activities = Activities
            .Select(x => x.Currency)
            .Distinct()
            .ToDictionary(x => x, _ => new List<MoneyActivityModel>());

        foreach (var (currency, models) in _activities)
        {
            for (var day = start; day <= today; day = day.AddDays(1))
            {
                var model = Activities.FirstOrDefault(x => x.Currency == currency && x.Day == day)
                    ?? new MoneyActivityModel(day, currency, 0, 0, 0);

                models.Add(model);
            }
        }
    }

    protected override Task OnParametersSetAsync()
    {
        var current = ThemeProvider is { IsDarkMode: true } ? Mode.Dark : Mode.Light;
        if (_options.Theme.Mode == current)
            return Task.CompletedTask;

        _options.Theme.Mode = current;
        return _chart is null ? Task.CompletedTask : _chart.RenderAsync();
    }

    private DateOnly GetStartDay(DateOnly today)
    {
        var last = today.AddDays(-7);

        var min = Activities.Min(x => (DateOnly?)x.Day);
        if (min is null)
            return last;

        if (min < last)
            return (DateOnly)min;

        return last;
    }
}