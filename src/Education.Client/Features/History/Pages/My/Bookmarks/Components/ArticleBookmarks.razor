@using Education.Client.Features.History.Clients.Learner
@using Education.Client.Features.History.Clients.Learner.Request
@if (_isEmpty)
{
    <NoContent Class="mt-6 mt-sm-12" Title="@L["Bookmarks_NoArticles"]" Icon="@EduIcons.Bookmarks"/>
}
else
{
    <Virtualize @ref="@_virtualize" ItemsProvider="BookmarkProvider" ItemSize="120">
        <Placeholder>
            <div class="grid mud-paper pa-3 pa-sm-6 mb-3 mb-sm-6">
                <div class="image">
                    <MudSkeleton SkeletonType="SkeletonType.Circle" Width="56px" Height="56px"/>
                </div>
                <div class="title">
                    <MudSkeleton Class="my-1" SkeletonType="SkeletonType.Text" Width="60%" Height="32px"/>
                    <MudSkeleton SkeletonType="SkeletonType.Text" Width="25%" Height="22px"/>
                </div>
                <div class="rating">
                    <MudRating MaxValue="5" SelectedValue="0" Disabled/>
                </div>
                <div class="quizzes">
                    <MudChip
                        Class="ma-0"
                        Color="Color.Default"
                        Variant="Variant.Outlined"
                        Icon="@EduIcons.Quiz"
                        Text="0"/>
                </div>
                <div class="completion">
                    <ArticleCompletionChip Status="LearningStatus.NotEngaged"/>
                </div>
                <div class="actions">
                    <MudIconButton Icon="@Icons.Material.Outlined.BookmarkAdd" Disabled/>
                </div>
            </div>
        </Placeholder>
        <ItemContent>
            @* <ArticleCard *@
            @*     Article="@context.Article" *@
            @*     Activity="@context.Activity" *@
            @*     HasQuiz="@context.HasQuiz" *@
            @*     OnBookmarkClick="@LearnerClient.ToggleArticleBookmarkAsync" *@
            @*     Horizontal/> *@

            <div class="grid mud-paper pa-3 pa-sm-6 mb-3 mb-sm-6">
                <div class="image">
                    <MudAvatar Class="rounded" Size="Size.Large" Image="@context.Article.ThumbnailUrl" Square/>
                </div>
                <div class="title one-line-text">
                    <MudLink Href="@HistoryUrl.Content.Article(context.Article.Id)" Typo="Typo.h6">
                        @context.Article.Title
                    </MudLink>
                    <br/>
                    <a class="mud-typography mud-link mud-text-secondary mud-link-underline-hover mud-typography-body2"
                       href="@HistoryUrl.Content.Articles(context.Article.Epoch)">
                        @L.GetEpochTitle(context.Article.Epoch)
                    </a>
                </div>
                <div class="rating">
                    <ContentRating Class="d-inline-flex flex-column align-center" Rating="@context.Article.Rating"/>
                </div>
                <div class="quizzes">
                    <TotalQuizzesChip
                        Easy="@(context.Activity?.EasyQuizzes ?? 0)"
                        Hard="@(context.Activity?.HardQuizzes ?? 0)"/>
                </div>
                <div class="completion">
                    <ArticleCompletionChip
                        Status="@(context.Activity?.Status ?? LearningStatus.NotEngaged)"
                        Href="@HistoryUrl.User.MyArticle(context.Article.Id)"
                        ShowTooltip/>
                </div>
                <div class="actions">
                    <BookmarkButton
                        Id="@context.Article.Id"
                        IsBookmarked="@(context.Activity?.IsBookmarked ?? false)"
                        OnBookmarkClick="@LearnerClient.ToggleArticleBookmarkAsync"/>
                </div>
            </div>
        </ItemContent>
    </Virtualize>
}

@code {
    private string? _token;
    private bool _isEmpty;
    private Virtualize<UserArticleOverviewModel>? _virtualize;
    private readonly HashSet<UserArticleOverviewModel> _items = new();

    [Inject]
    private IHistoryLearnerClient LearnerClient { get; init; } = default!;

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [Parameter, EditorRequired]
    public required BookmarksRequest.SortType Sort { get; set; }

    protected override Task OnParametersSetAsync()
    {
        if (_virtualize is null)
            return Task.CompletedTask;

        _items.Clear();

        return _virtualize.RefreshDataAsync();
    }

    private async ValueTask<ItemsProviderResult<UserArticleOverviewModel>> BookmarkProvider(ItemsProviderRequest request)
    {
        var items = _items.Skip(request.StartIndex).Take(request.Count);

        var isRangeAvailable = _items.Count > (request.StartIndex + 1) * request.Count
            || (_items.Count > 0 && string.IsNullOrEmpty(_token));

        if (isRangeAvailable || request.Count == 0)
            return new ItemsProviderResult<UserArticleOverviewModel>(items, GetLength());

        var result = await LearnerClient.GetArticleBookmarksAsync(new BookmarksRequest(Sort, request.Count, _token));
        return result.Map(x =>
            {
                _token = x.Next;

                foreach (var item in x.Items)
                    _items.Add(item);

                if (_isEmpty || _items.Count > 0)
                    return new ItemsProviderResult<UserArticleOverviewModel>(items, GetLength());

                _isEmpty = true;
                StateHasChanged();

                return new ItemsProviderResult<UserArticleOverviewModel>(items, GetLength());
            })
            .UnwrapOrElse(() => new ItemsProviderResult<UserArticleOverviewModel>(items, 0));

        int GetLength() =>
            _items.Count + (string.IsNullOrEmpty(_token) ? 0 : 1);
    }

}