@using Education.Client.Features.History.Clients.Learner
@using Education.Client.Features.History.Clients.Learner.Request
@if (_isEmpty)
{
    <NoContent Class="mt-6 mt-sm-12" Title="@L["Bookmarks_NoArticles"]" Icon="@EduIcons.Bookmarks"/>
}
else
{
    <Virtualize @ref="@_virtualize" ItemsProvider="BookmarkProvider" ItemSize="120">
        <Placeholder>
            <div class="grid mud-paper pa-3 mb-3 mb-sm-6">
                <div class="image">
                    <MudSkeleton Class="rounded" SkeletonType="SkeletonType.Rectangle" Width="80px" Height="80px"/>
                </div>
                <div class="title">
                    <MudSkeleton Class="my-1" SkeletonType="SkeletonType.Text" Width="60%" Height="32px"/>
                    <MudSkeleton SkeletonType="SkeletonType.Text" Width="25%" Height="22px"/>
                </div>
                <div class="epoch">
                    <MudSkeleton SkeletonType="SkeletonType.Text" Width="80px" Height="40px"/>
                </div>
                <div class="completion">
                    <ArticleCompletionChip Status="ArticleLearningStatus.NotStarted" Size="Size.Small"/>
                </div>
                <div class="actions">
                    <MudIconButton Icon="@Icons.Material.Outlined.BookmarkAdd" Disabled/>
                </div>
            </div>
        </Placeholder>
        <ItemContent>
            <div class="grid mud-paper pa-3 mb-3 mb-sm-6">
                <div class="image">
                    <MudAvatar Class="avatar" Rounded>
                        <MudImage Src="@context.Article.Image.Small" Alt="@context.Article.Image.Alt"/>
                    </MudAvatar>
                </div>
                <div class="title one-line-text">
                    <MudLink Href="@HistoryUrl.Content.Article(context.Article.Id)" Typo="Typo.h6">
                        @context.Article.Title
                    </MudLink>
                    <div class="w-max-600">
                        <MudText Class="one-line-text" Typo="Typo.body2">
                            @context.Article.Overview
                        </MudText>
                    </div>
                </div>
                <div class="epoch">
                    <EpochChip Epoch="@context.Article.Epoch"/>
                </div>
                <div class="completion">
                    <ArticleCompletionChip
                        Status="@(context.Activity?.Status ?? ArticleLearningStatus.NotStarted)"
                        Size="Size.Small"
                        Href="@HistoryUrl.User.MyArticle(context.Article.Id)"/>
                </div>
                <div class="actions">
                    <BookmarkButton
                        Id="@context.Article.Id"
                        IsBookmarked="@(context.Activity?.IsBookmarked ?? false)"
                        OnBookmarkClick="@LearnerClient.ToggleArticleBookmarkAsync"/>
                </div>
            </div>
        </ItemContent>
    </Virtualize>
}

@code {
    private string? _token;
    private bool _isEmpty;
    private Virtualize<UserArticleOverviewModel>? _virtualize;
    private readonly HashSet<UserArticleOverviewModel> _items = new();

    [Inject]
    private IHistoryLearnerClient LearnerClient { get; init; } = default!;

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [Parameter, EditorRequired]
    public required BookmarksRequest.SortType Sort { get; set; }

    protected override Task OnParametersSetAsync()
    {
        if (_virtualize is null)
            return Task.CompletedTask;

        _items.Clear();

        return _virtualize.RefreshDataAsync();
    }

    private async ValueTask<ItemsProviderResult<UserArticleOverviewModel>> BookmarkProvider(ItemsProviderRequest request)
    {
        var items = _items.Skip(request.StartIndex).Take(request.Count);

        var isRangeAvailable = _items.Count > (request.StartIndex + 1) * request.Count
            || (_items.Count > 0 && string.IsNullOrEmpty(_token));

        if (isRangeAvailable || request.Count == 0)
            return new ItemsProviderResult<UserArticleOverviewModel>(items, GetLength());

        var result = await LearnerClient.GetArticleBookmarksAsync(new BookmarksRequest(Sort, request.Count, _token));
        return result.Map(x =>
            {
                _token = x.Next;

                foreach (var item in x.Items)
                    _items.Add(item);

                if (_isEmpty || _items.Count > 0)
                    return new ItemsProviderResult<UserArticleOverviewModel>(items, GetLength());

                _isEmpty = true;
                StateHasChanged();

                return new ItemsProviderResult<UserArticleOverviewModel>(items, GetLength());
            })
            .UnwrapOrElse(() => new ItemsProviderResult<UserArticleOverviewModel>(items, 0));

        int GetLength() =>
            _items.Count + (string.IsNullOrEmpty(_token) ? 0 : 1);
    }

}
