@using Education.Client.Features.History.Clients.Learner
@using Education.Client.Features.History.Clients.Learner.Request
<section class="mud-paper d-flex flex-column  @Class">
    <MudText Class="pa-3 pa-sm-6" Typo="Typo.h5">
        @L["Articles_RecentActivity_Title"]
    </MudText>
    <ApiViewer Result="@_response" OnReloadClick="@OnInitializedAsync">
        <ChildContent>
            @if (context.Items.Length > 0)
            {
                <section class="flex-grow-1">
                    @foreach (var item in context.Items)
                    {
                        <article class="d-flex align-center gap-3 gap-sm-6 pa-3 px-sm-6">
                            <MudAvatar Size="Size.Large" Rounded>
                                <MudImage Src="@item.Article.Image.Small" Alt="@item.Article.Image.Alt"/>
                            </MudAvatar>
                            <div class="flex-grow-1 one-line-text">
                                <MudLink
                                    Href="@HistoryUrl.Content.Article(item.Article.Id)"
                                    Typo="Typo.body1"
                                    Title="@item.Article.Title">
                                    @item.Article.Title
                                </MudLink>
                                <br/>
                                <MudText Class="mud-text-secondary" Typo="Typo.caption">
                                    @item.Article.Overview
                                </MudText>
                            </div>
                            <ArticleCompletionChip
                                Status="@(item.Activity?.Status ?? ArticleLearningStatus.NotStarted)"
                                Size="Size.Small"
                                Href="@HistoryUrl.User.MyArticle(item.Article.Id)"/>
                        </article>
                    }
                </section>

                <MudSpacer/>

                <footer class="border-t mud-border-lines-default pa-3">
                    <MudButton
                        Class="px-3 text-transform-none"
                        EndIcon="@Icons.Material.Outlined.ArrowForward"
                        Href="@HistoryUrl.User.MyArticle()">
                        @L["Articles_SeeAll"]
                    </MudButton>
                </footer>
            }
            else
            {
                <EduNoContent
                    Title="@L["Articles_RecentActivity_Empty_Title"]"
                    Subtitle="@L["Articles_RecentActivity_Empty_Description"]"
                    Size="Size.Medium"/>

                <MudSpacer/>

                <footer class="border-t mud-border-lines-default pa-3">
                    <MudButton
                        Class="px-3 text-transform-none"
                        EndIcon="@Icons.Material.Outlined.ArrowForward"
                        Href="@HistoryUrl.Content.Articles()">
                        @L["Articles_SeeAll"]
                    </MudButton>
                </footer>
            }
        </ChildContent>
        <Loading>
            @for (var i = 0; i < Count; i++)
            {
                <article class="d-flex justify-space-between gap-3 mb-3 mb-sm-6 px-3 px-sm-6">
                    <MudSkeleton Class="rounded" SkeletonType="SkeletonType.Rectangle" Width="56px" Height="56px"/>
                    <div style="width: 70%">
                        <MudSkeleton SkeletonType="SkeletonType.Text" Width="90%"/>
                        <MudSkeleton SkeletonType="SkeletonType.Text" Width="40%"/>
                    </div>
                    <MudSkeleton SkeletonType="SkeletonType.Text" Width="15%" Height="40px"/>
                </article>
            }
        </Loading>
    </ApiViewer>
</section>

@code {
    private const int Count = 4;

    private ApiResult<PagingTokenModel<UserArticleOverviewModel>> _response =
        ApiResult<PagingTokenModel<UserArticleOverviewModel>>.Loading();

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [Inject]
    private IHistoryLearnerClient LearnerClient { get; init; } = default!;

    [Parameter]
    public string? Class { get; set; }

    protected override async Task OnInitializedAsync() =>
        _response = await LearnerClient.GetArticlesAsync(new ArticleActivityRequest(Count));

}
