@using Align = MudBlazor.Align
@using ApexCharts
@using Education.Client.Features.History.Clients.User.Model
<section class="mud-paper @Class">
    <header class="px-3 pt-3 px-sm-6 pt-sm-6">
        <MudText Typo="Typo.h5">
            @L["Achievements_Title"]
        </MudText>
    </header>

    <section class="pb-3 pb-sm-6">
        <ApexChart TItem="Data" Options="Options">
            <ApexPointSeries
                TItem="Data"
                Items="@(new[] { new Data(Completeness) })"
                SeriesType="SeriesType.RadialBar"
                XValue="@(x => x.Completeness)"
                YAggregate="@(x => (decimal)x.Sum(t => t.Completeness))"/>
        </ApexChart>

        <MudText Class="mt-n6" Typo="Typo.body1" Align="Align.Center">
            @L["Achievement_UnlockedCount", Completed, Total]
        </MudText>
    </section>

    @if (LatestCompletedAchievement is not null)
    {
        <AchievementCard
            Class="px-3 pb-3 px-sm-6 pb-sm-6"
            Achievement="@LatestCompletedAchievement"
            DateTimeFormatter="@Customer.Humanize"
            Dense/>
    }

    <footer class="border-t mud-border-lines-default pa-3">
        <MudButton
            Class="text-transform-none"
            EndIcon="@Icons.Material.Outlined.ArrowForward"
            Href="@HistoryUrl.User.MyAchievements">
            @L["Achievements_SeeAll"]
        </MudButton>
    </footer>
</section>

@code {

    private ApexChartOptions<Data> Options =>
        new()
        {
            Chart = new Chart
            {
                Background = "transparent",
                ForeColor = "var(--mud-palette-text-primary)",
                OffsetY = -25,
                Sparkline = new ChartSparkline
                {
                    Enabled = true
                }
            },
            Stroke = new Stroke
            {
                Show = false
            },
            Colors = [Colors.Green.Accent4],
            PlotOptions = new PlotOptions
            {
                RadialBar = new PlotOptionsRadialBar
                {
                    StartAngle = -120,
                    EndAngle = 120,
                    DataLabels = new RadialBarDataLabels
                    {
                        Name = new RadialBarDataLabelsName
                        {
                            Show = false
                        },
                        Value = new RadialBarDataLabelsValue
                        {
                            FontSize = "1.875rem"
                        },
                        Total = new RadialBarDataLabelsTotal
                        {
                            Show = true,
                            FontSize = "1rem",
                            Formatter = @"function (w) { return w.globals.seriesTotals[0] + '%'; }"
                        }
                    }
                }
            }
        };

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [Parameter, EditorRequired]
    public required CustomerState Customer { get; set; }

    [Parameter]
    public double Total { get; set; }

    [Parameter]
    public uint Completed { get; set; }

    [Parameter]
    public double Completeness { get; set; }

    [Parameter]
    public Achievement.CompletedModel? LatestCompletedAchievement { get; set; }

    [Parameter]
    public string? Class { get; set; }

    private sealed record Data(double Completeness);

}