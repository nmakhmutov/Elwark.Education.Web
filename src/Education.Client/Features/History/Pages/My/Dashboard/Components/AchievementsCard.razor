@using ApexCharts
@using Education.Client.Features.History.Clients.User.Model
@using Align = MudBlazor.Align
<section class="d-flex flex-column mud-paper @Class">
    <MudText Class="pa-3 pa-sm-6" Typo="Typo.h5">
        @L["Achievements_Title"]
    </MudText>

    <section class="d-flex flex-column align-center justify-center flex-1 pb-3 pb-sm-6">
        <ApexChart TItem="MeOverviewModel.AchievementModel" Options="Options">
            <ApexPointSeries
                TItem="MeOverviewModel.AchievementModel"
                Items="@(new[] { Achievements })"
                SeriesType="SeriesType.RadialBar"
                XValue="@(_ => 0)"
                YAggregate="@(_ => (decimal)Achievements.Completeness)"/>
        </ApexChart>

        <MudText Typo="Typo.body1" Align="Align.Center">
            @L["Achievement_UnlockedCount", Achievements.Unlocked, Achievements.Total]
        </MudText>
    </section>

    @if (Achievements.LatestCompletedAchievement is not null)
    {
        <AchievementCard Achievement="@Achievements.LatestCompletedAchievement"
                         Class="px-3 pb-3 px-sm-6 pb-sm-6"
                         DateTimeFormatter="@Customer.Humanize"
                         Dense/>
    }

    <MudSpacer/>

    <footer class="border-t mud-border-lines-default pa-3">
        <MudButton Class="px-3 text-transform-none"
                   DisableElevation
                   DisableRipple
                   EndIcon="@Icons.Material.Outlined.ArrowForward"
                   Href="@HistoryUrl.User.MyAchievements">
            @L["Achievements_SeeAll"]
        </MudButton>
    </footer>
</section>

@code {

    private ApexChartOptions<MeOverviewModel.AchievementModel> Options =>
        new()
        {
            Chart = new Chart
            {
                Height = 220,
                Background = "transparent",
                ForeColor = "var(--mud-palette-text-primary)",
                OffsetY = -22,
                Sparkline = new ChartSparkline
                {
                    Enabled = true
                }
            },
            Stroke = new Stroke
            {
                Show = false
            },
            Colors = [ThemeProvider?.Theme.Palette.Primary.ToString()],
            PlotOptions = new PlotOptions
            {
                RadialBar = new PlotOptionsRadialBar
                {
                    StartAngle = -135,
                    EndAngle = 135,
                    Track = new Track
                    {
                        StartAngle = -135,
                        EndAngle = 135,
                        Background = "var(--mud-palette-background)"
                    },
                    Hollow = new Hollow
                    {
                        Size = "70%"
                    },
                    DataLabels = new RadialBarDataLabels
                    {
                        Name = new RadialBarDataLabelsName
                        {
                            Show = false
                        },
                        Value = new RadialBarDataLabelsValue
                        {
                            Show = true,
                            FontSize = "1.875rem"
                        },
                        Total = new RadialBarDataLabelsTotal
                        {
                            Show = true,
                            FontSize = "1rem",
                            Formatter = @"function (w) { return w.globals.seriesTotals[0] + '%'; }"
                        }
                    }
                }
            }
        };

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [CascadingParameter]
    private CascadingTheme? ThemeProvider { get; set; }

    [CascadingParameter]
    public CustomerState Customer { get; init; } = default!;

    [Parameter]
    public required MeOverviewModel.AchievementModel Achievements { get; set; }

    [Parameter]
    public string? Class { get; set; }

}
