@using Education.Client.Features.History.Clients.Course
@using Education.Client.Features.History.Clients.Course.Request
@using Education.Client.Features.History.Clients.Learner

<ApiViewer Result="@_result" OnReloadClick="@OnInitializedAsync">
    <Loading>
        <section class="grid @Class">
            @for (var i = 0; i < Count; i++)
            {
                <SkeletonCard Class="course"/>
            }
        </section>
    </Loading>
    <ChildContent Context="models">
        <section class="grid @Class">
            @for (var index = 0; index < models.Length; index++)
            {
                var model = models[index];
                <TrendingCourseCard
                    Class="course"
                    Model="@model"
                    HideOverview="@(index > 0 && model.Course.Title.Length > 60)"
                    OnBookmarkClick="@LearnerClient.ToggleCourseBookmarkAsync"/>
            }
        </section>
    </ChildContent>
</ApiViewer>

@code {
    private const int Count = 5;
    private ApiResult<UserCourseOverviewModel[]> _result = ApiResult<UserCourseOverviewModel[]>.Loading();

    [Inject]
    private IBrowserViewportService ViewportService { get; init; } = default!;

    [Inject]
    private IHistoryCourseClient CourseClient { get; init; } = default!;

    [Inject]
    private IHistoryLearnerClient LearnerClient { get; init; } = default!;

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [Parameter]
    public string? Class { get; set; }

    protected override async Task OnInitializedAsync() =>
        _result = (await CourseClient.GetAsync(new GetCourseRequest(GetCourseRequest.SortType.Trending, 0, Count)))
            .Map(x => x.Items);

}