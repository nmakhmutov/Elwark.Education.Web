@using Education.Client.Features.History.Clients.Article
@using Education.Client.Features.History.Clients.Article.Request
@using Education.Client.Features.History.Clients.Learner

<header class="@Class">
    <div class="slider">
        <img class="slider-image" src="images/history/history.jpg" alt="@L["History_Title"]">
        <div class="slider-container">
            <EduContainer MaxWidth="@MaxWidth">
                <h1 class="title">@L["History_Title"]</h1>
            </EduContainer>
        </div>
    </div>

    <EduContainer Class="articles" MaxWidth="@MaxWidth">
        <div class="grid">
            <ApiViewer Result="@_result" OnReloadClick="@OnInitializedAsync">
                <Loading>
                    @for (var i = 0; i < Count; i++)
                    {
                        <SkeletonCard/>
                    }
                </Loading>
                <ChildContent Context="models">
                    @foreach (var model in models)
                    {
                        <TrendingArticleCard
                            Class="article"
                            Model="@model"
                            OnBookmarkClick="@LearnerClient.ToggleArticleBookmarkAsync"
                            HideOverview/>
                    }
                </ChildContent>
            </ApiViewer>
        </div>
    </EduContainer>
</header>

@code {
    private const int Count = 4;
    private ApiResult<UserArticleOverviewModel[]> _result = ApiResult<UserArticleOverviewModel[]>.Loading();

    [Inject]
    private IHistoryArticleClient ArticleClient { get; init; } = default!;

    [Inject]
    private IHistoryLearnerClient LearnerClient { get; init; } = default!;

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public EduWidth MaxWidth { get; set; } = EduWidth.None;
    
    protected override async Task OnInitializedAsync() =>
        _result = (await ArticleClient.GetAsync(new GetArticlesRequest(EpochType.None, GetArticlesRequest.SortType.Newest, 0, Count)))
            .Map(x => x.Items);

}