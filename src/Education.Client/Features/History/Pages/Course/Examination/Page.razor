@page "/history/course/{id}/examination"
@layout HistoryLayout
@attribute [Authorize]

<EduContainer Class="py-3 py-sm-6" MaxWidth="EduWidth.W1920">
    <PageBreadcrumbsHeader Items="@Breadcrumbs"/>
</EduContainer>

<ApiViewer Result="@_result" OnReloadClick="@OnInitializedAsync" Context="model">
    <PageTitle>
        @model.Course.Title
    </PageTitle>

    <section class="grid px-3 pb-3 px-sm-6 pb-sm-6">
        <section class="course">
            <MudText Typo="Typo.h6" Class="mb-3">
                @L["Course_Title"]
            </MudText>

            <CourseCard
                Course="@model.Course"
                Activity="@model.Activity"
                OnBookmarkClick="@LearnerClient.ToggleArticleBookmarkAsync"
                HasExamination="@(model.Examinations.Length > 0)"
                Horizontal/>
        </section>

        <section class="inventory">
            <MudText Typo="Typo.h6" Class="mb-3">
                @L["Examination_Equipment_Title"]
            </MudText>
            <InventoryGrid Inventory="@model.Inventories" StoreHref="@HistoryUrl.Store.Index(CategoryType.Examination)" Context="item">
                <InventoryInfoCard
                    Title="@item.Title"
                    Overview="@item.Overview"
                    Quantity="@item.Quantity"
                    IconUrl="@item.IconUrl"/>
            </InventoryGrid>
        </section>

        <section class="exam">
            @if (model.Examinations.Length > 0)
            {
                <MudText Typo="Typo.h6" Class="mb-3">
                    @L["Examination_Type_Title"]
                </MudText>

                <ExaminationDifficultyRadioGroup
                    Class="mb-6"
                    SelectedDifficulty="@_difficulty"
                    SelectedDifficultyChanged="@ChangeDifficulty"
                    Examinations="@model.Examinations"/>

                <div class="d-flex justify-center">
                    <LoadingButton
                        Color="Color.Primary"
                        Variant="Variant.Filled"
                        Size="Size.Large"
                        Text="@L["Examination_TakeTheExamination"]"
                        LoadingText="@L["Loading_Title"]"
                        IsLoading="@_isLoading"
                        Disabled="@(model.Examinations.All(x => !x.IsAllowed))"
                        OnClick="@CreateTestAsync"
                        DisableElevation/>
                </div>
            }
            else
            {
                <MudAlert Severity="Severity.Info">
                    @L["Examination_NotAvailableForCourse", model.Course.Title]
                </MudAlert>
            }
        </section>
    </section>
</ApiViewer>