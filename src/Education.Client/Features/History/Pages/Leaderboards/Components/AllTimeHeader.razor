@using Education.Client.Features.History.Clients.Leaderboard.Model
<header class="header">
    <MudChipSet
        Class="d-flex flex-wrap justify-center mb-3 mb-sm-6"
        SelectedChip="@_selected"
        SelectedChipChanged="@OnChanged"
        Mandatory
        Filter>
        @foreach (var region in Regions)
        {
            <MudChip
                Class="px-6"
                Value="@region"
                Text="@L[$"Region_{region}"]"
                Default="@(region.Equals(Region, StringComparison.OrdinalIgnoreCase))"
                Color="Color.Primary"
                SelectedColor="Color.Secondary"
                Variant="Variant.Outlined"/>
        }
    </MudChipSet>

    <h1 class="champions">
        @L["Leaderboard_Champions"]
    </h1>

    <article class="contestants">
        @foreach (var contestant in Contestants)
        {
            <TopContestantCard
                Rank="@contestant.Rank"
                Experience="@contestant.Experience"
                Name="@contestant.FullName"
                Image="@contestant.Image"/>
        }
    </article>
</header>

@code {
    MudChip? _selected;

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [Parameter, EditorRequired]
    public required IEnumerable<string> Regions { get; set; }

    [Parameter, EditorRequired]
    public required string Region { get; set; }

    [Parameter, EditorRequired]
    public required EventCallback<string> RegionChanged { get; set; }

    [Parameter, EditorRequired]
    public required IEnumerable<ContestantModel> Contestants { get; set; }

    private Task OnChanged(MudChip chip)
    {
        _selected = chip;

        return RegionChanged.InvokeAsync((string)chip.Value);
    }

}
