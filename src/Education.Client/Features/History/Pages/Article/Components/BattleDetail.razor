@using Education.Client.Features.History.Clients.Article.Model
@using Education.Client.Features.History.Clients.Learner
<EduContainer Class="py-3 py-sm-6" MaxWidth="EduWidth.W1440">
    <header class="header">
        <article>
            <div class="d-flex justify-center">
                <EduBreadcrumbs Class="pa-0" Items="@Breadcrumbs"/>
            </div>

            <ArticleTitle Class="mud-typography-align-center mb-3">
                @Battle.Title
            </ArticleTitle>

            <div class="d-flex justify-center mb-6">
                <HistoricalDateRange Started="@Battle.Started" Finished="@Battle.Finished"/>
            </div>
            <MudText Class="mb-3 mb-sm-6" Typo="Typo.body1" Align="Align.Center">
                @Battle.Description
            </MudText>
        </article>

        <aside class="battle-image">
            <img class="image object-cover object-center mx-auto"
                 src="@Battle.Image.Origin"
                 alt="@Battle.Image.Alt"
                 loading="lazy"/>
        </aside>
    </header>

    <ContentGrid>
        <Header>
            <ContentToolbarCard Formatter="@Formatter"/>
            <ArticleInformation TimeToRead="@Battle.TimeToRead" Rating="@Battle.Rating"/>
        </Header>

        <Content>
            <ContentCard Formatter="@Formatter" Content="@Battle.Content"/>
        </Content>

        <Sidebar>
            <section class="map mud-paper pa-3 pa-sm-6">
                @if (Battle.Map is not null)
                {
                    <a href="@Battle.Map.Url" target="_blank">
                        <img class="map-image object-contain object-center"
                             src="@Battle.Map.Url"
                             alt="@Battle.Map.Alt"
                             loading="lazy"/>
                    </a>

                    <MudText Class="mb-3 mb-sm-6" Typo="Typo.body2" Align="Align.Center">
                        @Battle.Map.Alt
                    </MudText>
                }

                <MudText Typo="Typo.h6">
                    @L["History_Battle_Location"]
                </MudText>
                <EduMarkupString Class="mb-3 mb-sm-6" Content="@Battle.Location" DisableParagraphIndent/>
                <MudText Typo="Typo.h6">
                    @L["History_Battle_Result"]
                </MudText>
                <EduMarkupString Content="@Battle.Result" DisableParagraphIndent/>
            </section>

            @if (_conflictParties.Count > 0)
            {
                <section class="conflict-parties mud-paper pa-3 pa-sm-6">
                    @foreach (var item in _conflictParties)
                    {
                        <div class="mb-3 mb-sm-6">
                            <MudText Class="mb-3" Typo="Typo.h6" Align="Align.Center">
                                @L[$"History_Battle_{item.Key}"]
                            </MudText>
                            <div class="d-flex justify-space-around gap-3">
                                @for (var i = 0; i < item.Value.Length; i++)
                                {
                                    @if (item.Value[i] is { } text)
                                    {
                                        <EduMarkupString Class="flex-1" Content="@text" DisableParagraphIndent/>
                                    }
                                    else
                                    {
                                        <div class="flex-1"></div>
                                    }

                                    @if (i < item.Value.Length - 1)
                                    {
                                        <MudDivider Class="flex-0" Vertical FlexItem/>
                                    }
                                }
                            </div>
                        </div>
                    }
                </section>
            }

            <AuthorizeView>
                <QuizCard ArticleId="@Battle.Id" Activity="@Activity" Difficulties="@Difficulties"/>

                <UserToolbarCard
                    ArticleId="@Battle.Id"
                    IsLiked="@Activity?.IsLiked"
                    IsBookmarked="@Activity?.IsBookmarked"
                    OnBookmarkClick="@LearnerClient.ToggleArticleBookmarkAsync"
                    OnLikeClick="@LearnerClient.LikeArticleAsync"
                    OnDislikeClick="@LearnerClient.DislikeArticleAsync"/>
            </AuthorizeView>
        </Sidebar>
    </ContentGrid>

    <RelatedArticles
        Class="mt-sm-6"
        ArticleId="@Battle.Id"
        Title="@L["Articles_Related_Title"]"
        OnBookmarkClick="@LearnerClient.ToggleArticleBookmarkAsync"/>

</EduContainer>

@code {
    private Dictionary<string, MarkupString?[]> _conflictParties = [];

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [Inject]
    private ContentFormatter Formatter { get; init; } = default!;

    [Inject]
    private IHistoryLearnerClient LearnerClient { get; init; } = default!;

    private List<BreadcrumbItem> Breadcrumbs =>
    [
        new(L["History_Title"], HistoryUrl.Root),
        new(L.GetEpochTitle(Battle.Epoch), HistoryUrl.Content.Articles(Battle.Epoch))
    ];

    [Parameter, EditorRequired]
    public required ArticleDetail.BattleModel Battle { get; set; }

    [Parameter, EditorRequired]
    public required UserArticleActivityModel? Activity { get; set; }

    [Parameter, EditorRequired]
    public required DifficultyType[] Difficulties { get; set; }

    protected override async Task OnInitializedAsync() =>
        await Formatter.InitializeAsync();

    protected override void OnParametersSet()
    {
        if (Battle.FactionA.Belligerents.HasValue || Battle.FactionB.Belligerents.HasValue)
            _conflictParties[nameof(FactionModel.Belligerents)] =
            [
                Battle.FactionA.Belligerents,
                Battle.FactionB.Belligerents
            ];

        if (Battle.FactionA.Commanders.HasValue || Battle.FactionB.Commanders.HasValue)
            _conflictParties[nameof(FactionModel.Commanders)] =
            [
                Battle.FactionA.Commanders,
                Battle.FactionB.Commanders
            ];

        if (Battle.FactionA.Strength.HasValue || Battle.FactionB.Strength.HasValue)
            _conflictParties[nameof(FactionModel.Strength)] =
            [
                Battle.FactionA.Strength,
                Battle.FactionB.Strength
            ];

        if (Battle.FactionA.Losses.HasValue || Battle.FactionB.Losses.HasValue)
            _conflictParties[nameof(FactionModel.Losses)] =
            [
                Battle.FactionA.Losses,
                Battle.FactionB.Losses
            ];
    }

}
