@using Education.Client.Features.History.Clients.Article.Model
@using Education.Client.Features.History.Clients.Learner
<EduContainer Class="py-3 py-sm-6" MaxWidth="EduWidth.W1440">
    <div class="header">
        <div class="preamble">
            <div class="image">
                <MudImage
                    Class="mb-3"
                    Src="@Person.Image.Origin"
                    Alt="@Person.Image.Alt"
                    ObjectFit="ObjectFit.Cover"
                    ObjectPosition="ObjectPosition.Center"/>

                @if (Person.Born is not null || Person.Died is not null)
                {
                    <PersonLivespan Born="@Person.Born" Died="@Person.Died"/>
                }
            </div>
        </div>

        <div class="content pa-3 pa-sm-6">
            <ArticleTitle Class="mb-3">
                @Person.Title
            </ArticleTitle>

            <EduBreadcrumbs Class="pa-0 mb-3" Items="@Breadcrumbs"/>

            <MudText Class="mb-3" Typo="Typo.subtitle1">
                @Person.Description
            </MudText>

            @if (Person.Details.Length > 0)
            {
                <div class="details">
                    @foreach (var (title, text) in Person.Details)
                    {
                        <div>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">
                                @title
                            </MudText>
                            <EduMarkupString Content="@text" DisableParagraphIndent/>
                        </div>
                    }
                </div>
            }
        </div>
    </div>

    <ContentGrid>
        <Header>
            <ContentToolbarCard Formatter="@Formatter"/>
            <ArticleInformation
                ArticleId="@Person.Id"
                TimeToRead="@Person.TimeToRead"
                Popularity="@Person.Popularity"
                IsBookmarked="@Activity?.IsBookmarked"
                OnBookmarkClick="@LearnerClient.ToggleArticleBookmarkAsync"/>
        </Header>

        <Content>
            <ContentCard Formatter="@Formatter" Content="@Person.Content"/>
        </Content>

        <Sidebar>
            <AuthorizeView>
                <QuizCard
                    ArticleId="@Person.Id"
                    Activity="@Activity"
                    Difficulties="@Difficulties"/>

                <FeedbackCard
                    ArticleId="@Person.Id"
                    IsLiked="@Activity?.IsLiked"
                    Quality="@Activity?.Quality"
                    OnLikeClick="@LearnerClient.LikeArticleAsync"
                    OnDislikeClick="@LearnerClient.DislikeArticleAsync"
                    OnQualityClick="@((id, quality) => LearnerClient.ChangeArticleQualityAsync(id, quality))"/>
            </AuthorizeView>
        </Sidebar>
    </ContentGrid>

    <RelatedArticles
        Class="mt-sm-6"
        ArticleId="@Person.Id"
        Title="@L["Articles_Related_Title"]"
        OnBookmarkClick="@LearnerClient.ToggleArticleBookmarkAsync"/>

</EduContainer>

@code {

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [Inject]
    private ContentFormatter Formatter { get; init; } = default!;

    [Inject]
    private IHistoryLearnerClient LearnerClient { get; init; } = default!;

    private List<BreadcrumbItem> Breadcrumbs =>
    [
        new(L["History_Title"], HistoryUrl.Root),
        new(L.GetEpochTitle(Person.Epoch), HistoryUrl.Content.Articles(Person.Epoch))
    ];

    [Parameter, EditorRequired]
    public required ArticleDetail.PersonModel Person { get; set; }

    [Parameter, EditorRequired]
    public required UserArticleActivityModel? Activity { get; set; }

    [Parameter, EditorRequired]
    public required DifficultyType[] Difficulties { get; set; }

    protected override async Task OnInitializedAsync() =>
        await Formatter.InitializeAsync();

}
