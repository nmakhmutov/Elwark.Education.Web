@using Education.Client.Features

<Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        <CascadingAuthenticationState>
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(BaseLayout)">
                <Authorizing>
                    <PageSpinner/>
                </Authorizing>
                <NotAuthorized>
                    @if (!context.User.Identity?.IsAuthenticated ?? false)
                    {
                        <RedirectTo Url="@Links.Root"/>
                    }
                    else
                    {
                        <p>You are not authorized to access this resource.</p>
                    }
                </NotAuthorized>
            </AuthorizeRouteView>
        </CascadingAuthenticationState>
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(BaseLayout)">
            <ErrorContainer Error="@(Error.Create(L["Error:NotFound"], string.Empty, 404))"/>
        </LayoutView>
    </NotFound>
</Router>


@code
{
    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private ThemeProvider ThemeProvider { get; set; } = default!;

    [Inject]
    private SidebarService SidebarService { get; set; } = default!;

    [Inject]
    private CustomerService CustomerService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await ThemeProvider.InitAsync();
        await SidebarService.InitAsync();
        await CustomerService.InitAsync();
    }
}
