@using Education.Client.Features.Customer.Services.Notification
@using Education.Client.Features.Customer
@implements IDisposable

<MudBadge Color="Color.Secondary" Visible="@NotificationService.HasNotifications" Dot Overlap>
    <MudHidden Breakpoint="Breakpoint.MdAndUp">
        <MudIconButton Icon="@Icon" Color="Color.Inherit" Href="@CustomerUrl.Notifications"/>
    </MudHidden>
    
    <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert>
        <MudMenu
            ListClass="pa-0"
            Icon="@Icon"
            Color="Color.Inherit"
            AnchorOrigin="Origin.BottomLeft"
            TransformOrigin="Origin.TopLeft"
            PositionAtCursor
            DisableRipple>
            <section class="wrapper">
                <header class="d-flex justify-space-between align-center pa-3">
                    <MudText Typo="Typo.subtitle1">
                        @L["Notifications_Title"]
                    </MudText>
                    <MudButton
                        Class="no-transform"
                        Variant="Variant.Text"
                        Color="Color.Primary"
                        Size="Size.Small"
                        StartIcon="@Icons.Material.Outlined.DoneAll"
                        Disabled="@(!NotificationService.HasNotifications)"
                        OnClick="@NotificationService.MarkAllAsReadAsync">
                        @L["Notifications_MarkAsRead"]
                    </MudButton>
                </header>

                @if (NotificationService.HasNotifications)
                {
                    foreach (var notification in NotificationService.LastNotifications)
                    {
                        <MudDivider/>

                        <MudMenuItem Class="pa-3" Href="@notification.Href">
                            <NotificationBlock Notification="@notification" DisableTitleLink/>
                        </MudMenuItem>
                    }

                    <MudDivider/>

                    <footer class="d-flex justify-center py-3">
                        <MudLink Class="no-transform" Href="@CustomerUrl.Notifications" Typo="Typo.subtitle2">
                            @L["Notifications_All"]
                        </MudLink>
                    </footer>
                }
                else
                {
                    <section class="d-flex justify-center align-center py-6">
                        <MudText Class="mud-text-secondary my-12">
                            @L["Notifications_NothingNew"]
                        </MudText>
                    </section>
                }
            </section>
        </MudMenu>
    </MudHidden>
</MudBadge>

@code {
    private IDisposable? _subscription;

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [Inject]
    private INotificationService NotificationService { get; init; } = default!;

    private string Icon =>
        NotificationService.HasNotifications
            ? Icons.Material.Outlined.NotificationsActive
            : Icons.Material.Outlined.NotificationsNone;

    protected override async Task OnInitializedAsync()
    {
        _subscription = NotificationService.NotifyOnChange(EventCallback.Factory.Create(this, StateHasChanged));
        await NotificationService.StartAsync();
    }

    public void Dispose() =>
        _subscription?.Dispose();

}