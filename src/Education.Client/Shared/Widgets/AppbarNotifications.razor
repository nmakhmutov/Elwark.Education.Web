@using Education.Client.Features.Customer
@using Education.Client.Features.Customer.Services.Notification
@implements IDisposable

<MudBadge Color="Color.Secondary" Visible="@NotificationService.HasNotifications" Dot Overlap>
    <MudIconButton aria-label="@L["Notifications_Title"]"
                   Color="Color.Inherit"
                   Icon="@Icon"
                   OnClick="@ToggleDrawer"/>
</MudBadge>

<MudOverlay @bind-Visible="@_open" LockScroll AutoClose/>

<MudDrawer @bind-Open="@_open" Anchor="Anchor.End" Elevation="0" Variant="@DrawerVariant.Temporary" Width="380px">
    <header class="d-flex align-center pa-3">
        <MudText Typo="Typo.h6">
            @L["Notifications_Title"]
        </MudText>

        <MudSpacer/>

        <MudTooltip Text="@L["Notifications_MarkAsRead"]">
            <MudIconButton Disabled="@(!NotificationService.HasNotifications)"
                           Icon="@Icons.Material.Outlined.DoneAll"
                           OnClick="@NotificationService.MarkAllAsReadAsync"/>
        </MudTooltip>

        <MudIconButton OnClick="@ToggleDrawer" Icon="@Icons.Material.Outlined.Close"/>
    </header>

    <section class="content">
        @if (NotificationService.HasNotifications)
        {
            <MudList T="string" Padding="false" ReadOnly="false" Dense>
                @foreach (var notification in NotificationService.LastNotifications)
                {
                    <MudDivider/>

                    <MudListItem T="string" Class="pa-3" OnClick="@(() => OpenNotification(notification.Href))">
                        <EduNotification Notification="@notification" DisableTitleLink/>
                    </MudListItem>
                }
            </MudList>
        }
        else
        {
            <section class="d-flex justify-center align-center py-6">
                <MudText Class="mud-text-secondary my-12">
                    @L["Notifications_NothingNew"]
                </MudText>
            </section>
        }
    </section>

    <footer class="border-1 border-t mud-border-lines-default pa-3">
        <MudButton Class="text-transform-none"
                   Color="Color.Primary"
                   DropShadow="false"
                   Ripple="false"
                   FullWidth
                   Href="@CustomerUrl.Notifications"
                   Size="Size.Large"
                   Variant="Variant.Text">
            @L["Notifications_All"]
        </MudButton>
    </footer>
</MudDrawer>

@code {
    private bool _open;
    private IDisposable? _subscription;

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [Inject]
    private INotificationService NotificationService { get; init; } = default!;

    [Inject]
    private NavigationManager Navigation { get; init; } = default!;

    private string Icon =>
        NotificationService.HasNotifications
            ? Icons.Material.Outlined.NotificationsActive
            : Icons.Material.Outlined.NotificationsNone;

    protected override void OnInitialized() =>
        _subscription = NotificationService.NotifyOnChange(EventCallback.Factory.Create(this, StateHasChanged));

    private void ToggleDrawer() =>
        _open = !_open;

    private void OpenNotification(string href)
    {
        ToggleDrawer();
        Navigation.NavigateTo(href);
    }

    public void Dispose() =>
        _subscription?.Dispose();

}
