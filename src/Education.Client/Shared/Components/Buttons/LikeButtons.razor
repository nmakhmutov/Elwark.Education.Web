@using Education.Client.Models
@using Education.Client.Clients
<div class="@Class">
    <MudTooltip Text="@L["Button_Like_Description"]">
        <MudIconButton
            Icon="@Icons.Material.Rounded.ThumbUp"
            OnClick="@OnLike"
            Color="@(IsLiked == true ? Color.Primary : Color)"/>
    </MudTooltip>

    <MudTooltip Text="@L["Button_Dislike_Description"]">
        <MudIconButton
            Icon="@Icons.Material.Rounded.ThumbDown"
            OnClick="@OnDislike"
            Color="@(IsLiked == false ? Color.Primary : Color)"/>
    </MudTooltip>
</div>

@code {

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [Parameter, EditorRequired]
    public string Id { get; set; } = string.Empty;

    [Parameter, EditorRequired]
    public bool? IsLiked { get; set; }

    [Parameter]
    public Color Color { get; set; } = Color.Default;

    [Parameter]
    public string? Class { get; set; }

    [Parameter, EditorRequired]
    public Func<string, Task<ApiResult<Unit>>> OnLikeClick { get; set; } = _ => Task.FromResult(ApiResult<Unit>.Success(Unit.Value));

    [Parameter, EditorRequired]
    public Func<string, Task<ApiResult<Unit>>> OnDislikeClick { get; set; } = _ => Task.FromResult(ApiResult<Unit>.Success(Unit.Value));

    private async Task OnLike()
    {
        if (IsLiked == true)
            return;

        IsLiked = (await OnLikeClick.Invoke(Id))
            .Match(_ => true, _ => false, () => true);
    }

    private async Task OnDislike()
    {
        if (IsLiked == false)
            return;

        IsLiked = (await OnDislikeClick.Invoke(Id))
            .Match(_ => false, _ => true, () => false);
    }

}