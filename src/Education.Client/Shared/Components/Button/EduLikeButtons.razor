<div class="@Class">
    <MudButtonGroup Variant="Variant.Outlined" OverrideStyles="false" FullWidth>
        <MudButton
            aria-label="@L["Button_Like_Title"]"
            Variant="Variant.Outlined"
            Color="@(IsLiked == true ? Color.Success : Color.Default)"
            StartIcon="@Icons.Material.Rounded.ThumbUp"
            OnClick="@OnLike"
            DropShadow="false">
            @L["Button_Like_Title"]
        </MudButton>

        <MudButton
            aria-label="@L["Button_Dislike_Title"]"
            Variant="Variant.Outlined"
            Color="@(IsLiked == false ? Color.Error : Color.Default)"
            StartIcon="@Icons.Material.Rounded.ThumbDown"
            OnClick="@OnDislike"
            DropShadow="false">
            @L["Button_Dislike_Title"]
        </MudButton>
    </MudButtonGroup>
</div>

@code {

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [Parameter, EditorRequired]
    public string Id { get; set; } = string.Empty;

    [Parameter, EditorRequired]
    public required bool? IsLiked { get; set; }

    [Parameter]
    public string? Class { get; set; }

    [Parameter, EditorRequired]
    public required Func<string, Task<ApiResult<Unit>>> OnLikeClick { get; set; }

    [Parameter, EditorRequired]
    public required Func<string, Task<ApiResult<Unit>>> OnDislikeClick { get; set; }

    private async Task OnLike()
    {
        if (IsLiked == true)
            return;

        var response = await OnLikeClick.Invoke(Id);

        IsLiked = response.Match(_ => true, _ => false, () => true);
    }

    private async Task OnDislike()
    {
        if (IsLiked == false)
            return;

        var response = await OnDislikeClick.Invoke(Id);

        IsLiked = response.Match(_ => false, _ => true, () => false);
    }

}
