<EduContainer Class="@Class" MaxWidth="EduWidth.W960">
    @if (Error.Status == 404)
    {
        <div class="d-flex justify-center mb-3">
            <MudImage Class="w-max-480 w-100" Src="/images/illustration/not_found.svg"/>
        </div>
    }

    <MudText Typo="Typo.h2" Align="Align.Center">
        @($"{Error.Status}: {Error.Title}")
    </MudText>

    <MudText Class="mb-3 mb-sm-6 mud-text-secondary" Typo="Typo.body1" Align="Align.Center">
        @GetErrorDetail()
    </MudText>

    @if (Error.Payload.TryGetValue("exception", out var exception))
    {
        <MudAlert Class="mb-3 mb-sm-6" Severity="Severity.Error" NoIcon>
            @exception.ToString()
        </MudAlert>
    }

    <div class="d-flex justify-center gap-3">
        @if (Error.Status > 499)
        {
            <EduLoadingButton Color="Color.Primary"
                              DisableElevation
                              IsLoading="@_isLoading"
                              OnClick="@Reload"
                              Text="@L["Button_Reload"]"
                              Variant="Variant.Outlined"/>
        }

        <MudButton Color="Color.Primary"
                   DisableElevation
                   DisableRipple
                   Href="@EduUrl.Root"
                   Variant="Variant.Text">
            @L["BackToHome_Button"]
        </MudButton>
    </div>
</EduContainer>

@code {
    private bool _isLoading;

    [Inject]
    private NavigationManager Navigation { get; init; } = default!;

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [Parameter, EditorRequired]
    public required Error Error { get; set; }

    [Parameter]
    public EventCallback OnReloadClick { get; set; }

    [Parameter]
    public string? Class { get; set; }

    private async Task Reload()
    {
        _isLoading = true;

        try
        {
            if (OnReloadClick.HasDelegate)
            {
                await OnReloadClick.InvokeAsync();
            }
            else
            {
                Navigation.NavigateTo(Navigation.Uri, true);
            }
        }
        finally
        {
            _isLoading = false;
        }
    }

    private string GetErrorDetail() =>
        Error switch
        {
            { Detail: not null } => Error.Detail,
            { Status: 404 } => L["Error_NotFound_Description"],
            { Status: 500 } => L["Error_InternalServerError_Description"],
            _ => L["Error_Description"]
        };

}
