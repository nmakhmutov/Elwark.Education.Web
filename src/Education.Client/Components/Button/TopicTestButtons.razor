<div class="grid @Class">
    @foreach (var testType in TestTypes)
    {
        <MudButton
            Variant="Variant.Filled"
            Disabled="@IsLoading"
            Color="Color.Primary"
            OnClick="@(() => OnTestClick(testType))">
            @if (testType == _testType && IsLoading)
            {
                <div class="d-flex flex-row align-center">
                    <MudProgressCircular Class="mr-3" Size="Size.Small" Indeterminate="true"/>
                    @L["Test:Creating"]
                </div>
            }
            else
            {
                @L[$"Test:{testType}"]
            }
        </MudButton>
    }
</div>

@code {
    private TestType? _testType;

    [Inject]
    public IStringLocalizer<App> L { get; set; } = default!;

    [Parameter]
    public string? Class { get; set; }

    [Parameter, EditorRequired]
    public bool IsLoading { get; set; }

    [Parameter, EditorRequired]
    public TestType[] TestTypes { get; set; } = Array.Empty<TestType>();

    [Parameter, EditorRequired]
    public EventCallback<TestType> OnCreateTestClick { get; set; }

    private async Task OnTestClick(TestType testType)
    {
        _testType = testType;
        await OnCreateTestClick.InvokeAsync(testType);
    }

}
