<MudDialog DisableSidePadding Class="pa-0" ClassContent="pa-0">
    <DialogContent>
        <div class="container">
            <div class="ma-6">
                <MudText Typo="Typo.h4" Align="Align.Center">
                    Start today. Boost up your learning!
                </MudText>
                <MudText Typo="Typo.subtitle1" Align="Align.Center">
                    Start with premium subscription today.
                </MudText>
            </div>
            <ApiViewer Result="@_result">
                <Loading>
                    <div class="pricing-grid">
                        <SkeletonCard/>
                        <SkeletonCard/>
                    </div>
                </Loading>
                <ChildContent Context="subscriptions">
                    <div class="pricing-grid">
                        @foreach (var item in subscriptions)
                        {
                            <SubscriptionCard
                                Id="@item.Id"
                                Months="@item.Months"
                                Price="@item.Price"
                                Type="@item.Type"
                                OnBuyClick="@OnBuyClick"/>
                        }
                    </div>
                </ChildContent>
            </ApiViewer>
        </div>
    </DialogContent>
</MudDialog>

@code {

    [Inject]
    public NavigationManager Navigation { get; set; } = default!;

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = default!;

    private ApiResult<Subscription[]> _result = ApiResult<Subscription[]>.Loading();

    // protected override async Task OnInitializedAsync() =>
    // _response = await Client.Catalog.GetSubscriptions(SubjectType);

    protected override void OnInitialized() =>
        _result = ApiResult<Subscription[]>.Fail(new Error());

    private void OnBuyClick(string id)
    {
    // var response = await Client.Basket.AddItemAsync(id);
    // if (response.IsSuccess)
    // Navigation.NavigateTo(Links.Store.Checkout);
    }

    public sealed record Subscription(string Id, string Type, uint Months, long Price);

}
