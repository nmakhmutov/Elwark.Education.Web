@typeparam TValue

@if (_tooltip is null)
{
    <MudText Typo="Typo" Class="@Class" Style="@Style" Color="@Color">
        @_value
    </MudText>
}
else
{
    <MudTooltip Text="@_tooltip" Placement="@Placement">
        <MudText Typo="@Typo" Class="@Class" Style="@Style" Color="@Color">
            @_value
        </MudText>
    </MudTooltip>
}

@code {
    private string _value = string.Empty;
    private string? _tooltip;

    [Parameter, EditorRequired]
    public TValue Value { get; set; } = default!;

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public string? Style { get; set; }

    [Parameter]
    public Typo Typo { get; set; } = Typo.body1;

    [Parameter]
    public Color Color { get; set; } = Color.Inherit;

    [Parameter]
    public Placement Placement { get; set; } = Placement.Bottom;

    protected override void OnParametersSet() =>
        (_value, _tooltip) = Value switch {
            int i => (i.ToReadable(), i > 999 ? i.ToString("N0") : null),
            uint i => (i.ToReadable(), i > 999 ? i.ToString("N0") : null),
            long i => (i.ToReadable(), i > 999 ? i.ToString("N0") : null),
            ulong i => (i.ToReadable(), i > 999 ? i.ToString("N0") : null),
            double i => (i.ToReadable(), i > 999 ? i.ToString("N0") : null),
            TimeSpan t => (t.ToSimpleFormat(), null),
            DateTime d => (d.ToSimpleFormat(), null),
            string s => (s, null),
            _ => (Value?.ToString() ?? string.Empty, null)
            };

}
