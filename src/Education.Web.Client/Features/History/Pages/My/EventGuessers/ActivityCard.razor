@using ApexCharts
@using Education.Web.Client.Features.History.Services.User.Model
@using Education.Web.Client.Features.History.Services.User.Model.EventGuesser

<section class="mud-paper pa-3 pa-sm-6 @Class">
    <MudText Typo="Typo.h5">
        @Title
    </MudText>
    <ApexChart @ref="@_chart" TItem="EventGuessersStatisticsModel.ProgressModel" Options="_options">
        <ApexPointSeries
            TItem="EventGuessersStatisticsModel.ProgressModel"
            Items="Activities"
            Name="@L["History_EventGuessers_Small"]"
            Stroke="@(new SeriesStroke { Width = 3, Color = Colors.Orange.Lighten3 })"
            SeriesType="SeriesType.Area"
            XValue="@(e => e.Date.ToString(DateFormat))"
            YValue="@(x => x.Small)"/>
        
        <ApexPointSeries
            TItem="EventGuessersStatisticsModel.ProgressModel"
            Items="Activities"
            Name="@L["History_EventGuessers_Medium"]"
            Stroke="@(new SeriesStroke { Width = 3, Color = Colors.Orange.Lighten1 })"
            SeriesType="SeriesType.Area"
            XValue="@(e => e.Date.ToString(DateFormat))"
            YValue="@(x => x.Medium)"/>
        
        <ApexPointSeries
            TItem="EventGuessersStatisticsModel.ProgressModel"
            Items="Activities"
            Name="@L["History_EventGuessers_Large"]"
            Stroke="@(new SeriesStroke { Width = 3, Color = Colors.Orange.Darken2 })"
            SeriesType="SeriesType.Area"
            XValue="@(e => e.Date.ToString(DateFormat))"
            YValue="@(x => x.Large)"/>
    </ApexChart>
</section>

@code {
    private ApexChart<EventGuessersStatisticsModel.ProgressModel>? _chart;

    private ApexChartOptions<EventGuessersStatisticsModel.ProgressModel> _options = new()
    {
        Legend = new Legend
        {
            Position = LegendPosition.Top
        },
        Chart = new Chart
        {
            Width = "100%",
            Height = "350px",
            Background = "transparent",
            ForeColor = "var(--mud-palette-text-primary)"
        },
        Grid = new Grid
        {
            BorderColor = "var(--mud-palette-divider)"
        },
        Theme = new Theme()
    };

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [CascadingParameter]
    private CascadingTheme? ThemeProvider { get; set; }

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public string DateFormat { get; set; } = "dd MMM";

    [Parameter, EditorRequired]
    public EventGuessersStatisticsModel.ProgressModel[] Activities { get; set; } = Array.Empty<EventGuessersStatisticsModel.ProgressModel>();

    protected override Task OnParametersSetAsync()
    {
        var current = ThemeProvider is { IsDarkMode: true } ? Mode.Dark : Mode.Light;
        if (_options.Theme.Mode == current)
            return Task.CompletedTask;

        _options.Theme.Mode = current;
        return _chart is null ? Task.CompletedTask : _chart.RenderAsync();
    }

}