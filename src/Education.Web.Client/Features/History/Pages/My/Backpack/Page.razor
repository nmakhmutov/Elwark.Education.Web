@page "/history/my/backpack"
@using Education.Web.Client.Features.History.Services.User.Model
@using Education.Web.Client.Features.History.Services.User
@layout HistoryLayout
@attribute [Authorize]

<PageTitle>
    @L["Shared_Backpack"]
</PageTitle>

<EduContainer Class="py-3 py-sm-6" MaxWidth="EduWidth.W1920">
    <EduPageHeader Title="@L["Shared_Backpack"]" Breadcrumbs="@Breadcrumbs">
        <MudText Typo="Typo.h5">
            @_capacity
        </MudText>
    </EduPageHeader>
</EduContainer>

<ApiViewer Result="@_result" Context="model">
    <EduContainer Class="pb-3 pb-sm-6" MaxWidth="EduWidth.W1920">
        <section class="grid">
            <article class="content">
                <InventoryGrid Inventory="@model.Items" StoreHref="@HistoryUrl.Store.Index" Context="inventory">
                    <InventoryInfoCard
                        IconUrl="@inventory.IconUrl"
                        Overview="@inventory.Overview"
                        Quantity="@inventory.Quantity"
                        Subtitle="@inventory.Category.Title"
                        Title="@inventory.Title"/>
                </InventoryGrid>
            </article>
            <aside class="sidebar">
                @foreach (var item in _wallet)
                {
                    <WalletCard Wallet="@item"/>
                }
            </aside>
        </section>
    </EduContainer>
</ApiViewer>

@code {
    private ApiResult<BackpackModel> _result = ApiResult<BackpackModel>.Loading();
    private string? _capacity;
    private IReadOnlyCollection<WalletModel> _wallet = Array.Empty<WalletModel>();

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["History_Title"].Value, HistoryUrl.Root),
        new BreadcrumbItem(L["Shared_UserProfile"].Value, HistoryUrl.User.MyProfile)
    };

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryUserService UserService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        _wallet = (await UserService.GetWalletAsync())
            .Map(x => x)
            .UnwrapOr(Array.Empty<WalletModel>());

        _result = await UserService.GetBackpackAsync();
        _capacity = _result.Map(x => $"{x.Fullness} / {x.Capacity}")
            .UnwrapOr(string.Empty);
    }

}