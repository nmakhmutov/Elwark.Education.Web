@page "/history/my/quests"
@using Education.Web.Client.Features.History.Services.User.Model
@using Education.Web.Client.Features.History.Services.User
@layout HistoryLayout
@attribute [Authorize]

<PageTitle>
    @L["Quests"]
</PageTitle>

<EduContainer Class="py-3 py-sm-6" MaxWidth="EduWidth.W1920">
    <EduPageHeader Title="@L["Quests"]" Breadcrumbs="@Breadcrumbs"/>
</EduContainer>

<ApiViewer Result="@_result" Context="data">
    <EduContainer Class="pb-3 pb-sm-6" MaxWidth="EduWidth.W1920">
        <div class="grid">
            <MudTabs Class="nav" @bind-ActivePanelIndex="@_index" Rounded Centered>
                <MudTabPanel Text="Daily"/>
                <MudTabPanel Text="Weekly"/>
            </MudTabs>
            @switch (_index)
            {
                case 0:
                    <div class="quests">
                        @foreach (var quest in data.DailyQuests.Quests)
                        {
                            <QuestProgressCard Class="mb-3" Quest="@quest"/>
                        }
                    </div>

                    <div class="@(data.DailyQuests.Quests.Length == 0 ? "start" : "rewards")">
                        <QuestRewardsCard
                            Title="@L["Rewards"]"
                            Subtitle="Complete all daily missions"
                            Status="@data.DailyQuests.Status"
                            ExpiresAt="@data.DailyQuests.ExpiresAt"
                            OnStart="@StartDailyQuestsAsync"
                            OnCollect="@CollectDailyQuestsAsync"
                            OnExpired="@OnInitializedAsync"/>
                    </div>
                    break;

                case 1:
                    <div class="quests">
                        @foreach (var quest in data.WeeklyQuests.Quests)
                        {
                            <QuestProgressCard Class="mb-3" Quest="@quest"/>
                        }
                    </div>

                    <div class="@(data.WeeklyQuests.Quests.Length == 0 ? "start" : "rewards")">
                        <QuestRewardsCard
                            Title="@L["Rewards"]"
                            Subtitle="Complete all weekly missions"
                            Status="@data.WeeklyQuests.Status"
                            ExpiresAt="@data.WeeklyQuests.ExpiresAt"
                            OnStart="@StartWeeklyQuestsAsync"
                            OnCollect="@CollectWeeklyQuestsAsync"
                            OnExpired="@OnInitializedAsync"/>
                    </div>
                    break;
            }

            <div class="bonus">
                <DailyBonusCard
                    Bonus="@data.DailyBonus"
                    OnClaim="@ClaimDailyBonusAsync"
                    OnReject="@RejectDailyBonusAsync"
                    OnReached="@OnInitializedAsync"/>
            </div>
        </div>
    </EduContainer>
</ApiViewer>

@code {
    private int _index;
    private ApiResult<UserQuestModel> _result = ApiResult<UserQuestModel>.Loading();

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["History_Title"].Value, HistoryUrl.Root),
        new BreadcrumbItem(L["Shared_UserProfile"].Value, HistoryUrl.User.MyProfile)
    };

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryUserService UserService { get; set; } = default!;

    protected override async Task OnInitializedAsync() =>
        _result = await UserService.GetQuestAsync();

    private async Task ClaimDailyBonusAsync() =>
        _result = (await UserService.ClaimDailyBonusAsync())
            .Map(x => _result.Unwrap() with { DailyBonus = x });

    private async Task RejectDailyBonusAsync() =>
        _result = (await UserService.RejectDailyBonusAsync())
            .Map(x => _result.Unwrap() with { DailyBonus = x });

    private async Task StartDailyQuestsAsync() =>
        _result = (await UserService.StartDailyQuestAsync())
            .Map(x => _result.Unwrap() with { DailyQuests = x });

    private async Task CollectDailyQuestsAsync() =>
        _result = (await UserService.CollectDailyQuestAsync())
            .Map(x => _result.Unwrap() with { DailyQuests = x });

    private async Task StartWeeklyQuestsAsync() =>
        _result = (await UserService.StartWeeklyQuestAsync())
            .Map(x => _result.Unwrap() with { WeeklyQuests = x });

    private async Task CollectWeeklyQuestsAsync() =>
        _result = (await UserService.CollectWeeklyQuestAsync())
            .Map(x => _result.Unwrap() with { WeeklyQuests = x });

}