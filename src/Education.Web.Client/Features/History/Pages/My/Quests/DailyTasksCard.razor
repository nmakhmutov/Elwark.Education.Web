@using Education.Web.Client.Models.Quest
<section class="mud-paper d-flex flex-column gap-3 pa-3 pa-sm-6 @Class">
    <MudText Typo="Typo.h5">
        @L["Tasks:Daily"]
    </MudText>

    @foreach (var item in Quest.Quests)
    {
        <section class="d-flex align-center gap-3">
            <MudAvatar Class="rounded white-text" Color="@(item.IsCompleted ? Color.Success : Color.Default)" Size="Size.Medium">
                <MudIcon Icon="@Icons.Material.Outlined.Check" Size="Size.Medium"/>
            </MudAvatar>
            <div>
                <MudText Typo="Typo.subtitle1">
                    @item.Title
                </MudText>

                <MudProgressLinear
                    Class="mb-1"
                    Min="0"
                    Max="@item.Threshold"
                    Value="@item.Score"
                    Color="@(item.IsCompleted ? Color.Success : Color.Primary)"
                    Size="Size.Small"/>

                <div class="d-flex justify-space-between align-start">
                    <MetricNumber Value="@((double)item.Score / item.Threshold * 100)" Typo="Typo.body2"/>
                    <div class="d-flex align-center">
                        <MetricNumber Value="@item.Score" Typo="Typo.body2"/>
                        <div>&nbsp;/&nbsp;</div>
                        <MetricNumber Value="@item.Threshold" Typo="Typo.body2"/>
                    </div>
                </div>
            </div>
        </section>
    }

    <div class="flex-grow-1"></div>

    <section class="d-flex flex-row align-center justify-space-between gap-3">
        @switch (Quest.Status)
        {
            case QuestStatus.Completed:
                <LoadingButton
                    DisableElevation
                    Variant="@Variant.Outlined"
                    Color="@Color.Primary"
                    Text="@L["Tasks:DailyCollect"]"
                    LoadingText="@L["Loading_Title"]"
                    IsLoading="@_loading"
                    OnClick="@CollectAsync"/>
                break;

            case QuestStatus.Collected:
                <MudText Typo="@Typo.body2">
                    Already collected
                </MudText>
                break;

            case QuestStatus.Expired:
                <LoadingButton
                    DisableElevation
                    Variant="@Variant.Outlined"
                    Color="@Color.Primary"
                    Text="@L["Tasks:DailyStart"]"
                    LoadingText="@L["Loading_Title"]"
                    IsLoading="@_loading"
                    OnClick="@StartAsync"/>
                break;
        }
    </section>
</section>

@code {
    private bool _loading;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Parameter, EditorRequired]
    public QuestsModel Quest { get; set; } = default!;

    [Parameter]
    public EventCallback OnCollect { get; set; }

    [Parameter]
    public EventCallback OnStart { get; set; }

    [Parameter]
    public string? Class { get; set; }

    private async Task StartAsync()
    {
        _loading = true;
        await OnStart.InvokeAsync();
        _loading = false;
    }

    private async Task CollectAsync()
    {
        _loading = true;
        await OnCollect.InvokeAsync();
        _loading = false;
    }

}