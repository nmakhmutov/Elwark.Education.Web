@page "/history/my/achievements"
@using Education.Web.Client.Features.History.Services.User.Model
@using Education.Web.Client.Features.History.Services.User
@layout HistoryLayout
@attribute [Authorize]

<PageTitle>@L["Achievements"]</PageTitle>

<EduPageHeader Class="pa-3 pa-sm-6" Title="@L["Achievements"]" Breadcrumbs="@Breadcrumbs">
    <MudText Typo="Typo.h5">
        @_subtitle
    </MudText>
</EduPageHeader>

<ApiViewer Result="@_result" Context="achievements">
    <MudGrid Class="px-3 pb-3 px-sm-6 pb-sm-6" Spacing="0" >
        @for (var index = 0; index < achievements.Categories.Length; index++)
        {
            var category = achievements.Categories[index];
            var background = GetIconBackground(category.Name);
            var classes = index == 0 ? null : "mt-6 mt-sm-16";

            <MudItem xs="12" md="3" xl="2" Class="@classes">
                <div class="sticky-info">
                    <div class="d-flex align-end">
                        <MudText Typo="@Typo.h5">
                            @category.Title
                        </MudText>
                        <MudText Typo="@Typo.subtitle1" Class="ml-3">
                            @category.Completed/@category.Total
                        </MudText>
                    </div>

                    <MudText Typo="@Typo.body1">
                        @category.Description
                    </MudText>
                </div>
            </MudItem>

            <MudItem xs="12" md="9" xl="10" Class="@classes">
                <EduFillGrid>
                    @foreach (var achievement in category.Achievements)
                    {
                        <AchievementCard IconClass="@background" Achievement="@achievement"/>
                    }
                </EduFillGrid>
            </MudItem>
        }
    </MudGrid>
</ApiViewer>

@code {
    private string? _subtitle;

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["History"].Value, HistoryUrl.Root),
        new BreadcrumbItem(L["Profile"].Value, HistoryUrl.User.MyProfile)
    };

    private ApiResult<AchievementsModel> _result = ApiResult<AchievementsModel>.Loading();

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryUserService UserService { get; set; } = default!;

    protected override async Task OnParametersSetAsync()
    {
        _result = await UserService.GetAchievementsAsync();
        if (_result.IsSuccess)
            _subtitle = $"{_result.Value.Completed} / {_result.Value.Total}";
    }

    private static string GetIconBackground(string category) =>
        category switch {
            "EasyTests" => "blue lighten-3 white-text",
            "HardTests" => "blue lighten-1 white-text",
            "MixedTests" => "blue darken-2 white-text",
            "Tests" => "blue darken-4 white-text",

            "SmallEventGuessers" => "orange lighten-2 white-text",
            "MediumEventGuessers" => "orange lighten-1 white-text",
            "LargeEventGuessers" => "orange darken-2 white-text",
            "EventGuessers" => "orange darken-4 white-text",

            "Contests" => "green lighten-1 white-text",
            "Earnings" => "green darken-1 white-text",
            "Levels" => "green darken-2 white-text",
            "Quests" => "green darken-3 white-text",

            _ => "pink accent-4 white-text"
            };

}