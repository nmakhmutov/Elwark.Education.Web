@page "/history/my/quizzes"
@using Education.Web.Client.Features.History.Services.User.Model.Quiz
@layout HistoryLayout
@attribute [Authorize]

<PageTitle>
    @L["Quizzes_Title"]
</PageTitle>

<EduContainer Class="py-3 py-sm-6" MaxWidth="EduWidth.W1920">
    <EduPageHeader Title="@L["Quizzes_Title"]" Breadcrumbs="@Breadcrumbs"/>
</EduContainer>

<ApiViewer Result="@_result" Context="profile">
    <EduContainer Class="pb-3 pb-sm-6" MaxWidth="EduWidth.W1920">
        <EduFillGrid>
            <StatisticsCard
                Title="@L["Quizzes_Easy_Title"]"
                Value="@profile.EasyQuiz.NumberOfQuizzes.Total"
                Href="@HistoryUrl.User.MyEasyQuizzes">
                <Subheader Title="@L["Score_Title"]" Subtitle="@L["Statistics_ForAllTime"]"/>
                <ScoreChart Value="@profile.EasyQuiz.Score"/>
            </StatisticsCard>

            <StatisticsCard
                Title="@L["Quizzes_Hard_Title"]"
                Value="@profile.HardQuiz.NumberOfQuizzes.Total"
                Href="@HistoryUrl.User.MyHardQuizzes">
                <Subheader Title="@L["Score_Title"]" Subtitle="@L["Statistics_ForAllTime"]"/>
                <ScoreChart Value="@profile.HardQuiz.Score"/>
            </StatisticsCard>

            <ActivityCard
                Class="grid-column-sm-full"
                Title="@L["Activities_Daily_Title"]"
                Activities="@_daily"
                DateFormat="dd MMM"/>

            @if (_monthly.Length > 1)
            {
                <ActivityCard
                    Class="grid-column-full"
                    Title="@L["Activities_Monthly_Title"]"
                    Activities="@_monthly"
                    DateFormat="MMM yyyy"/>
            }
        </EduFillGrid>
    </EduContainer>
</ApiViewer>

@code {
    private QuizzesStatisticsModel.ProgressModel[] _daily = Array.Empty<QuizzesStatisticsModel.ProgressModel>();
    private QuizzesStatisticsModel.ProgressModel[] _monthly = Array.Empty<QuizzesStatisticsModel.ProgressModel>();
    private ApiResult<QuizzesStatisticsModel> _result = ApiResult<QuizzesStatisticsModel>.Loading();

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["History_Title"], HistoryUrl.Root),
        new BreadcrumbItem(L["User_Profile_Title"], HistoryUrl.User.MyProfile)
    };

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryLearnerService LearnerService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        _result = await LearnerService.GetQuizStatisticsAsync();
        _result.Match(model =>
        {
            var today = DateOnly.FromDateTime(DateTime.UtcNow);
            _daily = model.Daily
                .FillDailyGaps(today, x => x.Date, x => new QuizzesStatisticsModel.ProgressModel(x, 0, 0))
                .ToArray();

            _monthly = model.Monthly
                .FillMonthlyGaps(today, x => x.Date, x => new QuizzesStatisticsModel.ProgressModel(x, 0, 0))
                .ToArray();
        });
    }

}