@using ApexCharts
@using Education.Web.Client.Features.History.Services.Learner.Model.Quiz
<ApexChart @ref="@_chart" TItem="QuizStatisticsModel.DailyProgress" Options="_options" Height="@("350px")">
    <ApexPointSeries
        TItem="QuizStatisticsModel.DailyProgress"
        Items="@Progress"
        Name="@L["NumberOfQuizzes_Successful_Title"]"
        Stroke="@(new SeriesStroke { Color = Colors.Green.Accent4 })"
        SeriesType="SeriesType.Bar"
        XValue="@(e => e.Date.ToString("dd MMM"))"
        YValue="@(x => x.NumberOfQuizzes.Succeeded)"/>

    <ApexPointSeries
        TItem="QuizStatisticsModel.DailyProgress"
        Items="@Progress"
        Name="@L["NumberOfQuizzes_Failed_Title"]"
        Stroke="@(new SeriesStroke { Color = Colors.Red.Default })"
        SeriesType="SeriesType.Bar"
        XValue="@(e => e.Date.ToString("dd MMM"))"
        YValue="@(x => x.NumberOfQuizzes.Failed)"/>

    <ApexPointSeries
        TItem="QuizStatisticsModel.DailyProgress"
        Items="@Progress"
        Name="@L["NumberOfQuizzes_MistakesExceeded_Title"]"
        Stroke="@(new SeriesStroke { Color = Colors.Blue.Default })"
        SeriesType="SeriesType.Bar"
        XValue="@(e => e.Date.ToString("dd MMM"))"
        YValue="@(x => x.NumberOfQuizzes.MistakesExceeded)"/>

    <ApexPointSeries
        TItem="QuizStatisticsModel.DailyProgress"
        Items="@Progress"
        Name="@L["NumberOfQuizzes_TimeExceeded_Title"]"
        Stroke="@(new SeriesStroke { Color = Colors.DeepPurple.Default })"
        SeriesType="SeriesType.Bar"
        XValue="@(e => e.Date.ToString("dd MMM"))"
        YValue="@(x => x.NumberOfQuizzes.TimeExceeded)"/>
</ApexChart>

@code {
    private ApexChart<QuizStatisticsModel.DailyProgress>? _chart;

    private ApexChartOptions<QuizStatisticsModel.DailyProgress> _options = new()
    {
        Legend = new Legend
        {
            Show = false
        },
        Chart = new Chart
        {
            Stacked = true,
            Toolbar = new Toolbar
            {
                Show = false
            },
            Selection = new Selection
            {
                Enabled = false
            },
            Zoom = new Zoom
            {
                Enabled = false
            },
            Background = "transparent",
            ForeColor = "var(--mud-palette-text-primary)"
        },
        Grid = new Grid
        {
            BorderColor = "var(--mud-palette-divider)"
        },
        Theme = new Theme()
    };

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [CascadingParameter]
    private CascadingTheme? ThemeProvider { get; set; }

    [Parameter, EditorRequired]
    public QuizStatisticsModel.DailyProgress[] Progress { get; set; } = Array.Empty<QuizStatisticsModel.DailyProgress>();

    protected override Task OnParametersSetAsync()
    {
        var current = ThemeProvider?.IsDarkMode == true ? Mode.Dark : Mode.Light;
        if (_options.Theme.Mode == current)
            return Task.CompletedTask;

        _options.Theme.Mode = current;
        return _chart is null ? Task.CompletedTask : _chart.RenderAsync();
    }

}