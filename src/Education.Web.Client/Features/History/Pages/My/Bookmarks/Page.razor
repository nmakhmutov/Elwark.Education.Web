@page "/history/my/bookmarks"
@layout HistoryLayout
@attribute [Authorize]

<PageTitle>
    @L["Bookmarks_Title"]
</PageTitle>

<EduContainer Class="py-3 py-sm-6" MaxWidth="EduWidth.W1920">
    <EduPageHeader Title="@L["Bookmarks_Title"]" Breadcrumbs="@Breadcrumbs"/>
</EduContainer>

<EduContainer Class="pb-3 pb-sm-6" MaxWidth="EduWidth.W1920">
    <BookmarksToolbar Filter="@_filter" FilterChanged="@OnFilterChanged"/>
</EduContainer>

@switch (_filter.Catalog)
{
    case BookmarksCatalog.Articles:
        <ArticleBookmarks Sort="@_filter.Sort" />
        break;
        
    case BookmarksCatalog.Courses:
        <CourseBookmarks Sort="@_filter.Sort"/>
        break;
}

@code {
    private BookmarksFilter _filter = BookmarksFilter.Empty;

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["History_Title"], HistoryUrl.Root),
        new BreadcrumbItem(L["User_Profile_Title"], HistoryUrl.User.MyProfile)
    };

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private ILocalStorageService Storage { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        _filter = await Storage.GetItemAsync<BookmarksFilter>(HistoryLocalStorageKey.BookmarkSettings) ?? BookmarksFilter.Empty;
    }

    private async Task OnFilterChanged(BookmarksFilter filter)
    {
        _filter = filter;
        await Storage.SetItemAsync(HistoryLocalStorageKey.BookmarkSettings, filter);
    }

}