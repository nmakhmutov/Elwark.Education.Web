@page "/history/my/article/{id}"
@using Education.Web.Client.Features.History.Services.User.Model
@layout HistoryLayout
@attribute [Authorize]

<ApiViewer Result="@_result" Context="result">
    <PageTitle>
        @result.Article.Title
    </PageTitle>

    <EduContainer Class="py-3 py-sm-6" MaxWidth="EduWidth.W1280">
        <ArticleOverview
            Class="mb-3 mb-sm-6"
            Article="@result.Article"
            Breadcrumbs="@_breadcrumbs"
            IsBookmarked="@result.IsBookmarked" 
            IsCompleted="@result.IsCompleted"
            OnBookmarkClick="@UserService.ToggleArticleBookmarkAsync"
            Total="@result.Total" />

        <QuizOverview
            Title="@L["Quizzes_Easy_Title"]"
            Href="@HistoryUrl.User.MyEasyQuizzes"
            Quiz="@result.EasyQuiz"
            DateTimeFormatter="@DateTimeFormatter"/>

        <div class="py-6"></div>

        <QuizOverview
            Title="@L["Quizzes_Hard_Title"]"
            Href="@HistoryUrl.User.MyHardQuizzes"
            Quiz="@result.HardQuiz"
            DateTimeFormatter="@DateTimeFormatter"/>
    </EduContainer>
</ApiViewer>

@code {
    private List<BreadcrumbItem> _breadcrumbs = new();

    private ApiResult<ArticleStatisticsModel> _result = ApiResult<ArticleStatisticsModel>.Loading();

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryUserService UserService { get; set; } = default!;

    [CascadingParameter]
    private CustomerState Customer { get; set; } = default!;

    [Parameter]
    public string Id { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _result = await UserService.GetArticlesAsync(Id);
        _breadcrumbs = _result
            .Map(x => new List<BreadcrumbItem>
            {
                new(L["History_Title"], HistoryUrl.Root),
                new(L[x.Article.Epoch.ResourceKey()], HistoryUrl.Content.Articles(x.Article.Epoch))
            })
            .UnwrapOr(new List<BreadcrumbItem>());
    }

    private string DateTimeFormatter(DateTime date) =>
        Customer.Humanize(date);

}