@page "/history/date-guessers"
@using Education.Web.Client.Features.History.Services.DateGuesser.Model
@using Education.Web.Client.Features.History.Services.DateGuesser.Request
@using Education.Web.Client.Features.History.Services.DateGuesser
@layout HistoryLayout
@attribute [Authorize]

<PageTitle>
    @L["History_DateGuesser_Title"]
</PageTitle>

<EduContainer Class="py-3 py-sm-6">
    <EduPageHeader Title="@L["History_DateGuesser_Title"]" Breadcrumbs="@Breadcrumbs"/>
</EduContainer>

<ApiViewer Result="@_result" Context="model">
    <section class="grid px-3 pb-3 px-sm-6 pb-sm-6">
        <section class="builder">
            <MudText Typo="Typo.h6" Class="mb-3">
                @L["History_Epoch_Title"]
            </MudText>
            <EpochRadioGroup
                SelectedEpoch="@_settings.Epoch"
                SelectedEpochChanged="@OnEpochChanged"
                Class="mb-3 mb-sm-6"/>

            <MudText Typo="Typo.h6" Class="mb-3">
                @L["Quiz_Type_Title"]
            </MudText>
            <DateGuesserTypeRadioGroup
                SelectedGuesser="@_settings.Size"
                SelectedGuesserChanged="@OnSizeChanged"
                Guessers="@model.Tests"
                Class="mb-3 mb-sm-6"/>

            <div class="d-flex justify-center">
                <LoadingButton
                    DisableElevation
                    Size="Size.Large"
                    Color="Color.Primary"
                    Variant="Variant.Filled"
                    Text="@L["History_DateGuesser_TakeTheGuesser"]"
                    LoadingText="@L["Loading_Title"]"
                    IsLoading="@_isLoading"
                    Disabled="@(model.Tests.All(x => !x.IsAllowed))"
                    OnClick="@CreateTestAsync"/>
            </div>
        </section>

        <section class="inventory">
            <MudText Typo="Typo.h6" Class="mb-3">
                @L["History_DateGuesser_Equipment"]
            </MudText>
            <InventoryGrid Inventory="@model.Inventory" StoreHref="@HistoryUrl.Store.Index" Context="inventory">
                <InventoryInfoCard
                    Title="@inventory.Title"
                    Overview="@inventory.Overview"
                    Quantity="@inventory.Quantity"
                    IconUrl="@inventory.IconUrl"/>
            </InventoryGrid>
        </section>
    </section>
</ApiViewer>

@code {
    private bool _isLoading;
    private Settings _settings = new(EpochType.None, null);
    private ApiResult<DateGuesserBuilderModel> _result = ApiResult<DateGuesserBuilderModel>.Loading();

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["History_Title"], HistoryUrl.Root)
    };

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryDateGuesserService DateGuesserService { get; set; } = default!;

    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    [Inject]
    private ILocalStorageService Storage { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        _settings = await Storage.GetItemAsync<Settings>(HistoryLocalStorageKey.DateGuesserSettings) ?? _settings;
        _result = await DateGuesserService.GetAsync();

        await _result.MatchAsync(async model =>
        {
            if (!model.Tests.Any(x => x.IsAllowed && x.Type == _settings.Size))
                await OnSizeChanged(model.Tests.FirstOrDefault(x => x.IsAllowed)?.Type);
        });

        _result.MathError(x =>
        {
            if (x.IsDateGuesserAlreadyCreated(out var id))
                Navigation.NavigateTo(HistoryUrl.DateGuesser.Test(id));
        });
    }

    private async Task CreateTestAsync()
    {
        if (string.IsNullOrEmpty(_settings.Size))
            return;

        _isLoading = true;

        var request = new CreateRequest(_settings.Size, _settings.Epoch);
        (await DateGuesserService.CreateAsync(request))
            .Match(
                x => Navigation.NavigateTo(HistoryUrl.DateGuesser.Test(x.Id)),
                e => Snackbar.Add(e.Detail, Severity.Error)
            );

        _isLoading = false;
    }

    private async Task OnEpochChanged(EpochType epoch)
    {
        _settings = _settings with { Epoch = epoch };
        await Storage.SetItemAsync(HistoryLocalStorageKey.DateGuesserSettings, _settings);
    }

    private async Task OnSizeChanged(string? type)
    {
        _settings = _settings with { Size = type };
        await Storage.SetItemAsync(HistoryLocalStorageKey.DateGuesserSettings, _settings);
    }

    private sealed record Settings(EpochType Epoch, string? Size);

}