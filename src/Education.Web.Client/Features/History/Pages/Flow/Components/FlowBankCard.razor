<section class="mud-paper pa-3 pa-sm-6 @Class">
    <div class="d-flex justify-space-between align-center gap-3 mb-3">
        <MudText Typo="Typo.body1">
            @L["Flow_Streak_Title"]
        </MudText>
        <div class="d-flex align-center">
            <MudIcon Class="mud-text-secondary" Icon="@Icons.Material.Filled.Whatshot"/>
            <MudText Typo="Typo.body1">
                @Streak
            </MudText>
        </div>
    </div>

    <div class="d-flex justify-space-between align-center gap-3 mb-3">
        <MudText Typo="Typo.body1">
            @L["Flow_Bank_Title"]
        </MudText>
        <div class="d-flex gap-3">
            @if (Bank.Length == 0)
            {
                <MudText Class="mud-text-secondary" Typo="Typo.body1">
                    @L["Flow_Bank_Empty"]
                </MudText>
            }
            else
            {
                <InternalMonies Monies="@Bank" Horizontal/>
            }
        </div>
    </div>

    <div class="d-flex justify-end">
        <LoadingButton
            Variant="Variant.Filled"
            Color="Color.Primary"
            IsLoading="@_isLoading"
            Text="@L["Flow_CollectBank"]"
            LoadingText="@L["Loading_Title"]"
            OnClick="@OnCollectBank"
            Disabled="@(Bank.Length == 0)"
            DisableElevation/>
    </div>
</section>

@code {
    private bool _isLoading;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Parameter, EditorRequired]
    public uint Streak { get; set; }

    [Parameter, EditorRequired]
    public InternalMoneyModel[] Bank { get; set; } = Array.Empty<InternalMoneyModel>();

    [Parameter, EditorRequired]
    public EventCallback OnBankCollectClick { get; set; }

    [Parameter]
    public string? Class { get; set; }

    private async Task OnCollectBank()
    {
        _isLoading = true;
        
        try
        {
            await OnBankCollectClick.InvokeAsync();
        }
        finally
        {
            _isLoading = false;
        }
    }

}