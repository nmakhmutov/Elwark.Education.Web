@page "/history/search"
@using Education.Web.Client.Features.History.Services.Search.Request
@using Education.Web.Client.Features.History.Services.Search.Model
@using Education.Web.Client.Features.History.Services.Search
@layout HistoryLayout

<PageTitle>History: @Query</PageTitle>

<ApiViewer Result="_result" Context="result">
    <EduContainer Class="py-3 py-sm-6">
        <EduFillGrid Class="mb-6 mb-sm-12">
            @foreach (var hint in result.Hints)
            {
                <MudText Typo="Typo.subtitle1">
                    @hint.Title
                </MudText>
            }
        </EduFillGrid>

        <MudPagination
            Class="d-flex justify-center py-3 py-sm-6"
            Selected="@CurrentPage"
            SelectedChanged="@OnPagination"
            Count="@TotalPages"
            Rectangular
            DisableElevation/>
    </EduContainer>
</ApiViewer>

@code {
    private SearchRequest _request = new("", true, Array.Empty<string>(), 0, 20);
    private ApiResult<SearchResultModel> _result = ApiResult<SearchResultModel>.Loading();

    [Inject]
    private IHistorySearchService HistorySearchService { get; set; } = default!;

    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    [Parameter, SupplyParameterFromQuery(Name = "q")]
    public string? Query { get; set; }

    [Parameter, SupplyParameterFromQuery(Name = "page")]
    public int CurrentPage { get; set; }

    private int TotalPages => _result.IsSuccess
        ? (int)double.Ceiling((double)_result.Value.Count / _request.Limit)
        : 1;

    protected override async Task OnParametersSetAsync()
    {
        if (CurrentPage < 1)
            CurrentPage = 1;

        if (string.IsNullOrEmpty(Query) || Query.Length < 2)
        {
            _result = ApiResult<SearchResultModel>.Success(new SearchResultModel(Enumerable.Empty<SearchModel>(), new Dictionary<string, int>(), 0));
            return;
        }

        _request = _request with { Q = Query, Offset = (CurrentPage - 1) * _request.Limit};

        _result = await HistorySearchService.SearchAsync(_request);
    }

    private void OnPagination(int page)
    {
        CurrentPage = page;

        var url = Navigation.GetUriWithQueryParameters(new Dictionary<string, object?>
        {
            ["q"] = Query,
            ["page"] = CurrentPage
        });

        Navigation.NavigateTo(url);
    }

}