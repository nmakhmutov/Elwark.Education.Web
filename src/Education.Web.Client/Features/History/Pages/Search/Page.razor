@page "/history/search"
@using Education.Web.Client.Features.History.Services.Search.Request
@using Education.Web.Client.Features.History.Services.Search.Model
@using Education.Web.Client.Features.History.Services.Search
@layout HistoryLayout

<PageTitle>
    History: @Query
</PageTitle>

<ApiViewer Result="_result" Context="result">
    <EduContainer Class="py-3 py-sm-6">
        <EduFillGrid Class="mb-6 mb-sm-12">
            @foreach (var hint in result.Hints)
            {
                <SearchCard Search="@hint"/>
            }
        </EduFillGrid>

        <MudPagination
            Class="d-flex justify-center py-3 py-sm-6"
            Selected="@CurrentPage"
            SelectedChanged="@OnPagination"
            Count="@TotalPages"
            Rectangular
            DisableElevation/>
    </EduContainer>
</ApiViewer>

@code {
    private readonly SearchRequest _request = new(string.Empty, true, Array.Empty<string>(), 0, 20);
    private ApiResult<SearchResultModel> _result = ApiResult<SearchResultModel>.Loading();

    [Inject]
    private IHistorySearchService HistorySearchService { get; set; } = default!;

    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    [Parameter, SupplyParameterFromQuery(Name = "q")]
    public string? Query { get; set; }

    [Parameter, SupplyParameterFromQuery(Name = "page")]
    public int CurrentPage { get; set; }

    private int TotalPages => _result.IsSuccess
        ? (int)double.Ceiling((double)_result.Value.Count / _request.Limit)
        : 1;

    protected override async Task OnParametersSetAsync()
    {
        if (CurrentPage < 1)
            CurrentPage = 1;

        _result = Query is { Length: > 1 }
            ? await HistorySearchService
                .SearchAsync(_request with { Q = Query, Offset = (CurrentPage - 1) * _request.Limit})
            : ApiResult<SearchResultModel>.Success(
                new SearchResultModel(Enumerable.Empty<SearchModel>(), new Dictionary<string, int>(), 0)
                );
    }

    private void OnPagination(int page)
    {
        _result = ApiResult<SearchResultModel>.Loading();
        Navigation.NavigateTo(Navigation.GetUriWithQueryParameter("page", page));
    }

}