@page "/history/articles"
@using Education.Web.Client.Features.History.Services.Article.Request
@using Education.Web.Client.Models
@layout HistoryLayout

<PageTitle>
    @L["Shared_Articles"]
</PageTitle>

<EduContainer Class="py-3 py-sm-6">
    <section class="header">
        <EduPageHeader Class="title" Title="@L["Shared_Articles"]" Breadcrumbs="@Breadcrumbs"/>

        <MudSelect T="EpochType"
                   Value="@_epoch"
                   ValueChanged="@OnEpochChange"
                   Label="@L["History_Epoch"]"
                   Margin="Margin.Dense"
                   Variant="Variant.Text">
            <MudSelectItem Value="@EpochType.None">
                @L["History_EpochAny"]
            </MudSelectItem>
            @foreach (var epoch in EpochTypeExtensions.List[1..])
            {
                <MudSelectItem Value="@epoch">
                    @L[$"History_Epoch{epoch.ToFastString()}"]
                </MudSelectItem>
            }
        </MudSelect>

        <MudSelect T="GetArticlesRequest.SortType"
                   Value="@_sort"
                   ValueChanged="@OnSortChange"
                   Label="@L["Shared_Sort"]"
                   Margin="Margin.Dense"
                   Variant="Variant.Text">
            <MudSelectItem Value="@GetArticlesRequest.SortType.Newest">
                @L["Shared_ResentArticles"]
            </MudSelectItem>
            <MudSelectItem Value="@GetArticlesRequest.SortType.Trending">
                @L["Shared_TrendingArticles"]
            </MudSelectItem>
            <MudSelectItem Value="@GetArticlesRequest.SortType.Popularity">
                @L["Shared_TopRatedArticles"]
            </MudSelectItem>
        </MudSelect>
    </section>
</EduContainer>

<ApiViewer Result="_result" Context="result">
    <EduContainer>
        <EduFillGrid Class="mb-6 mb-sm-12">
            @foreach (var (article, activity) in result.Items)
            {
                <ArticleCard
                    Article="@article"
                    Activity="@activity"
                    OnBookmarkClick="@UserService.ToggleArticleBookmarkAsync"/>
            }
        </EduFillGrid>

        <MudPagination
            Class="d-flex justify-center py-3 py-sm-6"
            Rectangular
            DisableElevation
            Selected="@CurrentPage"
            SelectedChanged="@OnPagination"
            Count="@TotalPages"/>
    </EduContainer>
</ApiViewer>

@code {
        private const int Limit = 20;
    private EpochType _epoch;
    private GetArticlesRequest.SortType _sort;

    private ApiResult<PagingOffsetModel<UserArticleOverviewModel>> _result =
        ApiResult<PagingOffsetModel<UserArticleOverviewModel>>.Loading();

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["History_Title"].Value, HistoryUrl.Root)
    };

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryArticleService ArticleService { get; set; } = default!;

    [Inject]
    private IHistoryUserService UserService { get; set; } = default!;

    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    [Parameter, SupplyParameterFromQuery(Name = "epoch")]
    public string? EpochString { get; set; }

    [Parameter, SupplyParameterFromQuery(Name = "sort")]
    public string? SortString { get; set; }

    [Parameter, SupplyParameterFromQuery(Name = "page")]
    public int CurrentPage { get; set; }

    private int TotalPages =>
        _result.Map(x => (int)double.Ceiling((double)x.Count / Limit))
            .UnwrapOr(1);

    protected override async Task OnParametersSetAsync()
    {
        _result = ApiResult<PagingOffsetModel<UserArticleOverviewModel>>.Loading();

        if (CurrentPage < 1)
            CurrentPage = 1;

        _sort = GetSort();
        _epoch = GetEpoch();

        _result = await ArticleService
            .GetAsync(new GetArticlesRequest(_epoch, _sort, (CurrentPage - 1) * Limit, Limit));
    }

    private void OnPagination(int page)
    {
        _result = ApiResult<PagingOffsetModel<UserArticleOverviewModel>>.Loading();
        var value = page < 2 ? (int?)null : page;

        Navigation.NavigateTo(Navigation.GetUriWithQueryParameter("page", value));
    }

    private void OnEpochChange(EpochType epoch)
    {
        _result = ApiResult<PagingOffsetModel<UserArticleOverviewModel>>.Loading();
        var value = epoch == EpochType.None ? null : epoch.ToFastString().ToLowerInvariant();

        Navigation.NavigateTo(Navigation.GetUriWithQueryParameter("epoch", value));
    }

    private void OnSortChange(GetArticlesRequest.SortType sort)
    {
        _result = ApiResult<PagingOffsetModel<UserArticleOverviewModel>>.Loading();

        Navigation.NavigateTo(Navigation.GetUriWithQueryParameter("sort", sort.ToString().ToLowerInvariant()));
    }

    private EpochType GetEpoch()
    {
        Enum.TryParse<EpochType>(EpochString, true, out var value);
        return value;
    }

    private GetArticlesRequest.SortType GetSort()
    {
        Enum.TryParse<GetArticlesRequest.SortType>(SortString, true, out var value);
        return value;
    }

}