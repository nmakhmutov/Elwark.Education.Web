@using Education.Web.Client.Features.History.Services
@using Education.Web.Client.Features.History.Services.Article.Model
@using Education.Web.Client.Models.Content

<EduContainer Class="pa-0 pb-3 pb-sm-6" MaxWidth="EduWidth.W1920">
    <div class="header">
        <div class="preamble">
            <div class="image">
                <img class="fluid object-cover object-center mb-3" src="@Person.ImageUrl" alt="@Person.Title"/>

                @if (Person.Born is not null || Person.Died is not null)
                {
                    <PersonLivespan Born="@Person.Born" Died="@Person.Died" DateTimeFormatter="@DateTimeFormatter"/>
                }
            </div>
        </div>

        <div class="content pa-3 pa-sm-6">
            <h1 class="title mb-3">
                @Person.Title
            </h1>

            <Breadcrumbs Class="pa-0 mb-3" Items="@Breadcrumbs"/>

            <MudText Class="w-max-960 mb-3" Typo="Typo.subtitle1">
                @Person.Description
            </MudText>

            @if (Person.Details.Length > 0)
            {
                <div class="details">
                    @foreach (var (title, text) in Person.Details)
                    {
                        <div>
                            <MudText Class="title" Typo="Typo.subtitle1" Color="Color.Tertiary">
                                @title
                            </MudText>
                            <StyledMarkupString Content="@text" DisableParagraphIndent/>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</EduContainer>

<EduContainer Class="pb-3 pb-sm-6" MaxWidth="EduWidth.W1440">
    <section class="grid">
        <ArticleFormatingCard Class="toolbar"/>

        <ArticleContentCard Class="content" Content="@Person.Content"/>

        <ArticleTestCard Class="test" ArticleId="@Person.Id" HasTest="@HasTest" UserActivity="@UserActivity"/>

        <ArticleUserCard
            Class="rating"
            ArticleId="@Person.Id"
            Rating="@Rating"
            UserActivity="@UserActivity"
            OnBookmarkClick="@OnBookmarkClick"
            OnLikeClick="@OnLikeClick"
            OnDislikeClick="@OnDislikeClick"/>
    </section>

    @if (RelatedArticles.Length > 0)
    {
        <MudText Typo="Typo.h5" Class="mt-3 mt-sm-6 mb-3">
            @L["Articles:Related"]
        </MudText>
        <EduFillGrid>
            @foreach (var (article, activity) in RelatedArticles)
            {
                <ArticleCard
                    Article="@article"
                    Activity="@activity"
                    OnBookmarkClick="@OnBookmarkClick"/>
            }
        </EduFillGrid>
    }
</EduContainer>

@code {

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["History_Title"], HistoryUrl.Root),
        new BreadcrumbItem(L[$"History_Epoch{Person.Epoch.ToFastString()}"], HistoryUrl.Content.Epoch(Person.Epoch))
    };

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [CascadingParameter]
    private CustomerState Customer { get; set; } = default!;

    [Parameter, EditorRequired]
    public ArticleDetail.PersonModel Person { get; set; } = default!;

    [Parameter, EditorRequired]
    public ContentRatingModel Rating { get; set; } = default!;

    [Parameter, EditorRequired]
    public UserActivityOverviewModel UserActivity { get; set; } = default!;

    [Parameter, EditorRequired]
    public bool HasTest { get; set; }

    [Parameter, EditorRequired]
    public UserArticleOverviewModel[] RelatedArticles { get; set; } = Array.Empty<UserArticleOverviewModel>();

    [Parameter, EditorRequired]
    public Func<Task<bool>> OnLikeClick { get; set; } = () => Task.FromResult(false);

    [Parameter, EditorRequired]
    public Func<Task<bool>> OnDislikeClick { get; set; } = () => Task.FromResult(false);

    [Parameter, EditorRequired]
    public Func<string, Task<bool>> OnBookmarkClick { get; set; } = _ => Task.FromResult(false);

    private string DateTimeFormatter(DateTime date) =>
        Customer.Humanize(date);

}