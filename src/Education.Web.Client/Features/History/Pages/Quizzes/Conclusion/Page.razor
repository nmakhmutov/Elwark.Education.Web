@page "/history/quizzes/{id}/conclusion"
@layout HistoryLayout
@attribute [Authorize]

<ApiViewer Result="@_result" Context="conclusion">
    <PageTitle>
        @L[$"Quiz_{conclusion.Type}_Title"]: @conclusion.Article.Title
    </PageTitle>
    
    <MudAlert Class="mb-6 mb-sm-12" Severity="@GetColor(conclusion.Status)" ContentAlignment="HorizontalAlignment.Center" Square>
        @L[$"ConclusionStatus_{conclusion.Status}"]
    </MudAlert>

    <CompletedStars Class="mb-6" Progress="@conclusion.TotalScore.Scaled"/>

    @if (conclusion.Rewards.Length > 0)
    {
        <RewardsContainer Class="py-3 py-sm-6" MaxWidth="EduWidth.W1280" Rewards="@conclusion.Rewards"/>
    }

    <EduContainer Class="pa-3 pa-sm-6" MaxWidth="EduWidth.W1280">
        <div class="mb-3">
            <MudLink Href="@HistoryUrl.User.MyArticle(conclusion.Article.Id)" Typo="Typo.h5">
                @L["Statistics_Title"]
            </MudLink>
        </div>
        <ConclusionCharts ConclusionModel="@conclusion"/>
    </EduContainer>

    <EduContainer Class="pa-3 pa-sm-6" MaxWidth="EduWidth.W1280">
        <div class="mb-3">
            <MudLink Href="@HistoryUrl.Content.Article(conclusion.Article.Id)" Typo="Typo.h5">
                @conclusion.Article.Title
            </MudLink>
        </div>
        <MudTable Class="mb-3 mb-sm-6" Items="@conclusion.Questions" Breakpoint="Breakpoint.Xs" Elevation="0" Hover>
            <HeaderContent>
                <MudTh>@L["Question_Title"]</MudTh>
                <MudTh>@L["Question_IsAnswered"]</MudTh>
                <MudTh>@L["Question_Correct"]</MudTh>
                <MudTh>@L["Question_Incorrect"]</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="@L["Question_Title"]">
                    @context.Title
                </MudTd>
                <MudTd DataLabel="@L["Question_IsAnswered"]">
                    <MudIcon
                        Size="Size.Small"
                        Icon="@(context.IsAnswered ? Icons.Material.Outlined.Check : Icons.Material.Outlined.Close)"/>
                </MudTd>
                <MudTd DataLabel="@L["Question_Correct"]">
                    @context.Correct
                </MudTd>
                <MudTd DataLabel="@L["Question_Incorrect"]">
                    @context.Incorrect
                </MudTd>
            </RowTemplate>
            <FooterContent>
                <MudTh/>
                <MudTh>
                    @conclusion.Questions.Count(x => x.IsAnswered) / @conclusion.Questions.Length
                </MudTh>
                <MudTh>
                    @conclusion.Questions.Sum(x => x.Correct) / @conclusion.Questions.Length
                </MudTh>
                <MudTh>
                    @conclusion.Questions.Sum(x => x.Incorrect) / @conclusion.Questions.Length
                </MudTh>
            </FooterContent>
        </MudTable>

        <div class="d-flex justify-center">
            <MudButton
                Href="@HistoryUrl.ArticleQuiz.Index(conclusion.Article.Id)"
                Color="Color.Primary"
                Variant="Variant.Filled"
                DisableElevation>
                @L["Quiz_TakeTheQuizAgain"]
            </MudButton>
        </div>
    </EduContainer>
</ApiViewer>

@code {
    private ApiResult<QuizConclusionModel> _result = ApiResult<QuizConclusionModel>.Loading();

    [Inject]
    private IHistoryQuizService QuizService { get; set; } = default!;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    [Parameter]
    public string Id { get; set; } = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        _result = await QuizService.GetConclusionAsync(Id);

        if (_result.IsError && _result.UnwrapError().IsTestNotFound())
            Navigation.NavigateTo(HistoryUrl.ArticleQuiz.Index());
    }

    private static Severity GetColor(QuizStatus status) =>
        status switch 
        {
            QuizStatus.Succeeded => Severity.Success,
            QuizStatus.Failed => Severity.Error,
            QuizStatus.TimeExceeded => Severity.Warning,
            QuizStatus.MistakesExceeded => Severity.Warning,
            _ => Severity.Info
            };

}