<section class="@Class">
    <MudText Class="mb-3" Typo="Typo.h6">
        @L["History_Epoch_Title"]
    </MudText>
    <EpochRadioGroup
        SelectedEpoch="@Epoch"
        SelectedEpochChanged="@EpochChanged"
        Class="mb-3 mb-sm-6"/>

    <MudText Class="mb-3" Typo="Typo.h6">
        @L["Quiz_Type_Title"]
    </MudText>
    <QuizDifficultyRadioGroup
        SelectedDifficulty="@Difficulty"
        SelectedDifficultyChanged="@DifficultyChanged"
        Quizzes="@Quizzes"
        Class="mb-3 mb-sm-6"/>

    <div class="d-flex justify-center">
        <LoadingButton
            DisableElevation
            Color="Color.Primary"
            Variant="Variant.Filled"
            Size="Size.Large"
            Text="@L["Quiz_TakeTheQuiz"]"
            LoadingText="@L["Loading_Title"]"
            IsLoading="@_isLoading"
            Disabled="@(Quizzes.All(x => !x.IsAllowed))"
            OnClick="@CreateTestAsync"/>
    </div>
</section>

@code {
    private bool _isLoading;

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [Parameter, EditorRequired]
    public required QuizInformationModel[] Quizzes { get; set; }

    [Parameter]
    public DifficultyType? Difficulty { get; set; }

    [Parameter]
    public EventCallback<DifficultyType?> DifficultyChanged { get; set; }

    [Parameter]
    public EpochType Epoch { get; set; }

    [Parameter]
    public EventCallback<EpochType> EpochChanged { get; set; }

    [Parameter, EditorRequired]
    public required EventCallback<CreateEpochQuizRequest> OnCreateClick { get; set; }

    [Parameter]
    public string? Class { get; set; }

    protected override Task OnInitializedAsync() =>
        Quizzes.Any(x => x.IsAllowed && x.Type == Difficulty)
            ? Task.CompletedTask
            : DifficultyChanged.InvokeAsync(Quizzes.FirstOrDefault(x => x.IsAllowed)?.Type);

    private async Task CreateTestAsync()
    {
        if (!Difficulty.HasValue)
            return;

        _isLoading = true;
        
        try
        {
            await OnCreateClick.InvokeAsync(new CreateEpochQuizRequest(Difficulty.Value, Epoch));
        }
        finally
        {
            _isLoading = false;
        }
    }
}