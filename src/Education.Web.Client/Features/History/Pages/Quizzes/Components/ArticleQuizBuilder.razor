<section class="@Class">
    <div class="mb-3 mb-sm-6">
        <MudText Typo="Typo.h6" Class="mb-3">
            @L["Article_Title"]
        </MudText>

        <ArticleCard
            Article="@Article"
            Activity="@Activity"
            OnBookmarkClick="@OnBookmarkClick"
            Horizontal/>
    </div>

    <div class="mb-3 mb-sm-6">
        @if (Quizzes.Length > 0)
        {
            <MudText Typo="Typo.h6" Class="mb-3">
                @L["Quiz_Type_Title"]
            </MudText>

            <QuizDifficultyRadioGroup
                SelectedDifficulty="@Difficulty"
                SelectedDifficultyChanged="@DifficultyChanged"
                Quizzes="@Quizzes" Class="mb-6"/>

            <div class="d-flex justify-center">
                <LoadingButton
                    DisableElevation
                    Color="Color.Primary"
                    Variant="Variant.Filled"
                    Size="Size.Large"
                    Text="@L["Quiz_TakeTheQuiz"]"
                    LoadingText="@L["Loading_Title"]"
                    IsLoading="@_isLoading"
                    Disabled="@(Quizzes.All(x => !x.IsAllowed))"
                    OnClick="@CreateTestAsync"/>
            </div>
        }
        else
        {
            <MudText Typo="Typo.subtitle1" Align="Align.Center" Color="Color.Warning">
                @L["Quiz_NotAvailableForArticle", Article.Title]
            </MudText>
        }
    </div>
</section>

@code {
    private bool _isLoading;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Parameter, EditorRequired]
    public ArticleOverviewModel Article { get; set; } = default!;

    [Parameter, EditorRequired]
    public UserArticleActivityModel Activity { get; set; } = default!;

    [Parameter, EditorRequired]
    public QuizInformationModel[] Quizzes { get; set; } = Array.Empty<QuizInformationModel>();

    [Parameter]
    public DifficultyType? Difficulty { get; set; }

    [Parameter]
    public EventCallback<DifficultyType?> DifficultyChanged { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<CreateArticleQuizRequest> OnCreateClick { get; set; }

    [Parameter]
    public Func<string, Task<ApiResult<bool>>> OnBookmarkClick { get; set; } = _ => Task.FromResult(ApiResult<bool>.Success(false));

    [Parameter]
    public string? Class { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Quizzes.Any(x => x.IsAllowed && x.Type == Difficulty))
            return;

        await DifficultyChanged.InvokeAsync(Quizzes.FirstOrDefault(x => x.IsAllowed)?.Type);
    }

    private async Task CreateTestAsync()
    {
        if (!Difficulty.HasValue)
            return;

        _isLoading = true;
        await OnCreateClick.InvokeAsync(new CreateArticleQuizRequest(Difficulty.Value, Article.Id));
        _isLoading = false;
    }

}