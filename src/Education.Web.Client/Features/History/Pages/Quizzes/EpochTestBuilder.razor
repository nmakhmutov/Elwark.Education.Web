@using Education.Web.Client.Models
@using Education.Web.Client.Features.History.Services.Quiz.Model
@using Education.Web.Client.Features.History.Services.Quiz.Request

<section class="@Class">
    <MudText Class="mb-3" Typo="Typo.h6">
        @L["History_Epoch"]
    </MudText>
    <EpochRadioGroup
        SelectedEpoch="@HistorySettings.TestEpoch"
        SelectedEpochChanged="@HistorySettings.ChangeTestEpochAsync"
        Class="mb-3 mb-sm-6"/>

    <MudText Class="mb-3" Typo="Typo.h6">
        @L["Test:Type"]
    </MudText>
    <QuizTypeRadioGroup
        SelectedTest="@HistorySettings.QuizType"
        SelectedTestChanged="@(x => HistorySettings.ChangeTestTypeAsync(x))"
        Tests="@Tests"
        Class="mb-3 mb-sm-6"/>

    <div class="d-flex justify-center">
        <LoadingButton
            DisableElevation
            Color="Color.Primary"
            Variant="Variant.Filled"
            Size="Size.Large"
            Text="@L["Shared_TakeTheTest"]"
            LoadingText="@L["Loading"]"
            IsLoading="@_isLoading"
            Disabled="@(Tests.All(x => !x.IsAllowed))"
            OnClick="@CreateTestAsync"/>
    </div>
</section>

@code {
    private bool _isLoading;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [CascadingParameter]
    private CascadingHistorySettings HistorySettings { get; set; } = default!;

    [Parameter, EditorRequired]
    public QuizInformationModel[] Tests { get; set; } = Array.Empty<QuizInformationModel>();

    [Parameter, EditorRequired]
    public EventCallback<CreateEpochTestRequest> OnCreateClick { get; set; }

    [Parameter]
    public string? Class { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Tests.Any(x => x.IsAllowed && x.Type == HistorySettings.QuizType))
            return;

        await HistorySettings.ChangeTestTypeAsync(Tests.FirstOrDefault(x => x.IsAllowed)?.Type);
    }

    private async Task CreateTestAsync()
    {
        if (!HistorySettings.QuizType.HasValue)
            return;

        _isLoading = true;
        await OnCreateClick.InvokeAsync(new CreateEpochTestRequest(HistorySettings.QuizType.Value, HistorySettings.TestEpoch));
        _isLoading = false;
    }

}