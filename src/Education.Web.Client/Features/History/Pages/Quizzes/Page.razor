@page "/history/quizzes"
@layout HistoryLayout
@attribute [Authorize]

<PageTitle>
    @L["Quizzes_Title"]
</PageTitle>

<EduContainer Class="py-3 py-sm-6">
    <EduPageHeader Title="@L["Quizzes_Title"]" Breadcrumbs="@Breadcrumbs"/>
</EduContainer>

<ApiViewer Result="@_result" Context="model">
    <section class="grid px-3 pb-3 px-sm-6 pb-sm-6">
        @if (model.Article is null)
        {
            <EpochQuizBuilder
                Class="builder"
                Quizzes="@model.Quizzes"
                Epoch="@_settings.Epoch"
                EpochChanged="@OnEpochChanged"
                Difficulty="@_settings.Difficulty"
                DifficultyChanged="@OnDifficultyChanged"
                OnCreateClick="@OnQuizCreateAsync"/>
        }
        else
        {
            <ArticleQuizBuilder
                Class="builder"
                Quizzes="@model.Quizzes"
                Article="@model.Article.Article"
                Activity="@model.Article.Activity"
                Difficulty="@_settings.Difficulty"
                DifficultyChanged="@OnDifficultyChanged"
                OnCreateClick="@OnQuizCreateAsync"
                OnBookmarkClick="@LearnerService.ToggleArticleBookmarkAsync"/>
        }

        <section class="inventory">
            <MudText Typo="Typo.h6" Class="mb-3">
                @L["Quiz_Equipment_Title"]
            </MudText>
            <InventoryGrid Inventory="@model.Inventories" StoreHref="@HistoryUrl.Store.Index" Context="item">
                <InventoryInfoCard
                    Title="@item.Title"
                    Overview="@item.Overview"
                    Quantity="@item.Quantity"
                    IconUrl="@item.IconUrl"/>
            </InventoryGrid>
        </section>
    </section>
</ApiViewer>

@code {
    private Settings _settings = new(EpochType.None, null);
    private ApiResult<QuizBuilderModel> _result = ApiResult<QuizBuilderModel>.Loading();

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["History_Title"], HistoryUrl.Root)
    };

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryQuizService QuizService { get; set; } = default!;

    [Inject]
    private IHistoryLearnerService LearnerService { get; set; } = default!;

    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    [Inject]
    private ILocalStorageService Storage { get; set; } = default!;

    [Parameter, SupplyParameterFromQuery(Name = "article")]
    public string? ArticleId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _settings = await Storage.GetItemAsync<Settings>(HistoryLocalStorageKey.QuizSettings) ?? _settings;
        _result = await QuizService.GetTestBuilderAsync(ArticleId);

        if (_result.IsError && _result.UnwrapError().IsTestAlreadyCreated(out var id))
            Navigation.NavigateTo(HistoryUrl.ArticleQuiz.Test(id));
    }

    private async Task OnQuizCreateAsync(CreateEpochQuizRequest request) =>
        (await QuizService.CreateAsync(request))
            .Match(
                x => Navigation.NavigateTo(HistoryUrl.ArticleQuiz.Test(x.Overview.Id)),
                e => Snackbar.Add(e.Detail, Severity.Error)
            );
    
    private async Task OnQuizCreateAsync(CreateArticleQuizRequest request) =>
        (await QuizService.CreateAsync(request))
            .Match(
                x => Navigation.NavigateTo(HistoryUrl.ArticleQuiz.Test(x.Overview.Id)),
                e => Snackbar.Add(e.Detail, Severity.Error)
            );

    private async Task OnEpochChanged(EpochType epoch)
    {
        _settings = _settings with { Epoch = epoch };
        await Storage.SetItemAsync(HistoryLocalStorageKey.QuizSettings, _settings);
    }

    private async Task OnDifficultyChanged(DifficultyType? difficulty)
    {
        _settings = _settings with { Difficulty = difficulty };
        await Storage.SetItemAsync(HistoryLocalStorageKey.QuizSettings, _settings);
    }

    private sealed record Settings(EpochType Epoch, DifficultyType? Difficulty);

}