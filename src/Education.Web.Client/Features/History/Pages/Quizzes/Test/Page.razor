@page "/history/quizzes/{id}"
@layout HistoryLayout
@attribute [Authorize]

<PageTitle>
    @_result.Match(x => $"{_testTypeTitle}: {x.Overview.Article.Title}", e => e.Title, () => L["Quizzes_Title"])
</PageTitle>

<ApiViewer Result="@_result" Context="quiz">
    <EduContainer Class="py-3 py-sm-6" MaxWidth="EduWidth.W1280">
        <section class="grid">
            <header class="timer">
                <section class="d-flex flex-wrap justify-space-between gap-3">
                    <MudText Typo="Typo.subtitle1">
                        @L["Quiz_QuestionOutOf", _quiz.Completed, _quiz.Questions]
                    </MudText>
                    <CountdownTimer
                        Deadline="@_quiz.ExpiredAt"
                        Color="@_countdownColor"
                        OnComplete="@OnExpired"/>
                </section>
                <MudProgressLinear
                    Rounded
                    Min="0"
                    Max="100"
                    Value="@Progress"
                    Color="Color.Primary"
                    Size="Size.Medium"/>
            </header>

            <QuestionForm
                Class="quiz mud-paper pa-3 pa-sm-6"
                Question="@_currentQuestion"
                CorrectAnswer="@_correctAnswer"
                OnAnswerClick="@OnAnswer"
                OnNextTitle="@(_nextQuestion is null ? L["Quiz_ShowTheResult"] : L["Question_Next"])"
                OnNextClick="@OnNext">
                <Header>
                    <MudText Class="d-block mud-text-secondary" Typo="Typo.caption" Align="Align.Center">
                        @_testTypeTitle
                    </MudText>
                    <MudText Class="mb-3 mb-sm-6" Typo="Typo.h5" Align="Align.Center">
                        @quiz.Overview.Article.Title
                    </MudText>
                </Header>
            </QuestionForm>

            <InventoryGrid Class="inventory" Inventory="@_inventory" Context="item">
                @if (item.IsInteractive)
                {
                    <InventoryButtonCard
                        Id="@item.Id"
                        Quantity="@item.Quantity"
                        Title="@item.Title"
                        Overview="@item.Overview"
                        IconUrl="@item.IconUrl"
                        ButtonText="@L["Inventory_Use"]"
                        OnClick="@OnUseInventory"/>
                }
                else
                {
                    <InventoryInfoCard
                        Title="@item.Title"
                        Overview="@item.Overview"
                        Quantity="@item.Quantity"
                        IconUrl="@item.IconUrl"/>
                }
            </InventoryGrid>
        </section>
    </EduContainer>
</ApiViewer>

@code {
    private ApiResult<QuizModel> _result = ApiResult<QuizModel>.Loading();
    private TestInventoryModel[] _inventory = Array.Empty<TestInventoryModel>();
    private Color _countdownColor = Color.Default;
    private QuizOverviewModel _quiz = default!;
    private Question _currentQuestion = default!;
    private Question? _nextQuestion;
    private AnswerResult? _correctAnswer;
    private string _testTypeTitle = string.Empty;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryQuizService QuizService { get; set; } = default!;

    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    [Parameter]
    public string Id { get; set; } = string.Empty;

    private double Progress =>
        (double)_quiz.Completed / _quiz.Questions * 100;

    protected override async Task OnInitializedAsync()
    {
        _result = await QuizService.GetAsync(Id);
        _result.Match(
            x =>
            {
                _quiz = x.Overview;
                _currentQuestion = x.Question;
                _inventory = x.Inventory;
                _testTypeTitle = L[$"Quiz_{_quiz.Type}_Title"];
            },
            e =>
            {
                if (e.IsQuizAlreadyCompleted() || e.IsQuizNotFound())
                    Navigation.NavigateTo(HistoryUrl.Quiz.Conclusion(Id));
            });
    }

    private async Task OnExpired()
    {
        _countdownColor = Color.Error;
        _result = await QuizService.GetAsync(Id);

        if (_result.IsError)
            Navigation.NavigateTo(HistoryUrl.Quiz.Conclusion(Id));
    }

    private async Task OnAnswer(AnswerToQuestionModel answer)
    {
        var result = await QuizService.CheckAsync(_quiz.Id, _currentQuestion.Id, answer);
        UpdateState(result);
    }

    private void UpdateState(ApiResult<QuizAnswerModel> result) =>
        result.Match(
            x =>
            {
                _quiz = x.Overview;
                _inventory = x.Inventory;
                _nextQuestion = x.NextQuestion;
                _correctAnswer = x.Answer;

                StateHasChanged();
            },
            e =>
            {
                if (e.IsQuizAlreadyCompleted())
                    Navigation.NavigateTo(HistoryUrl.Quiz.Conclusion(Id));
                else
                    Snackbar.Add(e.Detail, Severity.Error);
            });

    private void OnNext()
    {
        if (_nextQuestion is null)
        {
            Navigation.NavigateTo(HistoryUrl.Quiz.Conclusion(Id));
            return;
        }

        _currentQuestion = _nextQuestion;
        _nextQuestion = null;
        _correctAnswer = null;

        StateHasChanged();
    }

    private async Task OnUseInventory(uint id) =>
        (await QuizService.ApplyInventoryAsync(_quiz.Id, id))
            .Match(
                x =>
                {
                    if (x.Question is null)
                    {
                        Navigation.NavigateTo(HistoryUrl.Quiz.Conclusion(Id));
                        return;
                    }

                    _quiz = x.Overview;
                    _currentQuestion = x.Question;
                    _inventory = x.Inventory;
                },
                e => Snackbar.Add(e.Detail, Severity.Error)
            );

}