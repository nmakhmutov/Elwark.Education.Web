@page "/history/quizzes/{id}"
@using Education.Web.Client.Features.History.Services.Quiz.Model
@using Education.Web.Client.Models.Inventory
@using Education.Web.Client.Models.Quiz
@layout HistoryLayout
@attribute [Authorize]

<PageTitle>
    @_result.Match(x => $"{_testTypeTitle}: {x.Overview.Article.Title}", e => e.Title, () => L["Shared_Quizzes"])
</PageTitle>

@switch (_result.Status)
{
    case Status.Loading:
        <Spinner/>
        break;

    case Status.Error:
        <EduError Error="@_result.UnwrapError()"/>
        break;

    case Status.Success:
        <EduContainer Class="py-3 py-sm-6" MaxWidth="EduWidth.W1280">
            <section class="grid">
                <div>
                    <section class="mud-paper pa-3 pa-sm-6">
                        <MudText Class="d-block mud-text-secondary" Typo="Typo.caption" Align="Align.Center">
                            @_testTypeTitle
                        </MudText>
                        <MudText Class="mb-3 mb-sm-6" Typo="Typo.h5" Align="Align.Center" Style="font-weight: 500">
                            @_result.Value.Overview.Article.Title
                        </MudText>

                        @if (_currentQuestion.Image is not null)
                        {
                            <img class="image mb-3 mb-sm-6" src="@_currentQuestion.Image" alt="@_currentQuestion.Title"/>
                        }

                        <MudText Class="mb-6" Typo="Typo.subtitle1" Align="Align.Center">
                            @_currentQuestion.Title
                        </MudText>

                        @switch (_currentQuestion)
                        {
                            case QuizQuestion.MultipleModel question:
                            {
                                <MultipleAnswerForm
                                    IsLoading="@_checking"
                                    IsTestCompleted="@IsCompleted"
                                    CorrectAnswer="@(_correctAnswer as AnswerResult.MultipleModel)"
                                    UserAnswer="@(_userAnswer as MultipleAnswerModel ?? new MultipleAnswerModel())"
                                    Options="@question.Options"
                                    OnAnswer="@OnMultiplyAnswer"
                                    OnNext="@OnNext"
                                    OnComplete="@OnComplete"/>
                                break;
                            }

                            case QuizQuestion.ShortModel:
                            {
                                <ShortAnswerForm
                                    IsLoading="@_checking"
                                    IsTestCompleted="@IsCompleted"
                                    CorrectAnswer="@(_correctAnswer as AnswerResult.ShortModel)"
                                    UserAnswer="@(_userAnswer as ShortAnswerModel ?? new ShortAnswerModel())"
                                    OnAnswer="@OnShortAnswer"
                                    OnNext="@OnNext"
                                    OnComplete="@OnComplete"/>
                                break;
                            }

                            case QuizQuestion.SingleModel question:
                            {
                                <SingleAnswerForm
                                    IsLoading="@_checking"
                                    IsTestCompleted="@IsCompleted"
                                    CorrectAnswer="@(_correctAnswer as AnswerResult.SingleModel)"
                                    UserAnswer="@(_userAnswer as SingleAnswerModel ?? new SingleAnswerModel())"
                                    Options="@question.Options"
                                    OnAnswer="@OnSingleAnswer"
                                    OnNext="@OnNext"
                                    OnComplete="@OnComplete"/>
                                break;
                            }

                            default:
                                throw new ArgumentOutOfRangeException(nameof(_currentQuestion));
                        }
                    </section>
                </div>

                <aside>
                    <section class="mb-6">
                        <header class="d-flex justify-space-between">
                            <MudText Typo="Typo.subtitle1">
                                @L["Shared_QuizCompletedQuestionOutOf", _quiz.Completed, _quiz.Questions]
                            </MudText>
                            <CountdownTimer Date="@_quiz.ExpiredAt" Color="@_countdownColor" OnComplete="@OnExpired"/>
                        </header>
                        <MudProgressLinear
                            Rounded
                            Min="0"
                            Max="100"
                            Value="@Progress"
                            Color="Color.Primary"
                            Size="Size.Medium"/>
                    </section>
                    <InventoryGrid Inventory="@(_inventory.OrderByDescending(x => x.IsInteractive))" Context="item">
                        @if (item.IsInteractive)
                        {
                            <InventoryButtonCard
                                Id="@item.Id"
                                Quantity="@item.Quantity"
                                Title="@item.Title"
                                Overview="@item.Overview"
                                IconUrl="@item.IconUrl"
                                ButtonText="@L["Inventory:Use"]"
                                OnClick="@OnUseInventory"/>
                        }
                        else
                        {
                            <InventoryInfoCard
                                Title="@item.Title"
                                Overview="@item.Overview"
                                Quantity="@item.Quantity"
                                IconUrl="@item.IconUrl"/>
                        }
                    </InventoryGrid>
                </aside>
            </section>
        </EduContainer>
        break;
}

@code {
    private ApiResult<QuizModel> _result = ApiResult<QuizModel>.Loading();
    private TestInventoryModel[] _inventory = Array.Empty<TestInventoryModel>();
    private Color _countdownColor = Color.Default;
    private QuizOverviewModel _quiz = default!;
    private QuizQuestion _currentQuestion = default!;
    private QuizQuestion? _nextQuestion;
    private AnswerToQuestionModel? _userAnswer;
    private AnswerResult? _correctAnswer;
    private bool _checking;
    private string _testTypeTitle = string.Empty;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryQuizService QuizService { get; set; } = default!;

    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    [Parameter]
    public string Id { get; set; } = string.Empty;

    private double Progress =>
        (double)_quiz.Completed / _quiz.Questions * 100;

    private bool IsCompleted =>
        _quiz.Completed == _quiz.Questions;

    protected override async Task OnParametersSetAsync()
    {
        _result = await QuizService.GetAsync(Id);
        _result.Match(
            x =>
            {
                _quiz = x.Overview;
                _currentQuestion = x.Question;
                _inventory = x.Inventory;
                _testTypeTitle = L[$"Shared_Quiz{_quiz.Type}"];
            },
            e =>
            {
                if (e.IsTestAlreadyCompleted())
                    Navigation.NavigateTo(HistoryUrl.ArticleQuiz.Conclusion(Id));

                if (e.IsTestNotFound())
                    Navigation.NavigateTo(HistoryUrl.ArticleQuiz.Conclusion(Id));
            });
    }

    private async Task OnExpired()
    {
        _countdownColor = Color.Error;
        _result = await QuizService.GetAsync(Id);

        if (_result.IsError)
            Navigation.NavigateTo(HistoryUrl.ArticleQuiz.Conclusion(Id));
    }

    private async Task OnShortAnswer(ShortAnswerModel answer)
    {
        _checking = true;
        _userAnswer = answer;

        var result = await QuizService.CheckAsync(_quiz.Id, _currentQuestion.Id, answer);
        UpdateState(result);

        _checking = false;
    }

    private async Task OnSingleAnswer(SingleAnswerModel answer)
    {
        _checking = true;
        _userAnswer = answer;

        var result = await QuizService.CheckAsync(_quiz.Id, _currentQuestion.Id, answer);
        UpdateState(result);

        _checking = false;
    }

    private async Task OnMultiplyAnswer(MultipleAnswerModel answer)
    {
        _checking = true;
        _userAnswer = answer;

        var result = await QuizService.CheckAsync(_quiz.Id, _currentQuestion.Id, answer);
        UpdateState(result);

        _checking = false;
    }

    private void UpdateState(ApiResult<QuizAnswerModel> result) =>
        result.Match(
            x =>
            {
                _quiz = x.Overview;
                _inventory = x.Inventory;
                _nextQuestion = x.NextQuestion;
                _correctAnswer = x.Answer;

                StateHasChanged();
            },
            e =>
            {
                if (e.IsTestAlreadyCompleted())
                {
                    Navigation.NavigateTo(HistoryUrl.ArticleQuiz.Conclusion(Id));
                }
                else
                {
                    Snackbar.Add(e.Detail, Severity.Error);
                }
            });

    private void OnNext()
    {
        if (_nextQuestion is null)
            return;

        _currentQuestion = _nextQuestion;
        _nextQuestion = null;
        _userAnswer = null;
        _correctAnswer = null;

        StateHasChanged();
    }

    private void OnComplete() =>
        Navigation.NavigateTo(HistoryUrl.ArticleQuiz.Conclusion(Id));

    private async Task OnUseInventory(uint id) =>
        (await QuizService.ApplyInventoryAsync(_quiz.Id, id))
            .Match(
                x =>
                {
                    if (x.Question is null)
                    {
                        Navigation.NavigateTo(HistoryUrl.ArticleQuiz.Conclusion(Id));
                        return;
                    }

                    _quiz = x.Overview;
                    _currentQuestion = x.Question;
                    _inventory = x.Inventory;
                },
                e => Snackbar.Add(e.Detail, Severity.Error)
            );

}