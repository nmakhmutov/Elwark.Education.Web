@page "/history/store"
@using Education.Web.Client.Features.History.Services.User.Model
@using Education.Web.Client.Features.History.Services.Store.Model
@using Education.Web.Client.Features.History.Services.User
@using Education.Web.Client.Features.History.Services.Store
@layout HistoryLayout
@attribute [Authorize]

<PageTitle>@L["Inventory:Store"]</PageTitle>

<EduContainer Class="py-3 py-sm-6" MaxWidth="EduWidth.W1920">
    <EduPageHeader Title="@L["Inventory:Store"]" Breadcrumbs="@Breadcrumbs">
        @if (_wallet is not null)
        {
            <section class="d-flex gap-3 gap-sm-6">
                <section class="d-flex align-center ">
                    <MudIcon Class="mr-1" Icon="@EduIcons.Silver" Size="Size.Small"/>
                    <MetricNumber Typo="Typo.subtitle1" Value="@_wallet.Silver"/>
                </section>
                <section class="d-flex align-center ">
                    <MudIcon Class="mr-1" Icon="@EduIcons.Backpack"/>
                    <div class="d-flex align-center">
                        <MetricNumber
                            Color="@(_wallet.Backpack.Fullness > _wallet.Backpack.Capacity ? Color.Error : Color.Default)"
                            Typo="Typo.subtitle1"
                            Value="@_wallet.Backpack.Fullness"/>
                        <MudText Typo="Typo.subtitle1">/</MudText>
                        <MetricNumber Typo="Typo.subtitle1" Value="@_wallet.Backpack.Capacity"/>
                    </div>
                </section>
            </section>
        }
    </EduPageHeader>
</EduContainer>

<ApiViewer Result="@_products" Context="products">
    <EduContainer Class="pb-3 pb-sm-6" MaxWidth="EduWidth.W1920">
        <section class="grid">
            @foreach (var product in products)
            {
                <ProductCard 
                    Product="@product" 
                    ShowLockBadge="@(!IsPossibleToBuy(product))" 
                    OnPurchaseClick="@OpenPurchaseDialog"/>
            }
        </section>
    </EduContainer>
</ApiViewer>

@code {
    private WalletModel? _wallet;
    private ApiResult<ProductModel[]> _products = ApiResult<ProductModel[]>.Loading();

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["Subject:History"].Value, HistoryUrl.Root)
    };

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryStoreService StoreService { get; set; } = default!;

    [Inject]
    private IHistoryUserService UserService { get; set; } = default!;

    [Inject]
    private IDialogService DialogService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await UpdateWallet();
        _products = await StoreService.GetAsync();
    }

    private async Task UpdateWallet()
    {
        var wallet = await UserService.GetWalletAsync();
        if (wallet.IsSuccess)
            _wallet = wallet.Value;
    }

    private async Task OpenPurchaseDialog(ProductModel product)
    {
        if(_wallet is null)
            return;

        var options = new DialogOptions
        {
            FullWidth = true,
            MaxWidth = product.Inventories.Length > 3 ? MaxWidth.Medium : MaxWidth.Small,
            CloseButton = false,
            NoHeader = true
        };

        var parameters = new DialogParameters
        {
            [nameof(ProductDialog.Product)] = product,
            [nameof(ProductDialog.Wallet)] = _wallet
        };

        var dialog = await DialogService.ShowAsync<ProductDialog>(product.Title, parameters, options);
        var result = await dialog.Result;
        if (result.Canceled)
            return;

        await UpdateWallet();
    }

    private bool IsPossibleToBuy(ProductModel product)
    {
        if (_wallet is null) 
            return false;

        if (product.InventoryWeight > _wallet.Backpack.Emptiness)
            return false;

        if (product.Selling.Total.Amount > _wallet.Silver)
            return false;

        return true;
    }
}