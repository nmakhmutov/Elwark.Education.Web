@page "/history/store"
@using Education.Web.Client.Features.History.Services.User.Model

@layout HistoryLayout
@attribute [Authorize]

<PageTitle>
    @L["InventoryStore_Title"]
</PageTitle>

<EduContainer Class="py-3 py-sm-6" MaxWidth="EduWidth.W1920">
    <EduPageHeader Title="@L["InventoryStore_Title"]"/>
</EduContainer>

<EduContainer Class="pb-3 pb-sm-6" MaxWidth="EduWidth.W1920">
    <ProductsToolbar @bind-Filter="@(_filter)" Inventory="@_inventory"/>
</EduContainer>

@switch (_filter.Catalog)
{
    case CatalogType.Inventory:
        <InventoryProducts
            Inventory="@_inventory"
            Filter="@_filter"
            IsAffordable="@IsInventoryAffordable"
            OnProductPurchased="@OnInventoryPurchased"/>
        break;

    case CatalogType.Bundles:
        <BundleProducts
            Inventory="@_inventory"
            Filter="@_filter"
            IsAffordable="@IsBundleAffordable"
            OnProductPurchased="@OnBundlePurchased"/>
        break;
}

@code {
    private ProductsFilter _filter = ProductsFilter.Empty;
    private InventoryModel _inventory = new(new Dictionary<InternalCurrency, long>(), new InventoryModel.BackpackModel(0, 0, 0));

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryUserService UserService { get; set; } = default!;

    protected override Task OnInitializedAsync() =>
        LoadInventoryAsync();

    private async Task LoadInventoryAsync() =>
        _inventory = (await UserService.GetInventoryAsync())
            .Map(x => x)
            .UnwrapOr(_inventory);

    private Task OnInventoryPurchased() =>
        LoadInventoryAsync();

    private Task OnBundlePurchased() =>
        LoadInventoryAsync();

    private bool IsInventoryAffordable(Product.InventoryModel inventory) =>
        IsAffordable(inventory.Selling, inventory.Weight);

    private bool IsBundleAffordable(Product.BundleModel bundle) =>
        IsAffordable(bundle.Price, bundle.Weight);

    private bool IsAffordable(Product.PriceModel price, uint weight)
    {
        if (weight > _inventory.Backpack.Emptiness)
            return false;

        if (_inventory.Wallet.TryGetValue(price.Total.Currency, out var amount))
            return amount >= price.Total.Amount;

        return false;
    }

}