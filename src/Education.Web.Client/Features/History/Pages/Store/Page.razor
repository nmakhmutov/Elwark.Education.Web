@page "/history/store"
@using Education.Web.Client.Features.History.Services.User.Model
@using Education.Web.Client.Features.History.Services.Store.Model
@using Education.Web.Client.Features.History.Services.User
@using Education.Web.Client.Features.History.Services.Store

@layout HistoryLayout
@attribute [Authorize]

<PageTitle>@L["Inventory:Store"]</PageTitle>

<EduContainer Class="py-3 py-sm-6" MaxWidth="EduWidth.W1920">
    <EduPageHeader Title="@L["Inventory:Store"]" Breadcrumbs="@Breadcrumbs">
        @if (_wallet is not null)
        {
            <section class="d-flex gap-3 gap-sm-6">
                <section class="d-flex align-center ">
                    <MudIcon Class="mr-1" Icon="@EduIcons.Silver" Size="Size.Small"/>
                    <MetricNumber Typo="Typo.subtitle1" Value="@_wallet.Silver"/>
                </section>
                <section class="d-flex align-center ">
                    <MudIcon Class="mr-1" Icon="@EduIcons.Backpack"/>
                    <div class="d-flex align-center">
                        <MetricNumber
                            Color="@(_wallet.Backpack.Fullness > _wallet.Backpack.Capacity ? Color.Error : Color.Default)"
                            Typo="Typo.subtitle1"
                            Value="@_wallet.Backpack.Fullness"/>
                        <MudText Typo="Typo.subtitle1">/</MudText>
                        <MetricNumber Typo="Typo.subtitle1" Value="@_wallet.Backpack.Capacity"/>
                    </div>
                </section>
            </section>
        }
    </EduPageHeader>
</EduContainer>

<EduContainer Class="pb-3 pb-sm-6" Paper MaxWidth="EduWidth.W1920">
    <div class="d-flex flex-wrap align-center gap-3 pa-3">
        <MudCheckBox @bind-Checked="@_affordable" Label="Only affordable"/>
        <MudCheckBox @bind-Checked="@_discountOnly" Label="Discount only"/>

        <MudSpacer/>
        <div class="sort">
            <MudSelect @bind-Value="@_sort" Label="Sort">
                <MudSelectItem Value="@Sort.PriceAsc">Price asc</MudSelectItem>
                <MudSelectItem Value="@Sort.PriceDesc">Price desc</MudSelectItem>
                <MudSelectItem Value="@Sort.DiscountAsc">Discount asc</MudSelectItem>
                <MudSelectItem Value="@Sort.DiscountDesc">Discount desc</MudSelectItem>
                <MudSelectItem Value="@Sort.NameAsc">Name asc</MudSelectItem>
                <MudSelectItem Value="@Sort.NameDesc">Name desc</MudSelectItem>
            </MudSelect>
        </div>
    </div>
</EduContainer>

<ApiViewer Result="@_response" Context="products">
    <EduContainer Class="pb-3 pb-sm-6" MaxWidth="EduWidth.W1920">
        <section class="grid">
            @{ var filtered = Filter(products); }
            @if (filtered.Count > 0)
            {
                foreach (var product in filtered)
                {
                    <ProductCard
                        Product="@product.Product"
                        ShowLockBadge="@(!product.IsAffordable)"
                        OnPurchaseClick="@OpenPurchaseDialog"/>
                }
            }
        </section>
    </EduContainer>
</ApiViewer>

@code {
    private bool _affordable;
    private bool _discountOnly;
    private Sort _sort;

    private WalletModel? _wallet;
    private ApiResult<IQueryable<ProductData>> _response = ApiResult<IQueryable<ProductData>>.Loading();

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["Subject:History"].Value, HistoryUrl.Root)
    };

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryStoreService StoreService { get; set; } = default!;

    [Inject]
    private IHistoryUserService UserService { get; set; } = default!;

    [Inject]
    private IDialogService DialogService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadWalletAsync();
        await LoadProductsAsync();
    }

    private async Task LoadWalletAsync()
    {
        var wallet = await UserService.GetWalletAsync();
        if (wallet.IsFailed)
        {
            _response = ApiResult<IQueryable<ProductData>>.Fail(wallet.Error);
            return;
        }

        _wallet = wallet.Value;
    }

    private async Task LoadProductsAsync()
    {
        var products = await StoreService.GetAsync();
        if (products.IsFailed)
        {
            _response = ApiResult<IQueryable<ProductData>>.Fail(products.Error);
            return;
        }

        var data = products.Value.Select(x => new ProductData(x, IsAffordable(x)));
        _response = ApiResult<IQueryable<ProductData>>.Success(new EnumerableQuery<ProductData>(data));
    }

    private async Task OpenPurchaseDialog(ProductModel product)
    {
        if (_wallet is null)
            return;

        var options = new DialogOptions
        {
            FullWidth = true,
            MaxWidth = product.Inventories.Length > 3 ? MaxWidth.Medium : MaxWidth.Small,
            CloseButton = false,
            NoHeader = true
        };

        var parameters = new DialogParameters
        {
            [nameof(ProductDialog.Product)] = product,
            [nameof(ProductDialog.Wallet)] = _wallet
        };

        var dialog = await DialogService.ShowAsync<ProductDialog>(product.Title, parameters, options);
        var result = await dialog.Result;
        if (result.Canceled)
            return;

        await OnInitializedAsync();
    }

    private bool IsAffordable(ProductModel product)
    {
        if (_wallet is null)
            return false;

        if (product.InventoryWeight > _wallet.Backpack.Emptiness)
            return false;

        if (product.Selling.Total.Amount > _wallet.Silver)
            return false;

        return true;
    }

    private ICollection<ProductData> Filter(IQueryable<ProductData> queryable)
    {
        if (_discountOnly)
            queryable = queryable.Where(x => x.Product.Selling.Discount > 0);

        if (_affordable)
            queryable = queryable.Where(x => x.IsAffordable);

        queryable = _sort switch {
            Sort.PriceAsc => queryable.OrderBy(x => x.Product.Selling.Total.Amount),
            Sort.PriceDesc => queryable.OrderByDescending(x => x.Product.Selling.Total.Amount),
            Sort.DiscountAsc => queryable.OrderBy(x => x.Product.Selling.Discount),
            Sort.DiscountDesc => queryable.OrderByDescending(x => x.Product.Selling.Discount),
            Sort.NameAsc => queryable.OrderBy(x => x.Product.Title),
            Sort.NameDesc => queryable.OrderByDescending(x => x.Product.Title),
            _ => throw new ArgumentOutOfRangeException()
            };

        return queryable.ToArray();
    }

    private sealed record ProductData(ProductModel Product, bool IsAffordable);

    private enum Sort
    {
        PriceAsc,
        PriceDesc,
        DiscountAsc,
        DiscountDesc,
        NameAsc,
        NameDesc
    }

}