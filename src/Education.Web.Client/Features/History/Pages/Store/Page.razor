@page "/history/store"
@using Education.Web.Client.Features.History.Services.User.Model
@using Education.Web.Client.Features.History.Services.Store
@using Education.Web.Client.Features.History.Services.Store.Model
@using Education.Web.Client.Features.History.Services.User

@layout HistoryLayout
@attribute [Authorize]

<PageTitle>@L["Inventory:Store"]</PageTitle>

<EduContainer Class="py-3 py-sm-6" MaxWidth="EduWidth.W1920">
    <section class="wallet">
        @if (_wallet is not null)
        {
            foreach (var money in _wallet.Monies)
            {
                <section class="d-flex align-center">
                    <MudIcon Class="mr-1" Icon="@EduIcons.Silver" Size="Size.Small"/>
                    <MetricNumber Typo="Typo.subtitle1" Value="@money.Value"/>
                </section>    
            }
            
            <section class="d-flex align-center">
                <MudIcon Class="mr-1" Icon="@EduIcons.Backpack" Size="Size.Small"/>
                <div class="d-flex align-center">
                    <MetricNumber
                        Color="@(_wallet.Backpack.Fullness > _wallet.Backpack.Capacity ? Color.Error : Color.Default)"
                        Typo="Typo.subtitle1"
                        Value="@_wallet.Backpack.Fullness"/>
                    <MudText Typo="Typo.subtitle1">/</MudText>
                    <MetricNumber Typo="Typo.subtitle1" Value="@_wallet.Backpack.Capacity"/>
                </div>
            </section>
        }
        else
        {
            <section class="d-flex align-center">
                <MudSkeleton Class="mr-1" SkeletonType="SkeletonType.Circle" Width="20px" Height="20px"/>
                <MudSkeleton SkeletonType="SkeletonType.Text" Width="36px" Height="20px"/>
            </section>
        }
    </section>

    <ProductToolbar FilterChanged="@ApplyFilter"/>
</EduContainer>

@if (_isLoading)
{
    <Spinner/>
}
else if (_error is not null)
{
    <EduError Error="@_error"/>
}
else
{
    <EduContainer Class="pb-3 pb-sm-6" MaxWidth="EduWidth.W1920">
        @if (_filtered.Count > 0)
        {
            <section class="products">
                @foreach (var product in _filtered)
                {
                    <ProductCard
                        Product="@product.Product"
                        ShowLockBadge="@(!product.IsAffordable)"
                        OnPurchaseClick="@OpenPurchaseDialog"/>
                }
            </section>
        }
        else
        {
            <EduEmpty Title="No products"/>
        }
    </EduContainer>
}

@code {
    private bool _isLoading = true;
    private Error? _error;
    private WalletModel? _wallet;
    private IQueryable<ProductData> _source = new EnumerableQuery<ProductData>(Enumerable.Empty<ProductData>());
    private IReadOnlyCollection<ProductData> _filtered = Array.Empty<ProductData>();

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryStoreService StoreService { get; set; } = default!;

    [Inject]
    private IHistoryUserService UserService { get; set; } = default!;

    [Inject]
    private IDialogService DialogService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var wallet = await UserService.GetWalletAsync();
        if (wallet.IsSuccess)
        {
            _wallet = wallet.Value;
        }
        else
        {
            _error = wallet.Error;
            return;
        }

        var products = await StoreService.GetAsync();
        if (products.IsFailed)
        {
            _error = products.Error;
            return;
        }

        _source = products.Value
            .Select(x => new ProductData(x, IsAffordable(wallet.Value, x)))
            .AsQueryable();

        _filtered = _source.Apply(ProductsFilter.Empty);

        _isLoading = false;
    }

    private async Task OpenPurchaseDialog(ProductModel product)
    {
        if (_wallet is null)
            return;

        var options = new DialogOptions
        {
            FullWidth = true,
            MaxWidth = product.Inventories.Length > 3 ? MaxWidth.Medium : MaxWidth.Small,
            CloseButton = false,
            NoHeader = true
        };

        var parameters = new DialogParameters
        {
            [nameof(ProductDialog.Product)] = product,
            [nameof(ProductDialog.Wallet)] = _wallet
        };

        var dialog = await DialogService.ShowAsync<ProductDialog>(product.Title, parameters, options);
        var result = await dialog.Result;
        if (result.Canceled)
            return;

        await OnInitializedAsync();
    }

    private void ApplyFilter(ProductsFilter filter)
    {
        _filtered = _source.Apply(filter);
    }

    private static bool IsAffordable(WalletModel wallet, ProductModel product)
    {
        if (product.InventoryWeight > wallet.Backpack.Emptiness)
            return false;

        if (wallet.Monies.TryGetValue(product.Selling.Total.Currency, out var amount))
            return amount >= product.Selling.Total.Amount;

        return false;
    }

}