@using Education.Web.Client.Features.History.Clients.Store.Model
@using Education.Web.Client.Features.History.Clients.User.Model
@using Education.Web.Client.Features.History.Clients.Store
@using Education.Web.Client.Models.Inventory
@using Education.Web.Client.Clients
<ApiViewer Result="@_result" OnReloadClick="@OnInitializedAsync">
    <ChildContent Context="bundles">
        <ProductsGrid Products="@ApplyFilter(bundles)">
            <ChildContent Context="bundle">
                <BundleCard
                    Bundle="@bundle"
                    ShowLockBadge="@(!IsAffordable(bundle))"
                    OnPurchaseClick="@OpenPurchaseDialog"/>
            </ChildContent>
            <NoRecordsContent>
                <NoContent
                    Icon="@Icons.Material.Outlined.ShoppingBag"
                    Title="@L["InventoryStore_Bundles_NotFound"]"
                    Subtitle="@L["InventoryStore_TryToResetYourFilter"]"/>
            </NoRecordsContent>
        </ProductsGrid>
    </ChildContent>
    <Loading>
        <ProductsGrid Products="@(Enumerable.Range(0, 6).ToArray())">
            <InventorySkeletonCard>
                <div class="d-flex justify-space-between align-center mt-6">
                    <MudSkeleton SkeletonType="SkeletonType.Circle" Width="24px" Height="24px"/>
                    <MudIconButton Icon="@Icons.Material.Outlined.ShoppingCart" Variant="Variant.Filled" Disabled/>
                </div>
            </InventorySkeletonCard>
        </ProductsGrid>
    </Loading>
</ApiViewer>

@code {
    private ApiResult<Product.BundleModel[]> _result = ApiResult<Product.BundleModel[]>.Loading();

    [Inject]
    private IHistoryStoreClient StoreClient { get; init; } = default!;

    [Inject]
    private IDialogService DialogService { get; init; } = default!;

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [Parameter, EditorRequired]
    public required ProfileModel Profile { get; set; }

    [Parameter, EditorRequired]
    public required ProductsFilter Filter { get; set; }

    [Parameter, EditorRequired]
    public required Func<Product.BundleModel, bool> IsAffordable { get; set; }

    [Parameter]
    public EventCallback<Product.BundleModel> OnProductPurchased { get; set; }

    protected override async Task OnInitializedAsync() =>
        _result = await StoreClient.GetBundlesAsync();

    private async Task OpenPurchaseDialog(Product.BundleModel product)
    {
        var options = new DialogOptions
        {
            FullWidth = true,
            MaxWidth = product.Inventories.Length > 3 ? MaxWidth.Medium : MaxWidth.Small,
            CloseButton = false,
            NoHeader = true
        };

        var parameters = new DialogParameters
        {
            [nameof(BundleDialog.Product)] = product,
            [nameof(BundleDialog.Profile)] = Profile
        };

        var dialog = await DialogService.ShowAsync<BundleDialog>(product.Title, parameters, options);
        var result = await dialog.Result;
        if (result.Canceled)
            return;

        await OnProductPurchased.InvokeAsync(product);
    }

    private Product.BundleModel[] ApplyFilter(IEnumerable<Product.BundleModel> source)
    {
        if (Filter.Category != CategoryType.None)
            source = source.Where(x => x.Inventories.Any(t => t.Category == Filter.Category));

        if (!string.IsNullOrEmpty(Filter.Search))
            source = source.Where(x => x.Title.Contains(Filter.Search, StringComparison.OrdinalIgnoreCase));

        return source.ToArray();
    }

}