@using Education.Web.Client.Features.History.Services.Order.Model
@using Education.Web.Client.Features.History.Services.Order.Request
@using Education.Web.Client.Features.History.Services.User.Model
<MudDialog Class="pa-3 pa-sm-6" ClassContent="pa-0" ClassActions="pa-0" DisableSidePadding>
    <DialogContent>
        <header class="d-flex justify-space-between align-center mb-3 mb-sm-6">
            <div class="d-flex flex-column">
                <MudText Typo="Typo.h5">
                    @Product.Title
                </MudText>
                <MudText Typo="Typo.body1">
                    @Product.Overview
                </MudText>
            </div>

            <MudIconButton Icon="@Icons.Material.Outlined.Close" OnClick="@OnCloseClick"/>
        </header>

        <div class="mud-background rounded pa-3 mb-3 mb-sm-6">
            <MudText Class="mb-3" Typo="Typo.subtitle1">
                @L["Product_Inventories"]
            </MudText>
            <InventoryGrid Inventory="@Product.Inventories" Context="inventory">
                <InventoryInfoCard
                    IconUrl="@inventory.ImageUrl"
                    Overview="@inventory.Overview"
                    Quantity="@(inventory.Quantity * _quantity)"
                    Subtitle="@L.GetInventoryCategoryTypeTitle(inventory.Category)"
                    Title="@inventory.Title"/>
            </InventoryGrid>
        </div>

        @if (_status is null)
        {
            <div class="d-flex flex-column flex-sm-row justify-space-between align-sm-end gap-3">
                @if (Product.Price.Discount > 0)
                {
                    <div class="d-flex flex-column gap-1">
                        <MudText Typo="Typo.caption">
                            @L["Product_Discount"]
                        </MudText>
                        <div class="price d-flex align-center">
                            <MudIcon
                                Class="mr-1"
                                Color="Color.Error"
                                Icon="@Icons.Material.Outlined.Discount"
                                Size="Size.Medium"/>
                            <MudText Typo="Typo.h5">
                                -@Product.Price.Discount%
                            </MudText>
                        </div>
                    </div>
                }

                <div class="d-flex flex-column gap-1">
                    <MudText Typo="Typo.caption">
                        @L["Product_TotalPrice"]
                    </MudText>
                    <div class="d-flex">
                        <InternalMoney
                            Class="price"
                            Currency="@TotalPrice.Currency"
                            Amount="@TotalPrice.Amount"
                            Typo="Typo.h5"
                            IconSize="Size.Medium"
                            Horizontal/>
                        @if (Product.Price.Discount > 0)
                        {
                            <MudText Class="mud-text-secondary align-self-start ml-1" Typo="Typo.subtitle1">
                                <s>@OriginalPrice.Amount.ToMetric()</s>
                            </MudText>
                        }
                    </div>
                </div>

                <div class="d-flex flex-column gap-1">
                    <MudText Typo="Typo.caption">
                        @L["Product_Quantity"]
                    </MudText>

                    <div class="d-flex align-center gap-3">
                        <MudIconButton
                            Variant="Variant.Outlined"
                            Color="Color.Default"
                            Icon="@Icons.Material.Outlined.Remove"
                            Disabled="@(_quantity == Min)"
                            OnClick="@OnRemoveQuantityClick"
                            DisableElevation/>

                        <MudNumericField
                            Class="number-input"
                            @bind-Value="@(_quantity)"
                            Variant="Variant.Outlined"
                            Margin="Margin.Dense"
                            Min="@Min"
                            Max="@Max"
                            HideSpinButtons/>

                        <MudIconButton
                            Variant="Variant.Outlined"
                            Color="Color.Default"
                            Icon="@Icons.Material.Outlined.Add"
                            Disabled="@(_quantity == Max)"
                            OnClick="@OnAddQuantityClick"
                            DisableElevation/>
                    </div>
                </div>

                <LoadingButton
                    Variant="Variant.Filled"
                    Color="Color.Primary"
                    OnClick="@OnPurchaseClick"
                    Text="@L["Product_BuyNow"]"
                    IsLoading="@(_status is not null)"
                    Disabled="@(_error is not null)"
                    DisableElevation/>
            </div>
        }
        else
        {
            if (_error is null)
            {
                <MudProgressLinear
                    Color="@(_status.IsRejected ? Color.Error : Color.Primary)"
                    Value="@_status.Progress"
                    Striped="@(!_status.IsFinal)"/>

                <MudText Typo="Typo.subtitle2" Align="Align.Center">
                    @L[$"OrderStatus_{_status.Status}"]
                </MudText>
            }
        }

        @if (_error is not null)
        {
            <div class="d-flex flex-column mt-3 mt-sm-6">
                <MudText Typo="Typo.subtitle1" Color="Color.Error">@_error.Title</MudText>
                <MudText Typo="Typo.subtitle2">@_error.Message</MudText>
            </div>
        }
    </DialogContent>
</MudDialog>

@code {
    private const byte Min = 1;
    private const byte Max = 42;
    private byte _quantity = 1;
    private OrderStatusModel? _status;
    private Error? _error;

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [Inject]
    private IHistoryOrderService OrderService { get; init; } = default!;

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = default!;

    [Parameter, EditorRequired]
    public required Product.BundleModel Product { get; set; }

    [Parameter, EditorRequired]
    public required ProfileModel Profile { get; set; }

    protected override void OnParametersSet() =>
        UpdateErrorState();

    private void OnAddQuantityClick()
    {
        _quantity++;
        UpdateErrorState();
    }

    private void OnRemoveQuantityClick()
    {
        _quantity--;
        UpdateErrorState();
    }

    private void OnCloseClick() =>
        MudDialog.Close(_status is null ? DialogResult.Cancel() : DialogResult.Ok(true));

    private async Task OnPurchaseClick()
    {
        UpdateErrorState();
        if (_error is not null)
            return;

        _status = new OrderStatusModel(Guid.Empty, "Creating");
        var result = await OrderService.CheckoutAsync(new CheckoutRequest(Guid.NewGuid(), Product.Id, _quantity));
        if (result.MathError(x => _error = new Error(x.Title, x.Detail)))
            return;

        result.Match(x => _status = x);
        StateHasChanged();

        var delay = TimeSpan.FromSeconds(1);
        await InvokeAsync(async () =>
        {
            while (_status is { IsFinal: false })
            {
                await Task.Delay(delay);

                var status = await OrderService.GetStatus(_status.Id);
                status.Match(x => _status = x, e => _error = new Error(e.Title, e.Detail));
                StateHasChanged();

                if (_status is { IsFinal: true, IsRejected: false })
                {
                    MudDialog.Close(DialogResult.Ok(true));
                    return;
                }

                if (_error is not null)
                    return;
            }
        });
    }

    private InternalMoneyModel OriginalPrice =>
        Product.Price.Original with { Amount = Product.Price.Original.Amount * _quantity };

    private InternalMoneyModel TotalPrice =>
        Product.Price.Total with { Amount = Product.Price.Total.Amount * _quantity };

    private uint TotalWeight =>
        Product.Weight * _quantity;

    private void UpdateErrorState() =>
        _error = GetErrorMessage();

    private Error? GetErrorMessage()
    {
        if (!Profile.Wallet.TryGetValue(TotalPrice.Currency, out var amount) || TotalPrice.Amount > amount)
        {
            var currency = L.GetInternalCurrencyTitle(TotalPrice.Currency);
            return new Error(L["InternalMoney_NotEnoughMoneyTitle", currency], L["InternalMoney_NotEnoughMoneyDescription", currency]);
        }

        if (TotalWeight > Profile.Backpack.Emptiness)
            return new Error(L["Backpack_IsFull_Title"], L["Backpack_IsFull_Description"]);

        return null;
    }

    private sealed record Error(string Title, string? Message);

}