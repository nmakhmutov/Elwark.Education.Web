@page "/history/leaderboards/monthly"
@using Education.Web.Client.Features.History.Services.Leaderboard.Model
@layout HistoryLayout

<PageTitle>
    @L["Leaderboard_Monthly_FullTitle"]
</PageTitle>

<ApiViewer Result="@_result" Context="result">
    <EduContainer Class="py-3 py-sm-6" MaxWidth="EduWidth.W1920">
        <div class="d-flex flex-column flex-md-row gap-3 mb-sm-6">
            <section>
                <div class="d-flex align-center">
                    <div class="d-flex align-center justify-center mud-primary white-text rounded mr-3 mr-sm-6">
                        <MudIcon Icon="@Icons.Material.Outlined.StarOutline" Size="Size.Large" Class="ma-6"/>
                    </div>
                    <MudText Typo="Typo.h4">
                        @L["Leaderboard_Monthly_FullTitle"]
                    </MudText>
                </div>

                <MudText Class="w-max-600 my-3 my-sm-6" Typo="Typo.subtitle1">
                    @L["Leaderboard_Monthly_Description"]
                </MudText>

                @if (result.IsActive)
                {
                    <MudChip Class="ma-0" Label Icon="@Icons.Material.Outlined.Equalizer" Variant="Variant.Text" Color="Color.Primary">
                        @L["Leaderboard_InProgress"]
                    </MudChip>
                }
                else
                {
                    <MudChip Class="ma-0" Label Icon="@Icons.Material.Outlined.EmojiEvents" Variant="Variant.Text" Color="Color.Success">
                        @L["Leaderboard_CompetitionCompleted"]
                    </MudChip>
                }
                <div class="month-wrapper mt-3">
                    <MudSelect T="DateOnly" Label="@L["Month_Title"]" Value="@result.Month" ValueChanged="@OnMonthChanged">
                        @foreach (var month in result.Months)
                        {
                            <MudSelectItem Value="@month">
                                @month.ToString("MMMM yyyy")
                            </MudSelectItem>
                        }
                    </MudSelect>
                </div>
            </section>

            <div class="d-none d-md-block flex-grow-1"></div>

            @if (result.IsActive)
            {
                <section>
                    <CardCountdown Class="justify-center mb-3 mb-sm-6" Date="@result.EndsAt"/>

                    @if (result.User is null)
                    {
                        <div class="mud-paper pa-3">
                            <MudText Typo="Typo.subtitle1">
                                You are not contestant yet
                            </MudText>
                            <MudText Typo="Typo.caption">
                                Just earn experience by passing tasks to join
                            </MudText>
                        </div>
                    }
                    else
                    {
                        <RegularRanking DisableHover Background="RegularRanking.BackgroundColor.Paper">
                            <Rank>
                                <MudAvatar Color="Color.Primary">@result.User.Rank</MudAvatar>
                            </Rank>
                            <Name>
                                <MudAvatar Class="mr-3" Image="@result.User.Image" Alt="@result.User.FullName"/>
                                <MudText Typo="Typo.subtitle1">@result.User.FullName</MudText>
                            </Name>
                            <Experience>
                                <MudIcon Class="mr-3" Icon="@EduIcons.Experience"/>
                                <MetricNumber Value="@result.User.Experience" Typo="Typo.h6"/>
                            </Experience>
                        </RegularRanking>
                    }
                </section>
            }
            else
            {
                <section class="winner-wrapper">
                    @foreach (var item in result.Users.Take(3))
                    {
                        <WinnerRanking
                            Class="@(item.Rank == 3 ? null : "mb-3 mb-sm-6")"
                            Id="@item.Id"
                            Image="@item.Image"
                            FullName="@item.FullName"
                            Rank="@item.Rank"
                            Experience="@item.Experience"/>
                    }
                </section>
            }
        </div>

        @if (result.Users.Length > 0)
        {
            <RegularRanking DisableHover>
                <Rank>
                    <MudText Typo="Typo.subtitle2">@L["Leaderboard_Rank"]</MudText>
                </Rank>
                <Name>
                    <MudText Typo="Typo.subtitle2">@L["Leaderboard_User_Name"]</MudText>
                </Name>
                <Experience>
                    <MudText Typo="Typo.subtitle2">@L["Leaderboard_User_Experience"]</MudText>
                </Experience>
            </RegularRanking>

            <Virtualize Items="@(NormalizeUsers(result))" ItemSize="64" Context="user">
                <RegularRanking Class="mb-3" Background="@GetBackgroundColor(user.Id)">
                    <Rank>
                        <MudAvatar Color="Color.Primary">@user.Rank</MudAvatar>
                    </Rank>
                    <Name>
                        <MudAvatar Class="mr-3" Image="@user.Image" Alt="@user.FullName"/>
                        <MudText Typo="Typo.subtitle1">@user.FullName</MudText>
                    </Name>
                    <Experience>
                        <MudIcon Class="mr-3" Icon="@EduIcons.Experience"/>
                        <MetricNumber Value="@user.Experience" Typo="Typo.h6"/>
                    </Experience>
                </RegularRanking>
            </Virtualize>
        }
        else
        {
            <EduEmpty
                Title="@L["Leaderboard_NoContestantsTitle"]"
                Subtitle="@L["Leaderboard_NoContestantsSubtitle"]"/>
        }
    </EduContainer>
</ApiViewer>

@code {
    private long? _highlightUser;
    private ApiResult<MonthlyLeaderboardModel> _result = ApiResult<MonthlyLeaderboardModel>.Loading();

    [Inject]
    private IHistoryLeaderboardService LeaderboardService { get; set; } = default!;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private AuthenticationStateProvider StateProvider { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var state = await StateProvider.GetAuthenticationStateAsync();
        _highlightUser = state.User.GetIdOrDefault();
        _result = await LeaderboardService.GetMonthAsync();
    }

    private async Task OnMonthChanged(DateOnly month) =>
        _result = await LeaderboardService.GetMonthAsync(month);

    private RegularRanking.BackgroundColor GetBackgroundColor(long userId) =>
        _highlightUser == userId ? RegularRanking.BackgroundColor.Highlight : RegularRanking.BackgroundColor.Paper;

    private static ICollection<UserRankingModel> NormalizeUsers(MonthlyLeaderboardModel leaderboard)
    {
        if (leaderboard.IsActive)
            return leaderboard.Users;

        if (leaderboard.Users.Length > 2)
            return leaderboard.Users[3..];

        return Array.Empty<UserRankingModel>();
    }

}