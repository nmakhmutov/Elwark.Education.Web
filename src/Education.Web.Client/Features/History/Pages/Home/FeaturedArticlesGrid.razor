@using Education.Web.Client.Features.History.Services
@using Education.Web.Client.Features.History.Services.Article
@implements IAsyncDisposable;

<section class="grid @Class">
    @if (Articles.Length == 0)
    {
        for (var i = 0; i < 6; i++)
        {
            <ArticleSkeletonCard
                Horizontal="@IsHorizontal(i)"
                HideFooter="@IsHiddenOverview(i)"/>
        }
    }
    else
    {
        for (var i = 0; i < Articles.Length; i++)
        {
            <ArticleCard
                Article="@Articles[i]"
                Horizontal="@IsHorizontal(i)"
                HideOverview="@IsHiddenOverview(i)"
                ShortOverview="@IsShortOverview(i)"/>
        }
    }
</section>

@code {
    private Guid _subscriptionId;
    private int _breakpoint;

    [Inject]
    private IBreakpointService BreakpointService { get; set; } = default!;

    [Parameter]
    public string? Class { get; set; }

    [Parameter, EditorRequired]
    public ArticleOverviewModel[] Articles { get; set; } = Array.Empty<ArticleOverviewModel>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var options = new ResizeOptions { NotifyOnBreakpointOnly = true, SuppressInitEvent = false };
            var result = await BreakpointService.SubscribeAsync(x => OnBreakpointChanged(x), options);

            _subscriptionId = result.SubscriptionId;
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private void OnBreakpointChanged(Breakpoint breakpoint)
    {
        _breakpoint = (int)breakpoint;
        InvokeAsync(StateHasChanged);
    }

    private bool IsHorizontal(int i) =>
        _breakpoint >= (int)Breakpoint.Lg && i > 0;

    private bool IsHiddenOverview(int i) =>
        _breakpoint >= (int)Breakpoint.Lg && i > 2;

    private bool IsShortOverview(int i) =>
        _breakpoint >= (int)Breakpoint.Lg && i is 1 or 2;

    public async ValueTask DisposeAsync() =>
        await BreakpointService.UnsubscribeAsync(_subscriptionId);

}