@page "/history/event-guessers"
@using Education.Web.Client.Features.History.Services.EventGuesser.Model
@using Education.Web.Client.Features.History.Services.EventGuesser.Request
@using Education.Web.Client.Features.History.Services.EventGuesser
@layout HistoryLayout
@attribute [Authorize]

<PageTitle>
    @L["History_EventGuesser"]
</PageTitle>

<div class="background d-flex flex-column h-100">
    <EduContainer Class="pt-3 pt-sm-6">
        <EduPageHeader Title="@L["History_EventGuesser"]" Breadcrumbs="@Breadcrumbs">
            <div>
                <MudButton
                    DisableElevation
                    Variant="Variant.Text"
                    Color="Color.Primary"
                    EndIcon="@Icons.Material.Outlined.Info"
                    Disabled="@(!_result.IsSuccess)"
                    OnClick="@OpenRule">
                    @L["History_EventGuesserRules"]
                </MudButton>
            </div>
        </EduPageHeader>
    </EduContainer>
    <ApiViewer Result="@_result" Context="model">
        <section class="grid pa-3 pa-sm-6">
            <section class="builder">
                <MudText Typo="Typo.h6" Class="mb-3">
                    @L["History_Epoch"]
                </MudText>
                <EpochRadioGroup
                    SelectedEpoch="@HistorySettings.EventGuesserEpoch"
                    SelectedEpochChanged="@HistorySettings.ChangeEventGuesserEpochAsync"
                    Class="mb-3 mb-sm-6"/>

                <MudText Typo="Typo.h6" Class="mb-3">
                    @L["Shared_QuizType"]
                </MudText>
                <EventGuesserTypeRadioGroup
                    SelectedGuesser="@HistorySettings.EventGuesserType"
                    SelectedGuesserChanged="@(x => HistorySettings.ChangeEventGuesserTypeAsync(x))"
                    Guessers="@model.Tests"
                    Class="mb-3 mb-sm-6"/>

                <div class="d-flex justify-center">
                    <LoadingButton
                        DisableElevation
                        Size="Size.Large"
                        Color="Color.Primary"
                        Variant="Variant.Filled"
                        Text="@L["Shared_TakeTheGuesser"]"
                        LoadingText="@L["Loading"]"
                        IsLoading="@_isLoading"
                        Disabled="@(model.Tests.All(x => !x.IsAllowed))"
                        OnClick="@CreateTestAsync"/>
                </div>
            </section>

            <section class="inventory">
                <MudText Typo="Typo.h6" Class="mb-3">
                    @L["History_EventGuesserEquipment"]
                </MudText>
                <InventoryGrid Inventory="@model.Inventory" StoreHref="@HistoryUrl.Store.Index" Context="inventory">
                    <InventoryInfoCard
                        Title="@inventory.Title"
                        Overview="@inventory.Overview"
                        Quantity="@inventory.Quantity"
                        IconUrl="@inventory.IconUrl"/>
                </InventoryGrid>
            </section>
        </section>
    </ApiViewer>
</div>

@code {
    private bool _isLoading;
    private ApiResult<EventGuesserBuilderModel> _result = ApiResult<EventGuesserBuilderModel>.Loading();

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["History_Title"], HistoryUrl.Root)
    };

    [Inject]
    public IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryEventGuesserService EventGuesserService { get; set; } = default!;

    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    [Inject]
    private IDialogService DialogService { get; set; } = default!;

    [CascadingParameter]
    private CascadingHistorySettings HistorySettings { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        _result = await EventGuesserService.GetAsync();
        if (_result.IsSuccess)
        {
            var tests = _result.Unwrap().Tests;
            if (!tests.Any(x => x.IsAllowed && x.Type == HistorySettings.EventGuesserType))
                await HistorySettings.ChangeEventGuesserTypeAsync(tests.FirstOrDefault(x => x.IsAllowed)?.Type);

            return;
        }

        if (_result.IsError && _result.UnwrapError().IsTestAlreadyCreated(out var id))
            Navigation.NavigateTo(HistoryUrl.EventGuesser.Test(id));
    }

    private async Task CreateTestAsync()
    {
        if (string.IsNullOrEmpty(HistorySettings.EventGuesserType))
            return;

        _isLoading = true;

        var request = new CreateRequest(HistorySettings.EventGuesserType, HistorySettings.EventGuesserEpoch);
        (await EventGuesserService.CreateAsync(request))
            .Match(
                x => Navigation.NavigateTo(HistoryUrl.EventGuesser.Test(x.Id)),
                e => Snackbar.Add(e.Detail, Severity.Error)
            );

        _isLoading = false;
    }

    private void OpenRule()
    {
        var rule = _result.Unwrap().Rule;
        var parameters = new DialogParameters { [nameof(RuleDialog.Content)] = rule.Content };
        var options = new DialogOptions
        {
            FullWidth = true,
            MaxWidth = MaxWidth.Large,
            CloseOnEscapeKey = true,
            CloseButton = true
        };

        DialogService.Show<RuleDialog>(rule.Title, parameters, options);
    }

}