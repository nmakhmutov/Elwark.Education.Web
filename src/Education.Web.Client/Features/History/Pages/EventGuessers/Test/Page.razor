@page "/history/event-guessers/{id}"
@using Education.Web.Client.Features.History.Services.EventGuesser.Model
@using Education.Web.Client.Features.History.Services.EventGuesser.Request
@layout HistoryLayout
@attribute [Authorize]

<PageTitle>
    @L["History_EventGuesser"]
</PageTitle>

<EduContainer Class="py-3 py-sm-6">
    <EduPageHeader Title="@L["History_EventGuesser"]" Breadcrumbs="@Breadcrumbs"/>
</EduContainer>

<ApiViewer Result="@_result">
    <EduContainer Class="pb-3 pb-sm-6" MaxWidth="EduWidth.W960">
        <div class="header">
            <div class="header-score">
                <div class="d-flex flex-row align-center">
                    <MudIcon Icon="@EduIcons.Score" Class="mr-1" Size="Size.Small" Color="Color.Primary"/>
                    <MudText Typo="Typo.subtitle1">
                        @_score.Total
                    </MudText>
                </div>
                <MudText Typo="Typo.caption">
                    @L["History_EventGuesser_Score"]
                </MudText>
            </div>

            <div class="header-bonus">
                @if (_x2BonusUntil > DateTime.UtcNow)
                {
                    <div class="d-flex flex-row justify-end align-center">
                        <MudIcon Icon="@EduIcons.Score" Class="mr-1" Size="Size.Small" Color="Color.Primary"/>
                        <MudText Typo="Typo.subtitle1">
                            @L["History_EventGuesser_x2Bonus"]
                        </MudText>
                    </div>
                    <div class="d-flex flex-row justify-end">
                        <CountdownTimer Typo="Typo.caption" Date="@_x2BonusUntil" OnComplete="@StateHasChanged"/>
                    </div>
                }
            </div>

            <div class="header-questions">
                <MudText Typo="Typo.subtitle1">
                    @L["Questions"] @_completedQuestions / @_totalQuestions
                </MudText>
            </div>

            <div class="header-title">
                <MudText Typo="Typo.h5" Align="Align.Center">
                    @_question.Title
                </MudText>
            </div>
        </div>

        <EventGuesserForm OnAnswer="@OnValidSubmit"/>

    </EduContainer>
</ApiViewer>

@code {

    private ApiResult<EventGuesserModel> _result = ApiResult<EventGuesserModel>.Loading();
    private ScoreModel _score = new(0, 0, 0);
    private DateTime _x2BonusUntil;
    private uint _totalQuestions;
    private uint _completedQuestions;
    private EventGuesserModel.QuestionModel _question = default!;

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["History_Title"], HistoryUrl.Root),
        new BreadcrumbItem(L["History_EventGuesser"], HistoryUrl.EventGuesser.Index)
    };

    [Inject]
    public IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryEventGuesserService EventGuesserService { get; set; } = default!;

    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    [Parameter]
    public string Id { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _result = await EventGuesserService.GetAsync(Id);
        _result.Match(
            x =>
            {
                _score = x.Score;
                _x2BonusUntil = x.X2BonusUntil;
                _completedQuestions = x.CompletedQuestions;
                _totalQuestions = x.TotalQuestions;
                _question = x.Question!;
            },
            e =>
            {
                if (e.IsEventGuesserNotFound())
                    Navigation.NavigateTo(HistoryUrl.EventGuesser.Conclusion(Id));
            }
            );
    }

    private async Task OnValidSubmit(EventGuesserForm.Model model)
    {
        var year = model.Year.GetValueOrDefault();
        var request = new CheckRequest(model.IsBc ? -year : year, model.Month, model.Day);

        var result = await EventGuesserService.CheckAsync(Id, _question.Id, request);
        result.Match(
            x =>
            {
                if (x.Question is null)
                {
                    Navigation.NavigateTo(HistoryUrl.EventGuesser.Conclusion(Id));
                    return;
                }

                _score = x.Score;
                _x2BonusUntil = x.X2BonusUntil;
                _question = x.Question;
                _completedQuestions = x.CompletedQuestions;
                _totalQuestions = x.TotalQuestions;
            },
            e => Snackbar.Add(e.Detail, Severity.Error)
            );
    }

}