@page "/history/tests/{id}/conclusion"
@using Education.Web.Client.Features.History.Services.Test.Model
@using Education.Web.Client.Models.Test
@using Education.Web.Client.Features.History.Services.Test
@layout HistoryLayout
@attribute [Authorize]

<PageTitle>@_title</PageTitle>

<ApiViewer Result="@_result" Context="conclusion">
    <MudAlert Class="mb-6 mb-sm-12" Square Severity="@GetColor(conclusion.Status)" ContentAlignment="HorizontalAlignment.Center">
        @L[$"ConclusionStatus:{conclusion.Status}"]
    </MudAlert>

    <CompletedStars Class="mb-6" Progress="@_progress"/>

    @if (conclusion.Rewards.Length > 0)
    {
        <RewardsContainer Class="py-3 py-sm-6" MaxWidth="EduWidth.W1280" Rewards="@conclusion.Rewards"/>
    }

    @switch (conclusion)
    {
        case TestConclusion.EasyTestModel test:
            <EasyTestView Conclusion="@test"/>
            break;

        case TestConclusion.HardTestModel test:
            <HardTestView Conclusion="@test"/>
            break;

        case TestConclusion.MixedTestModel test:
            <MixedTestView Conclusion="@test"/>
            break;

        default:
            throw new ArgumentOutOfRangeException(nameof(conclusion));
    }
</ApiViewer>

@code {
    private string? _title;
    private double _progress;
    private ApiResult<TestConclusion> _result = ApiResult<TestConclusion>.Loading();

    [Inject]
    private IHistoryTestService TestService { get; set; } = default!;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    [Parameter]
    public string Id { get; set; } = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        _result = await TestService.GetConclusionAsync(Id);
        if (_result.IsSuccess)
        {
            _title = _result.Value switch {
                TestConclusion.EasyTestModel x => $"{L["Test:Easy"]}: {x.Article.Title}",
                TestConclusion.HardTestModel x => $"{L["Test:Hard"]}: {x.Article.Title}",
                TestConclusion.MixedTestModel x => $"{L["Test:Mixed"]}: {string.Join(", ", x.Questions.Select(q => q.Article.Title))}",
                _ => L[$"ConclusionStatus:{_result.Value.Status}"]
                };

            _progress = Math.Round((double)_result.Value.UserScore.Total / _result.Value.MaxScore.Total * 100);
        }

        if (_result.IsFailed && _result.Error.IsTestNotFound())
            Navigation.NavigateTo(HistoryUrl.ArticleTest.Index());
    }

    private static Severity GetColor(ConclusionStatus status) =>
        status switch {
            ConclusionStatus.Succeeded => Severity.Success,
            ConclusionStatus.Failed => Severity.Error,
            ConclusionStatus.TimeExceeded => Severity.Warning,
            ConclusionStatus.MistakesExceeded => Severity.Warning,
            _ => Severity.Info
            };

}