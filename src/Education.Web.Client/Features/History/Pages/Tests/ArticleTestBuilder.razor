@using Education.Web.Client.Features.History.Services
@using Education.Web.Client.Features.History.Services.Test.Request
@using Education.Web.Client.Models
<section class="@Class">
    <MudText Typo="Typo.h5" Class="mb-3">
        @L["Article"]
    </MudText>

    <ArticleCard
        Class="mb-3 mb-sm-6"
        Article="@Article"
        Activity="@Activity"
        OnBookmarkClick="@OnBookmarkClick"
        Horizontal/>

    <MudText Typo="Typo.h5" Class="mb-3">
        @L["Test:Type"]
    </MudText>

    @if (Tests.Any(x => x.IsAllowed))
    {
        <TestRadioGroup
            SelectedTest="@HistorySettings.TestType"
            SelectedTestChanged="@HistorySettings.ChangeTestTypeAsync"
            Tests="@Tests" Class="mb-6"/>

        <div class="d-flex justify-center">
            <LoadingButton
                DisableElevation
                Color="Color.Primary"
                Variant="Variant.Filled"
                Size="Size.Large"
                Text="@L["Test:Pass"]"
                LoadingText="@L["Loading"]"
                IsLoading="@_isLoading"
                OnClick="@CreateTestAsync"/>
        </div>
    }
    else
    {
        <MudText Typo="Typo.subtitle1">
            @L["Test:NotAvailableForArticle", Article.Title]
        </MudText>
    }
</section>

@code {
    private bool _isLoading;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [CascadingParameter]
    private CascadingHistorySettings HistorySettings { get; set; } = default!;

    [Parameter, EditorRequired]
    public ArticleOverviewModel Article { get; set; } = default!;

    [Parameter, EditorRequired]
    public UserActivityOverviewModel Activity { get; set; } = default!;

    [Parameter, EditorRequired]
    public TestInformationModel[] Tests { get; set; } = Array.Empty<TestInformationModel>();

    [Parameter, EditorRequired]
    public EventCallback<CreateArticleTestRequest> OnCreateClick { get; set; }

    [Parameter]
    public Func<string, Task<bool>> OnBookmarkClick { get; set; } = _ => Task.FromResult(false);

    [Parameter]
    public string? Class { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Tests.Any(x => x.IsAllowed && x.Name == HistorySettings.TestType))
            return;

        await HistorySettings.ChangeTestTypeAsync(Tests.FirstOrDefault(x => x.IsAllowed)?.Name);
    }

    private async Task CreateTestAsync()
    {
        if (string.IsNullOrEmpty(HistorySettings.TestType))
            return;

        _isLoading = true;
        await OnCreateClick.InvokeAsync(new CreateArticleTestRequest(HistorySettings.TestType, Article.Id));
        _isLoading = false;
    }

}