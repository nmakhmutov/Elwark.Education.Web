@page "/history/tests"
@using Education.Web.Client.Features.History.Services.Test.Model
@using Education.Web.Client.Features.History.Services.Test.Request
@using Education.Web.Client.Features.History.Services.User
@using Education.Web.Client.Features.History.Services.Test
@layout HistoryLayout
@attribute [Authorize]

<PageTitle>
    @L["Tests"]
</PageTitle>

<div class="background d-flex flex-column h-100">

    <EduContainer Class="pt-3 pt-sm-6">
        <EduPageHeader Title="@L["Tests"]" Breadcrumbs="@Breadcrumbs">
            <MudButton
                DisableElevation
                Variant="Variant.Text"
                Color="Color.Primary"
                EndIcon="@Icons.Material.Outlined.Info"
                Disabled="@(!_result.IsSuccess)"
                OnClick="@OpenRule">
                @L["Tests:Rules"]
            </MudButton>
        </EduPageHeader>
    </EduContainer>

    <ApiViewer Result="@_result" Context="model">
        <section class="grid pa-3 pa-sm-6">
            @if (model.Article is null)
            {
                <EpochTestBuilder
                    Class="builder"
                    Tests="@model.Tests"
                    OnCreateClick="@OnCreateTestAsync"/>
            }
            else
            {
                <ArticleTestBuilder
                    Class="builder"
                    Tests="@model.Tests"
                    Article="@model.Article.Article"
                    Activity="@model.Article.Activity"
                    OnCreateClick="@OnCreateTestAsync"
                    OnBookmarkClick="@ToggleBookmarkAsync"/>
            }

            <section class="inventory">
                <MudText Typo="Typo.h6" Class="mb-3">
                    @L["Equipment:Test"]
                </MudText>
                <InventoryGrid Inventory="@model.Inventories" StoreHref="@HistoryUrl.Store.Index" Context="item">
                    <InventoryInfoCard
                        Title="@item.Title"
                        Overview="@item.Overview"
                        Quantity="@item.Quantity"
                        IconUrl="@item.IconUrl"/>
                </InventoryGrid>
            </section>
        </section>
    </ApiViewer>
</div>

@code {
    private ApiResult<TestBuilderModel> _result = ApiResult<TestBuilderModel>.Loading();

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["History_Title"].Value, HistoryUrl.Root)
    };

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryTestService TestService { get; set; } = default!;

    [Inject]
    private IHistoryUserService UserService { get; set; } = default!;

    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    [Inject]
    private IDialogService DialogService { get; set; } = default!;

    [Parameter, SupplyParameterFromQuery(Name = "article")]
    public string? ArticleId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        _result = await TestService.GetTestBuilderAsync(ArticleId);

        if (_result.IsFailed && _result.Error.IsTestAlreadyCreated(out var id))
            Navigation.NavigateTo(HistoryUrl.ArticleTest.Test(id));
    }

    private Task OnCreateTestAsync(CreateEpochTestRequest request) =>
        CreateTestAsync(() => TestService.CreateAsync(request));

    private Task OnCreateTestAsync(CreateArticleTestRequest request) =>
        CreateTestAsync(() => TestService.CreateAsync(request));

    private async Task CreateTestAsync(Func<Task<ApiResult<TestModel>>> call)
    {
        var response = await call();

        if (response.IsSuccess)
            Navigation.NavigateTo(HistoryUrl.ArticleTest.Test(response.Value.Overview.Id));
        else
            Snackbar.Add(response.Error.Detail, Severity.Error);
    }

    private async Task<bool> ToggleBookmarkAsync(string id)
    {
        var result = await UserService.ToggleBookmarkAsync(id);
        return result is { IsSuccess: true, Value: true };
    }

    private void OpenRule()
    {
        var parameters = new DialogParameters { [nameof(RuleDialog.Content)] = _result.Value.Rule.Content };
        var options = new DialogOptions { FullWidth = true, MaxWidth = MaxWidth.Large, CloseOnEscapeKey = true, CloseButton = true };

        DialogService.Show<RuleDialog>(_result.Value.Rule.Title, parameters, options);
    }

}