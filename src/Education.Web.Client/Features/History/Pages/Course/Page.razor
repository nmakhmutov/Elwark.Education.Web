@page "/history/course/{id}"
@using Education.Web.Client.Features.History.Services.Course.Model
@layout HistoryLayout

<ApiViewer Result="@_result" Context="course">
    <PageTitle>
        @course.Title
    </PageTitle>

    <PageMetaContent
        Title="@course.Title"
        Description="@course.Description"
        Image="@course.ImageUrl"/>

    <EduContainer Class="py-3 py-sm-6" MaxWidth="EduWidth.W1600">
        <CourseHeader
            CourseId="@course.Id"
            Title="@course.Title"
            Image="@course.ImageUrl"
            Breadcrumbs="@Breadcrumbs"
            TimeToRead="@course.TimeToRead"
            ArticleCount="@course.Articles.Length"
            Activity="@course.UserActivity"
            OnLikeClick="@UserService.LikeCourseAsync"
            OnDislikeClick="@UserService.DislikeCourseAsync"
            OnBookmarkClick="@UserService.ToggleCourseBookmarkAsync"
            OnStartClick="@StartCourseAsync" />
    </EduContainer>

    <EduContainer Class="pb-3 pb-sm-6" MaxWidth="EduWidth.W1600">
        <section class="content">
            <div class="articles">
                <MudText Class="mb-3 mb-sm-6" Typo="Typo.h4">
                    @L["Shared_Articles"]
                </MudText>
                
                @foreach (var (article, activity) in course.Articles)
                {
                    <ArticleCard
                        Class="mb-3 mb-sm-6"
                        Article="@article"
                        Activity="@activity"
                        OnBookmarkClick="@UserService.ToggleArticleBookmarkAsync"
                        Horizontal/>
                }
            </div>

            <aside class="aside">
                <MudText Class="mb-3 mb-sm-6" Typo="Typo.h4">
                    Course description
                </MudText>

                <MudText Typo="Typo.body1">
                    @course.Description
                </MudText>
            </aside>
        </section>
    </EduContainer>
</ApiViewer>

@code {
    private ApiResult<CourseModel> _result = ApiResult<CourseModel>.Loading();

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["History_Title"], HistoryUrl.Root),
        new BreadcrumbItem(L["History_Courses"], HistoryUrl.Content.Courses)
    };

    [Inject]
    private IHistoryCourseService CourseService { get; set; } = default!;

    [Inject]
    private IHistoryUserService UserService { get; set; } = default!;

    [Inject]
    private IHistoryLearnerService LearnerService { get; set; } = default!;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Parameter]
    public string Id { get; set; } = string.Empty;

    protected override async Task OnParametersSetAsync() =>
        _result = await CourseService.GetAsync(Id);

    private async Task StartCourseAsync(string id)
    {
        var result = await LearnerService.StartCourseAsync(id);
        result.Map(x => _result = ApiResult<CourseModel>.Success(_result.Unwrap() with { UserActivity = x }));
    }

}