@page "/history/course/{id}"
@using Education.Web.Client.Features.History.Services.Course
@using Education.Web.Client.Features.History.Services.Course.Model
@using Education.Web.Client.Features.History.Services.User
@layout HistoryLayout

<PageTitle>
    @_title
</PageTitle>

<ApiViewer Result="@_result" Context="course">
    <EduContainer Class="py-3 py-sm-6" MaxWidth="EduWidth.W1600">
        <CourseHeader Title="@course.Title" Image="@course.ImageUrl" Breadcrumbs="@Breadcrumbs"/>
    </EduContainer>

    <EduContainer Class="pb-3 pb-sm-6" MaxWidth="EduWidth.W1600">
        <section class="grid">
            <div class="d-flex flex-column gap-3 gap-sm-6">
                <MudText Typo="Typo.h6">
                    Articles
                </MudText>

                @foreach (var (article, activity) in course.Articles)
                {
                    <ArticleCard
                        Article="@article"
                        Activity="@activity"
                        OnBookmarkClick="@ToggleBookmarkAsync"
                        Horizontal/>
                }
            </div>

            <div>
                <MudText Class="mb-3 mb-sm-6" Typo="Typo.h6">
                    Course description
                </MudText>

                <MudText Typo="Typo.body1">
                    @course.Description
                </MudText>
            </div>
        </section>
    </EduContainer>
</ApiViewer>

@code {
    private string? _title;
    private ApiResult<CourseModel> _result = ApiResult<CourseModel>.Loading();

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["History_Title"].Value, HistoryUrl.Root),
        new BreadcrumbItem(L["History_Courses"].Value, HistoryUrl.Content.Courses)
    };

    [Inject]
    private IHistoryCourseService CourseService { get; set; } = default!;

    [Inject]
    private IHistoryUserService UserService { get; set; } = default!;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Parameter]
    public string Id { get; set; } = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        _result = await CourseService.GetAsync(Id);
        if (_result.IsSuccess)
            _title = _result.Value.Title;
    }

    private async Task<bool> ToggleBookmarkAsync(string id)
    {
        var result = await UserService.ToggleArticleBookmarkAsync(id);
        return result is { IsSuccess: true, Value: true };
    }

}