@page "/history/article/{id}/quiz"
@using Education.Web.Client.Models.Inventory
@layout HistoryLayout
@attribute [Authorize]

<EduContainer Class="py-3 py-sm-6" MaxWidth="EduWidth.W1920">
    <PageBreadcrumbsHeader Items="@Breadcrumbs"/>
</EduContainer>

<ApiViewer Result="@_result" OnReloadClick="@OnInitializedAsync" Context="model">
    <PageTitle>
        @model.Article.Title
    </PageTitle>

    <section class="grid px-3 pb-3 px-sm-6 pb-sm-6">
        <section class="course">
            <MudText Typo="Typo.h6" Class="mb-3">
                @L["Course_Title"]
            </MudText>

            <ArticleCard
                Article="@model.Article"
                Activity="@model.Activity"
                OnBookmarkClick="@LearnerService.ToggleArticleBookmarkAsync"
                HasQuiz="@(model.Quizzes.Length > 0)"
                Horizontal/>
        </section>

        <section class="inventory">
            <MudText Typo="Typo.h6" Class="mb-3">
                @L["Examination_Equipment_Title"]
            </MudText>
            <InventoryGrid Inventory="@model.Inventories" StoreHref="@HistoryUrl.Store.Index(CategoryType.Quiz)" Context="item">
                <InventoryInfoCard
                    Title="@item.Title"
                    Overview="@item.Overview"
                    Quantity="@item.Quantity"
                    IconUrl="@item.ImageUrl"/>
            </InventoryGrid>
        </section>

        <section class="exam">
            @if (model.Quizzes.Length > 0)
            {
                <MudText Typo="Typo.h6" Class="mb-3">
                    @L["Quiz_Type_Title"]
                </MudText>

                <QuizDifficultyRadioGroup
                    Class="mb-6"
                    SelectedDifficulty="@_settings.Difficulty"
                    SelectedDifficultyChanged="@ChangeDifficultyAsync"
                    Quizzes="@model.Quizzes"/>

                <div class="d-flex justify-center">
                    <LoadingButton
                        Color="Color.Primary"
                        Variant="Variant.Filled"
                        Size="Size.Large"
                        Text="@L["Quiz_TakeTheQuiz"]"
                        LoadingText="@L["Loading_Title"]"
                        IsLoading="@_isLoading"
                        Disabled="@(model.Quizzes.All(x => !x.IsAllowed))"
                        OnClick="@CreateQuizAsync"
                        DisableElevation/>
                </div>
            }
            else
            {
                <MudAlert Severity="Severity.Info">
                    @L["Quiz_NotAvailableForArticle", model.Article.Title]
                </MudAlert>
            }
        </section>
    </section>
</ApiViewer>