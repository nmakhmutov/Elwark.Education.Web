@using Education.Web.Client.Features.History.Services
@using Education.Web.Client.Features.History.Services.Article.Model
@using Education.Web.Client.Models.Content

<EduContainer Class="py-3 py-sm-6" MaxWidth="EduWidth.W1440">
    <section class="grid">
        <header class="header">
            <div class="d-flex justify-center">
                <Breadcrumbs Class="pa-0" Items="@Breadcrumbs"/>
            </div>
            <h1 class="title">
                @Battle.Title
            </h1>
            <div class="d-flex justify-center mb-6">
                @if (Battle.Started == Battle.Finished)
                {
                    <HistoryDate
                        Typo="Typo.subtitle1"
                        Date="@Battle.Started"
                        DateTimeFormatter="@DateTimeFormatter"/>
                }
                else
                {
                    <div class="d-flex align-center">
                        <HistoryDate
                            Typo="Typo.subtitle1"
                            Date="@Battle.Started"
                            DateTimeFormatter="@DateTimeFormatter"/>

                        <MudText Typo="Typo.subtitle1" Class="mx-3">&#8212;</MudText>

                        <HistoryDate
                            Typo="Typo.subtitle1"
                            Date="@Battle.Finished"
                            DateTimeFormatter="@DateTimeFormatter"/>
                    </div>
                }
            </div>
            <MudText Class="mb-3 mb-sm-6" Typo="Typo.body1" Align="Align.Center">
                @Battle.Description
            </MudText>
        </header>

        <section class="battle-image">
            <img class="image object-cover object-center mx-auto" src="@Battle.ImageUrl" alt="@Battle.Title" loading="lazy"/>
        </section>

        <section class="map mud-paper pa-3 pa-sm-6">
            @if (Battle.Map?.Source is not null)
            {
                <a href="@Battle.Map.Source" target="_blank">
                    <img class="map-image object-contain object-center" src="@Battle.Map.Source" alt="@Battle.Map.Overview" loading="lazy"/>
                </a>

                <MudText Class="mb-3 mb-sm-6" Typo="Typo.body2" Align="Align.Center">
                    @Battle.Map.Overview
                </MudText>
            }

            <MudText Typo="Typo.h6">
                @L["History_BattleLocation"]
            </MudText>
            <StyledMarkupString Class="mb-3 mb-sm-6" Content="@Battle.Location" DisableParagraphIndent/>
            <MudText Typo="Typo.h6">
                @L["History_BattleResult"]
            </MudText>
            <StyledMarkupString Content="@Battle.Result" DisableParagraphIndent/>
        </section>

        <section class="conflict-parties mud-paper pa-3 pa-sm-6">
            @foreach (var item in _conflictParties)
            {
                <div class="mb-3 mb-sm-6">
                    <MudText Class="mb-3" Typo="Typo.h6" Align="Align.Center">
                        @L[$"History_Battle{item.Key}"]
                    </MudText>
                    <div class="d-flex justify-space-around gap-3">
                        @for (var i = 0; i < item.Value.Count; i++)
                        {
                            <StyledMarkupString Class="flex-1" Content="@item.Value[i]" DisableParagraphIndent/>
                            @if (i < item.Value.Count - 1)
                            {
                                <MudDivider Class="flex-0" Vertical FlexItem/>
                            }
                        }
                    </div>
                </div>
            }
        </section>

        <ArticleFormatingCard Class="toolbar"/>

        <article class="content">
            <ArticleContentCard Content="@Battle.Content"/>
        </article>

        <ArticleQuizCard Class="quiz" ArticleId="@Battle.Id" HasQuiz="@HasQuiz" UserActivity="@UserActivity"/>

        <ArticleUserCard
            Class="rating"
            ArticleId="@Battle.Id"
            Rating="@Battle.Rating"
            UserActivity="@UserActivity"
            OnBookmarkClick="@OnBookmarkClick"
            OnLikeClick="@OnLikeClick"
            OnDislikeClick="@OnDislikeClick"/>
    </section>

    @if (RelatedArticles.Length > 0)
    {
        <UnderlinedTitle Class="my-3 mt-sm-6" Title="@L["Articles:Related"]"/>
        <EduFillGrid>
            @foreach (var (article, activity) in RelatedArticles)
            {
                <ArticleCard Article="@article" Activity="@activity" OnBookmarkClick="@OnBookmarkClick"/>
            }
        </EduFillGrid>
    }
</EduContainer>

@code {
    private Dictionary<string, List<MarkupString>> _conflictParties = new();

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["History_Title"], HistoryUrl.Root),
        new BreadcrumbItem(L[$"History_Epoch{Battle.Epoch.ToFastString()}"], HistoryUrl.Content.Articles(Battle.Epoch))
    };

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [CascadingParameter]
    private CustomerState Customer { get; set; } = default!;

    [Parameter, EditorRequired]
    public ArticleDetail.BattleModel Battle { get; set; } = default!;

    [Parameter, EditorRequired]
    public UserActivityOverviewModel UserActivity { get; set; } = default!;

    [Parameter, EditorRequired]
    public bool HasQuiz { get; set; }

    [Parameter, EditorRequired]
    public UserArticleOverviewModel[] RelatedArticles { get; set; } = Array.Empty<UserArticleOverviewModel>();

    [Parameter, EditorRequired]
    public Func<Task<bool>> OnLikeClick { get; set; } = () => Task.FromResult(false);

    [Parameter, EditorRequired]
    public Func<Task<bool>> OnDislikeClick { get; set; } = () => Task.FromResult(false);

    [Parameter, EditorRequired]
    public Func<string, Task<bool>> OnBookmarkClick { get; set; } = _ => Task.FromResult(false);

    protected override void OnParametersSet()
    {
        _conflictParties = new Dictionary<string, List<MarkupString>>
        {
            { nameof(ConflictPartyModel.Belligerents), new List<MarkupString> { Battle.ConflictParties[0].Belligerents } },
            { nameof(ConflictPartyModel.Commanders), new List<MarkupString> { Battle.ConflictParties[0].Commanders } },
            { nameof(ConflictPartyModel.Strength), new List<MarkupString> { Battle.ConflictParties[0].Strength } },
            { nameof(ConflictPartyModel.Losses), new List<MarkupString> { Battle.ConflictParties[0].Losses } }
        };

        for (var i = 1; i < Battle.ConflictParties.Length; i++)
        {
            _conflictParties[nameof(ConflictPartyModel.Belligerents)].Add(Battle.ConflictParties[i].Belligerents);
            _conflictParties[nameof(ConflictPartyModel.Commanders)].Add(Battle.ConflictParties[i].Commanders);
            _conflictParties[nameof(ConflictPartyModel.Strength)].Add(Battle.ConflictParties[i].Strength);
            _conflictParties[nameof(ConflictPartyModel.Losses)].Add(Battle.ConflictParties[i].Losses);
        }
    }

    private string DateTimeFormatter(DateTime date) =>
        Customer.Humanize(date);

}