@using Education.Web.Client.Features.History.Services
@using Education.Web.Client.Features.History.Services.Article.Model
@using Education.Web.Client.Models.Content

<header class="background" style="@_style">
    <section class="d-flex flex-column justify-center align-center h-100">
        <Breadcrumbs Items="@Breadcrumbs" Typo="Typo.subtitle1"/>

        <ArticleTitle Class="mb-3">
            @Empire.Title
        </ArticleTitle>

        <section class="d-flex flex-wrap justify-center align-center">
            <div class="pa-3 pa-sm-6">
                <MudText Typo="Typo.subtitle1" Align="Align.Center">
                    @L["History_EmpireFounded"]
                </MudText>
                <HistoryDate
                    Date="@Empire.Founded"
                    DateTimeFormatter="@DateTimeFormatter"
                    Typo="Typo.h6"
                    Align="Align.Center"/>
            </div>

            <div class="pa-3 pa-sm-6">
                <MudText Typo="Typo.subtitle1" Align="Align.Center">
                    @L["History_EmpireDissolved"]
                </MudText>
                <HistoryDate
                    Date="@Empire.Dissolved"
                    DateTimeFormatter="@DateTimeFormatter"
                    Typo="Typo.h6"
                    Align="Align.Center"/>
            </div>

            <div class="pa-3 pa-sm-6">
                <MudText Typo="Typo.subtitle1" Align="Align.Center">
                    @L["History_EmpireDuration"]
                </MudText>
                <MudText Typo="Typo.h6" Align="Align.Center">
                    @if (Empire.Duration.HasValue)
                    {
                        @Empire.Duration.Value.ToString("N0")
                        <small>&nbsp;@L["History_Years"].Value.ToLowerInvariant()</small>
                    }
                    else
                    {
                        @L["Shared_Unknown"]
                    }
                </MudText>
            </div>

            <div class="pa-3 pa-sm-6">
                <MudText Typo="Typo.subtitle1" Align="Align.Center">
                    @L["History_EmpireMaxArea"]
                </MudText>
                <MudText Typo="Typo.h6" Align="Align.Center">
                    @if (Empire.MaxArea > 0)
                    {
                        @Empire.MaxArea.ToString("N0")<small>km<sup>2</sup></small>
                    }
                    else
                    {
                        @L["Shared_Unknown"]
                    }
                </MudText>
            </div>

            <div class="pa-3 pa-sm-6">
                <MudText Typo="Typo.subtitle1" Align="Align.Center">
                    @L["History_EmpireMaxPopulation"]
                </MudText>
                <MudText Typo="Typo.h6" Align="Align.Center">
                    @if (Empire.MaxPopulation > 0)
                    {
                        @Empire.MaxPopulation.ToString("N0")
                    }
                    else
                    {
                        @L["Shared_Unknown"]
                    }
                </MudText>
            </div>
        </section>

        <EduContainer Class="py-3 py-sm-6" MaxWidth="EduWidth.W1440">
            <MudText Typo="Typo.subtitle1" Align="Align.Justify">
                @Empire.Description
            </MudText>
        </EduContainer>
    </section>
</header>

<EduContainer Class="py-3 py-sm-6" MaxWidth="EduWidth.W1440">
    <ContentGrid>
        <Header>
            <ContentToolbarCard/>
            <ArticleInformation TimeToRead="@Empire.TimeToRead" Rating="@Empire.Rating"/>
        </Header>

        <Content>
            <ContentCard Content="@Empire.Content"/>
        </Content>

        <Sidebar>
            @if (Empire.Flag is not null)
            {
                <ImageWithOverviewCard
                    Title="@L["History_EmpireFlag"]"
                    Source="@Empire.Flag.Source"
                    Overview="@Empire.Flag.Overview"/>
            }

            @if (Empire.Map is not null)
            {
                <ImageWithOverviewCard
                    Title="@L["History_EmpireMap"]"
                    Source="@Empire.Map.Source"
                    Overview="@Empire.Map.Overview"/>
            }

            <AuthorizeView>
                <QuizCard ArticleId="@Empire.Id" HasQuiz="@HasQuiz" Activity="@Activity"/>

                <UserToolbarCard
                    ArticleId="@Empire.Id"
                    Activity="@Activity"
                    OnBookmarkClick="@OnBookmarkClick"
                    OnLikeClick="@OnLikeClick"
                    OnDislikeClick="@OnDislikeClick"/>
            </AuthorizeView>
        </Sidebar>
    </ContentGrid>

    <RelatedArticles
        Class="mt-sm-6"
        ArticleId="@Empire.Id"
        Title="@L["Shared_RelatedArticles"]"
        OnBookmarkClick="@OnBookmarkClick"/>
</EduContainer>

@code {
    private string? _style;

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["History_Title"], HistoryUrl.Root),
        new BreadcrumbItem(L[$"History_Epoch{Empire.Epoch.ToFastString()}"], HistoryUrl.Content.Articles(Empire.Epoch))
    };

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [CascadingParameter]
    private CascadingTheme? ThemeProvider { get; set; }

    [CascadingParameter]
    private CustomerState Customer { get; set; } = default!;

    [Parameter, EditorRequired]
    public ArticleDetail.EmpireModel Empire { get; set; } = default!;

    [Parameter, EditorRequired]
    public UserArticleActivityModel? Activity { get; set; }

    [Parameter, EditorRequired]
    public bool HasQuiz { get; set; }

    [Parameter, EditorRequired]
    public Func<Task<bool>> OnLikeClick { get; set; } = () => Task.FromResult(false);

    [Parameter, EditorRequired]
    public Func<Task<bool>> OnDislikeClick { get; set; } = () => Task.FromResult(false);

    [Parameter, EditorRequired]
    public Func<string, Task<ApiResult<bool>>> OnBookmarkClick { get; set; } = _ => Task.FromResult(ApiResult<bool>.Success(false));

    protected override void OnParametersSet()
    {
        var overlay = $"--mud-palette-overlay-{(ThemeProvider?.IsDarkMode == true ? "dark" : "light")}";

        _style = StyleBuilder
            .Default("background", $"linear-gradient(0deg, var(--mud-palette-background) 5%, var({overlay}) 100%), url('{Empire.ImageUrl}')")
            .AddStyle("background-size", "cover")
            .AddStyle("background-repeat", "no-repeat")
            .AddStyle("background-position", "top center")
            .Build();
    }

    private string DateTimeFormatter(DateTime date) =>
        Customer.Humanize(date);

}