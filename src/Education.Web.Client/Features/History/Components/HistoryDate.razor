@using Education.Web.Client.Features.History.Services
@using System.Text

<MudText Typo="@Typo" Color="@Color" Align="Align" Class="@Class">
    @_date
</MudText>

@code {
    private string? _date;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Parameter]
    public HistoricalDateModel? Date { get; set; }

    [Parameter]
    public Typo Typo { get; set; } = Typo.subtitle1;

    [Parameter]
    public Color Color { get; set; } = Color.Default;

    [Parameter]
    public Align Align { get; set; }

    [Parameter]
    public string? Class { get; set; }

    [Parameter, EditorRequired]
    public Func<DateTime, string> DateTimeFormatter { get; set; } = date => date.ToLongDateString();
    
    protected override void OnInitialized() =>
        _date = Date is null ? L["Unknown_Title"] : Format(Date);

    private string Format(HistoricalDateModel date)
    {
        var (year, month, day) = date;
        var sb = new StringBuilder(15);

        if (month.HasValue && day.HasValue)
        {
            sb.Append(DateTimeFormatter(new DateTime(Math.Abs(year), (int)month.Value, (int)day.Value)));

            if (year < 0)
                sb.Append(' ')
                    .Append(L["History_DateBc"]);

            return sb.ToString();
        }

        if (day.HasValue)
            sb.Append(day.Value)
                .Append(' ');

        if (month.HasValue)
            sb.Append(CultureInfo.InvariantCulture.DateTimeFormat.GetMonthName((int)month.Value))
                .Append(' ');

        sb.Append(Math.Abs(year));

        if (year < 0)
            sb.Append(' ')
                .Append(L["History_DateBc"]);

        return sb.ToString();
    }

}