@using System.Text
<MudText Typo="@Typo" Color="@Color" Align="Align" Class="@Class">
    @_date
</MudText>

@code {
    private string? _date;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Parameter]
    public HistoricalDateModel? Date { get; set; }

    [Parameter]
    public Typo Typo { get; set; } = Typo.subtitle1;

    [Parameter]
    public Color Color { get; set; } = Color.Default;

    [Parameter]
    public Align Align { get; set; }

    [Parameter]
    public string? Class { get; set; }

    [Parameter, EditorRequired]
    public Func<DateTime, string> DateTimeFormatter { get; set; } = date => date.ToLongDateString();

    protected override void OnParametersSet() =>
        _date = Date is null ? L["Unknown_Title"] : Format(Date);

    private string Format(HistoricalDateModel date)
    {
        if (date is { IsFull: true, Year: > 999 })
        {
            var value = new DateTime(date.Year, (int)date.Month.GetValueOrDefault(), (int)date.Day.GetValueOrDefault());
            return DateTimeFormatter(value);
        }
        
        var sb = new StringBuilder(15);

        if (date.Day.HasValue)
            sb.Append(date.Day.Value)
                .Append(' ');

        if (date.Month.HasValue)
            sb.Append(CultureInfo.InvariantCulture.DateTimeFormat.GetMonthName((int)date.Month.Value))
                .Append(' ');

        sb.Append(Math.Abs(date.Year));

        if (date.Year < 0)
            sb.Append(' ')
                .Append(L["History_Date_BCE"]);

        return sb.ToString();
    }

}