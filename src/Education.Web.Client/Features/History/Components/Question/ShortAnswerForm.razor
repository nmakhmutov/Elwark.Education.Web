@using FluentValidation
@using Education.Web.Client.Models.Quiz
<EditForm Model="@UserAnswer" OnValidSubmit="OnValidSubmit">
    <FluentValidationValidator Validator="@_validator"/>

    <div class="d-flex flex-column align-center mb-3 @(CorrectAnswer is null ? "mb-sm-6" : "")">
        <MudTextField
            @bind-Value="@(UserAnswer.Answer)"
            Label="@L["Quiz_UserAnswer"]"
            For="@(() => UserAnswer.Answer)"
            Disabled="@(CorrectAnswer is not null)"/>

        @if (CorrectAnswer is not null)
        {
            <MudText Typo="Typo.subtitle2" Color="@(CorrectAnswer.IsCorrect ? Color.Success : Color.Error)">
                @CorrectAnswer.Answer
            </MudText>
        }
    </div>

    @if (CorrectAnswer is null)
    {
        <div class="d-flex flex-row justify-center">
            <LoadingButton
                DisableElevation
                Variant="Variant.Filled"
                Color="Color.Primary"
                IsLoading="@IsLoading"
                Text="@L["Quiz_AnswerToQuestion"]"
                LoadingText="@L["Loading_Title"]"
                ButtonType="ButtonType.Submit"/>
        </div>

        <MudText Align="Align.Center" Typo="Typo.subtitle2" Color="@Color.Error" Class="mt-3 mt-sm-6">
            <ValidationSummary/>
        </MudText>
    }
    else
    {
        <div class="d-flex flex-row justify-center mb-3 mb-sm-6">
            <MudButton
                Variant="Variant.Filled"
                Color="Color.Primary"
                OnClick="@OnNextClick"
                DisableElevation>
                @OnNextTitle
            </MudButton>
        </div>

        if (CorrectAnswer.IsCorrect)
        {
            <MudText Align="Align.Center" Typo="Typo.subtitle2" Color="@Color.Success">
                @L["Quiz_CorrectAnswer"]
            </MudText>
        }
        else
        {
            <MudText Align="Align.Center" Typo="Typo.subtitle2" Color="@Color.Error">
                @L["Quiz_IncorrectAnswer"]
            </MudText>
        }
    }
</EditForm>

@code {
    private Validator _validator = default!;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Parameter, EditorRequired]
    public bool IsLoading { get; set; }

    [Parameter, EditorRequired]
    public ShortAnswerModel UserAnswer { get; set; } = default!;

    [Parameter, EditorRequired]
    public AnswerResult.ShortModel? CorrectAnswer { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<ShortAnswerModel> OnAnswerClick { get; set; }

    [Parameter, EditorRequired]
    public string OnNextTitle { get; set; } = string.Empty;
    
    [Parameter, EditorRequired]
    public EventCallback OnNextClick { get; set; }

    protected override void OnInitialized() =>
        _validator = new Validator(L);

    private Task OnValidSubmit() =>
        OnAnswerClick.InvokeAsync(UserAnswer);

    public sealed class Validator : AbstractValidator<ShortAnswerModel>
    {
        public Validator(IStringLocalizer<App> localizer) =>
            RuleFor(x => x.Answer)
                .NotEmpty()
                .WithMessage(localizer["Quiz_AnswerCannotBeEmpty"]);
    }

}