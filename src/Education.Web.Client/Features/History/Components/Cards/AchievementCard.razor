@using Education.Web.Client.Features.History.Services.User.Model

<section class="@_class" id="@Achievement.Id">
    @switch (Achievement)
    {
        case Achievement.LadderModel achievement:
            <aside class="icon">
                <img class="image" src="@achievement.IconUrl" alt="@_alt" loading="lazy"/>
            </aside>
            <section class="content">
                <h6 class="title">
                    @achievement.Title
                </h6>
                <section class="progress">
                    <div class="d-flex align-center justify-space-between mb-1">
                        <MudText Typo="Typo.body1" Class="text-transform-up">
                            @L["Shared_AchievementLevel", achievement.Level]
                        </MudText>

                        <div class="d-flex flex-row align-center">
                            <MetricNumber Value="@achievement.Score" Typo="Typo.body1"/>
                            <span>/</span>
                            <MetricNumber Value="@achievement.Threshold" Typo="Typo.body1"/>
                        </div>
                    </div>
                    <MudProgressLinear Class="mb-1" Min="0" Max="100" Value="@achievement.Completeness" Color="Color.Primary"/>
                    <div class="d-flex flex-row">
                        @foreach (var reward in achievement.Rewards)
                        {
                            <InternalMoney Class="mr-3" Typo="Typo.body1" Currency="@reward.Currency" Amount="@reward.Amount" Horizontal/>
                        }
                    </div>
                </section>
            </section>
            break;

        case Achievement.ProgressiveModel achievement:
            <aside class="icon">
                <img class="image" src="@achievement.IconUrl" alt="@_alt" loading="lazy"/>
            </aside>
            <section class="content">
                <h6 class="title">
                    @achievement.Title
                </h6>
                <section class="progress">
                    <MudProgressLinear Class="mb-1" Min="0" Max="100" Value="@achievement.Completeness" Color="Color.Primary"/>
                    <div class="d-flex flex-row">
                        @foreach (var reward in achievement.Rewards)
                        {
                            <InternalMoney Class="mr-3" Currency="@reward.Currency" Amount="@reward.Amount" Horizontal/>
                        }
                    </div>
                </section>
            </section>
            break;

        case Achievement.CompletedModel achievement:
            <aside class="icon">
                <img class="image" src="@achievement.IconUrl" alt="@_alt" loading="lazy"/>
            </aside>
            <section class="content">
                <h6 class="title">
                    @achievement.Title
                </h6>
                <section class="progress">
                    <MudText Class="mb-1" Typo="Typo.body2">
                        @L["Shared_AchievementCompletedOn", DateTimeFormatter(achievement.UnlockedAt)]
                    </MudText>
                    <MudText Class="@(achievement.GlobalUnlockedPercent < 10 ? "rare-achievement" : null)" Typo="Typo.caption">
                        @L["Shared_PercentOfUsersHaveThisAchievement", achievement.GlobalUnlockedPercent]
                    </MudText>
                </section>
            </section>
            break;
    }

    <p class="mud-typography mud-typography-body1 description">
        @Achievement.Description
    </p>
</section>

@code {
    private string? _alt;
    private string? _class;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Parameter, EditorRequired]
    public Achievement Achievement { get; set; } = default!;

    [Parameter]
    public bool Paper { get; set; }

    [Parameter]
    public bool Dense { get; set; }

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public Func<DateTime, string> DateTimeFormatter { get; set; } = date => date.ToLongDateString();

    protected override void OnInitialized()
    {
        _alt = $"{L["Shared_Achievements"]}: {Achievement.Title}";

        _class = CssBuilder.Default("grid")
            .AddClass("mud-paper", Paper)
            .AddClass("completed", Paper && Achievement is Achievement.CompletedModel)
            .AddClass("pa-3 pa-sm-6", !Dense)
            .AddClass(Class)
            .Build();
    }

}