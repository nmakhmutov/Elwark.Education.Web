<section class="@Class">
    @if (Status == CourseLearningStatus.InProgress)
    {
        <CourseProgress Progress="@Completeness" Size="Size" Typo="Typo"/>
    }
    else
    {
        <MudChip
            Class="ma-0"
            Variant="Variant.Outlined"
            Size="@Size"
            Color="@_color"
            Icon="@_icon"
            Text="@L.GetCourseLearningStatusTitle(Status)"/>
    }
</section>

@code {
    private Color _color;
    private string? _icon;

    [Inject]
    private IStringLocalizer<App> L { get; init; } = default!;

    [Parameter, EditorRequired]
    public uint Completeness { get; set; }

    [Parameter, EditorRequired]
    public CourseLearningStatus Status { get; set; }

    [Parameter]
    public Size Size { get; set; } = Size.Medium;

    [Parameter]
    public Typo Typo { get; set; } = Typo.body1;

    [Parameter]
    public string? Class { get; set; }
    
    
    protected override void OnParametersSet() =>
        (_color, _icon) = Status switch
        {
            CourseLearningStatus.NotStarted => (Color.Default, Icons.Material.Outlined.RadioButtonUnchecked),
            CourseLearningStatus.InProgress => (Color.Default, Icons.Material.Outlined.RadioButtonUnchecked),
            CourseLearningStatus.ExaminationReady => (Color.Info, Icons.Material.Outlined.ModeStandby),
            CourseLearningStatus.Completed => (Color.Success, Icons.Material.Outlined.CheckCircle),
            _ => throw new ArgumentOutOfRangeException()
        };
}