@using Education.Web.Client.Features.History.Services.Search.Model
@using Education.Web.Client.Features.History.Services.Search.Request
@using Education.Web.Client.Features.History.Services.Search
@inherits LayoutComponentBase

<CascadingTheme>
    <CascadingHistorySettings>
        <MudLayout Class="d-flex flex-column">
            <AppBar Title="@L["History_Title"]" Href="@HistoryUrl.Root" DrawerToggleCallback="@ToggleDrawerAsync">
                <div class="w-sm-33 w-md-50">
                    <MudAutocomplete
                        T="SearchModel"
                        @ref="@_searchAutocomplete"
                        DebounceInterval="300"
                        AdornmentIcon="@Icons.Material.Outlined.Search"
                        Placeholder="@L["Search"]"
                        IconSize="Size.Small"
                        Margin="Margin.Dense"
                        Variant="Variant.Outlined"
                        Adornment="Adornment.Start"
                        SearchFuncWithCancel="OnSearch"
                        ValueChanged="OnSearchResult"
                        TextChanged="OnTextChanged"
                        ResetValueOnEmptyText
                        ShowProgressIndicator
                        Clearable
                        Dense>
                        <ItemTemplate Context="result">
                            <div class="d-flex align-center">
                                <MudAvatar Image="@result.ImageUrl" Size="Size.Large" Square Class="mr-4"/>
                                <div class="one-line-text">
                                    <MudText Class="mud-text-secondary" Typo="Typo.caption">
                                        @result.Category
                                    </MudText>
                                    <MudText Typo="Typo.body1">
                                        @result.Title
                                    </MudText>
                                    <MudText Typo="Typo.caption">
                                        @result.Overview
                                    </MudText>
                                </div>
                            </div>
                        </ItemTemplate>
                        <MoreItemsTemplate>
                            <MudLink Class="px-3" OnClick="@OnSearchMore">
                                More results
                            </MudLink>
                        </MoreItemsTemplate>
                    </MudAutocomplete>
                </div>
            </AppBar>

            <HistoryDrawer DrawerOpen="@_isOpen" OnDrawerOpenChanged="@OnDrawerOpenChanged"/>

            <main class="mud-main-content">
                @Body
            </main>

            <footer class="pa-3 pa-sm-6">
                <MudText Typo="Typo.subtitle1">
                    &copy; @DateTime.Now.Year Elwark
                </MudText>
                <img class="image" src="@ElwarkIcons.Primary60X60" alt="Elwark logo" loading="lazy"/>
            </footer>

            <MudScrollToTop TopOffset="400">
                <MudFab Icon="@Icons.Material.Outlined.KeyboardArrowUp" Color="Color.Primary"/>
            </MudScrollToTop>
        </MudLayout>
    </CascadingHistorySettings>
</CascadingTheme>

@code {
    private bool _isOpen;
    private string? _search;
    private MudAutocomplete<SearchModel> _searchAutocomplete = default!;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistorySearchService HistorySearchService { get; set; } = default!;

    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    [CascadingParameter]
    private CascadingAppSettings AppSettings { get; set; } = default!;

    protected override void OnParametersSet() =>
        _isOpen = AppSettings.IsSidebarOpen;

    private ValueTask ToggleDrawerAsync() =>
        OnDrawerOpenChanged(!_isOpen);

    private ValueTask OnDrawerOpenChanged(bool value) =>
        AppSettings.ToggleSidebarAsync(_isOpen = value);

    private async Task<IEnumerable<SearchModel>> OnSearch(string text, CancellationToken ct)
    {
        if (string.IsNullOrWhiteSpace(text) || text.Length < 2)
            return Array.Empty<SearchModel>();

        var result = await HistorySearchService.SearchAsync(new SearchRequest(text, 0, 11), ct);
        return result.IsSuccess ? result.Value.Hints : Array.Empty<SearchModel>();
    }

    private Task OnSearchResult(SearchModel? entry)
    {
        if (entry is null)
            return Task.CompletedTask;

        Navigation.NavigateTo(entry.Href);
        return _searchAutocomplete.Clear();
    }

    private Task OnSearchMore()
    {
        Navigation.NavigateTo(HistoryUrl.Search(_search));
        return _searchAutocomplete.Clear();
    }

    private void OnTextChanged(string value) =>
        _search = value;

}