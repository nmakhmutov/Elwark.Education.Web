@page "/account/my/notifications"
@using Education.Web.Client.Features.Customer.Services.Notification.Request
@using Education.Web.Client.Models
@using Education.Web.Client.Features.Customer.Services.Notification.Model
@using Education.Web.Client.Features.Customer.Services.Notification
@layout MainLayout
@attribute [Authorize]

<PageTitle>
    @L["Notifications"]
</PageTitle>

<EduContainer Class="pa-3 pa-sm-6" MaxWidth="EduWidth.W1920">
    <section class="grid">
        <section class="account">
            <AccountCard/>
        </section>
        <section class="notifications">
            <EduPageHeader Class="mb-3 mb-sm-6" Title="@L["Notifications"]" Breadcrumbs="@Breadcrumbs">
                <MudButton
                    Style="text-transform: none"
                    Variant="Variant.Outlined"
                    Color="Color.Primary"
                    Size="Size.Medium"
                    StartIcon="@Icons.Material.Outlined.DoneAll"
                    Disabled="@(!NotificationService.HasNotifications)"
                    OnClick="MarkAllAsReadAsync">
                    @L["Notifications:MarkAsRead"]
                </MudButton>
            </EduPageHeader>

            <ApiViewer Result="_result">
                @if (_notifications.Count == 0)
                {
                    <EduEmpty Title="@L["Notifications:NothingNew"]"/>
                }

                <Virtualize Items="@_notifications" Context="item">
                    <section class="mud-paper d-flex pa-3 mb-3">
                        <NotificationAvatar Class="mr-3" Subject="@item.Subject"/>
                        <article class="flex-1">
                            @if (string.IsNullOrEmpty(item.Message))
                            {
                                <MudText Class="mud-text-secondary" Typo="Typo.body2">
                                    @Customer.Humanize(item.CreatedAt)
                                </MudText>
                                <MudText Typo="Typo.body1">
                                    @item.Title
                                </MudText>
                            }
                            else
                            {
                                <header class="d-flex align-center mud-text-secondary">
                                    <MudText Typo="Typo.body2">
                                        @item.Title
                                    </MudText>
                                    <MudIcon Class="dot mx-1" Icon="@Icons.Material.Outlined.Adjust"/>
                                    <MudText Typo="Typo.body2">
                                        @Customer.Humanize(item.CreatedAt)
                                    </MudText>
                                </header>
                                <MudText Typo="Typo.body1">
                                    @item.Message
                                </MudText>
                            }
                        </article>
                        <aside>
                            <MudIconButton
                                Icon="@Icons.Material.Outlined.MarkEmailRead"
                                OnClick="@(() => MarkAsReadAsync(item.Id))"/>
                        </aside>
                    </section>
                </Virtualize>

                @if (!string.IsNullOrEmpty(_request.Token))
                {
                    <asside class="d-flex justify-center">
                        <LoadingButton
                            DisableElevation
                            Variant="Variant.Filled"
                            Color="Color.Primary"
                            Text="@L["Shared_ButtonSeeMore"]"
                            IsLoading="@_isMoreLoading"
                            OnClick="@LoadMore"/>
                    </asside>
                }
            </ApiViewer>
        </section>
    </section>
</EduContainer>

@code {
    private NotificationsRequest _request = new(15);
    private ApiResult<PagingTokenModel<NotificationModel>> _result = ApiResult<PagingTokenModel<NotificationModel>>.Loading();
    private readonly List<NotificationModel> _notifications = new();
    private bool _isMoreLoading;

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["Account_Title"].Value, CustomerUrl.Root)
    };

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private INotificationService NotificationService { get; set; } = default!;

    [CascadingParameter]
    private CustomerState Customer { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        _result = await NotificationService.GetAsync(_request);
        _result.Match(x =>
        {
            _notifications.AddRange(x.Items);
            _request = new NotificationsRequest(10, x.Next);
        });
    }

    private async Task LoadMore()
    {
        if (_request.Token is null)
            return;

        _isMoreLoading = true;
        (await NotificationService.GetAsync(_request))
            .Match(
                x =>
                {
                    _notifications.AddRange(x.Items);
                    _request = _request with { Token = x.Next };
                },
                e => _result = ApiResult<PagingTokenModel<NotificationModel>>.Fail(e)
            );
        _isMoreLoading = false;
    }

    private Task MarkAsReadAsync(string id)
    {
        _notifications.RemoveAll(x => x.Id == id);
        return NotificationService.MarkAsReadAsync(id);
    }

    private Task MarkAllAsReadAsync()
    {
        _notifications.Clear();
        return NotificationService.MarkAllAsReadAsync();
    }

}