@page "/history/my/bookmarks"
@using Education.Web.Client.Services.History
@using Education.Web.Client.Services.History.User
@using Education.Web.Client.Services.History.User.Request
@layout HistoryLayout
@attribute [Authorize]

<PageTitle>@L["Bookmarks"]</PageTitle>
<EduContainer Class="py-3 py-sm-6" MaxWidth="EduWidth.W1920">
    <EduPageHeader Title="@L["Bookmarks"]" Breadcrumbs="@Breadcrumbs">
        @if (!_isEmpty)
        {
            <div>
                <MudSelect Label="@L["Bookmarks:Sort"]" T="BookmarksRequest.SortType" Value="@_request.Sort" ValueChanged="@OnSortChanged">
                    @foreach (var sort in BookmarksRequest.SortTypes)
                    {
                        <MudSelectItem T="BookmarksRequest.SortType" Value="sort.Key">
                            @L[$"Bookmarks:{sort.Value}"]
                        </MudSelectItem>
                    }
                </MudSelect>
            </div>
        }
    </EduPageHeader>
</EduContainer>

@if (_isLoading)
{
    <Spinner/>
}
else
{
    <EduContainer Class="pb-3 pb-sm-6" MaxWidth="EduWidth.W1920">
        @if (_isEmpty)
        {
            <EduEmpty
                Class="grid-column-full"
                Title="@L["Bookmarks:EmptyTitle"]"
                Subtitle="@L["Bookmarks:EmptySubtitle"]"/>
        }
        else
        {
            <div class="grid px-3 px-sm-6 mb-3">
                <div class="image"></div>
                <div class="title">@L["Article:Title"]</div>
                <div class="epoch">@L["History:Epoch"]</div>
                <div class="rating">@L["Rating"]</div>
                <div class="passed-test">@L["NumberOfTests:Passed"]</div>
                <div class="time-spent">@L["TimeSpent:Total"]</div>
                <div class="actions"></div>
            </div>
            <Virtualize @ref="@_virtualize" ItemsProvider="FavoriteDataProvider" ItemSize="110" Context="item">
                <div class="grid mud-paper pa-3 pa-sm-6 mb-3 mb-sm-6">
                    <div class="image">
                        <MudAvatar Size="Size.Large" Image="@item.Article.ThumbnailUrl"/>
                    </div>
                    <div class="title">
                        <MudLink Href="@HistoryUrl.Content.Article(item.Article.Id)">
                            @item.Article.Title
                        </MudLink>
                    </div>
                    <div class="epoch">
                        <MudChip Class="mx-0" Label DisableRipple Size="Size.Small" Variant="Variant.Text" Color="Color.Primary" Link="@HistoryUrl.Content.Epoch(item.Article.Epoch)">
                            @L[$"Epoch:{item.Article.Epoch.ToFastString()}"]
                        </MudChip>
                    </div>
                    <div class="rating">
                        <ArticleRating Rating="@item.Article.Rating" ShowDetails Class="d-inline-flex flex-column align-center"/>
                    </div>
                    <div class="passed-test">
                        <div class="d-flex align-center">
                            <MudIcon Icon="@EduIcons.Tests" Size="Size.Small" Class="mr-1"/>
                            <MudText Typo="Typo.body2">
                                @item.Activity.PassedTests.ToReadable()
                            </MudText>
                        </div>
                    </div>
                    <div class="time-spent">
                        <div class="d-flex align-center">
                            <MudIcon Icon="@EduIcons.TimeSpent" Size="Size.Small" Class="mr-1"/>
                            <MudText Typo="Typo.body2">
                                @item.Activity.TimeSpent.ToSimpleFormat()
                            </MudText>
                        </div>
                    </div>
                    <div class="actions">
                        @if (item.Activity.PassedTests > 0)
                        {
                            <MudTooltip Text="@L["Button:Details"]">
                                <MudIconButton
                                    Link="@HistoryUrl.User.MyArticles(item.Article.Id)"
                                    Icon="@Icons.Material.Outlined.RemoveRedEye"/>
                            </MudTooltip>
                        }
                        <BookmarkButton
                            IsBookmarked="@item.Activity.IsBookmarked"
                            ArticleId="@item.Article.Id"
                            OnBookmarkClick="@OnBookmarkClick"/>
                    </div>
                </div>

            </Virtualize>
        }
    </EduContainer>
}

@code {
    private bool _isLoading = true;
    private bool _isEmpty = true;
    private Virtualize<UserArticleOverviewModel> _virtualize = default!;
    private readonly List<UserArticleOverviewModel> _items = new();
    private BookmarksRequest _request = new(BookmarksRequest.SortType.DateAddedNewest, 20);

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["History"].Value, HistoryUrl.Root),
        new BreadcrumbItem(L["Profile"].Value, HistoryUrl.User.MyProfile)
    };

    [Inject]
    private IHistoryUserService UserService { get; set; } = default!;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var data = await UserService.GetBookmarksAsync(_request);
        if (data.IsSuccess)
        {
            _request = _request with { Token = data.Value.Next };
            _items.AddRange(data.Value.Items);
        }

        _isEmpty = _items.Count == 0;
        _isLoading = false;
    }

    private async ValueTask<ItemsProviderResult<UserArticleOverviewModel>> FavoriteDataProvider(ItemsProviderRequest request)
    {
        int GetLength() =>
            _items.Count + (string.IsNullOrEmpty(_request.Token) ? 0 : 1);

        var isRangeAvailable = _items.Count > (request.StartIndex + 1) * request.Count ||
                               (_items.Count > 0 && string.IsNullOrEmpty(_request.Token));

        if (isRangeAvailable)
            return new ItemsProviderResult<UserArticleOverviewModel>(_items.Skip(request.StartIndex).Take(request.Count), GetLength());

        var data = await UserService.GetBookmarksAsync(_request = _request with { Count = request.Count });
        if (data.IsFailed)
            return new ItemsProviderResult<UserArticleOverviewModel>(_items, GetLength());

        _request = _request with { Token = data.Value.Next };
        _items.AddRange(data.Value.Items);

        return new ItemsProviderResult<UserArticleOverviewModel>(_items.Skip(request.StartIndex), GetLength());
    }

    private async Task<bool> OnBookmarkClick(string articleId)
    {
        var result = await UserService.ToggleBookmarkAsync(articleId);
        return result is { IsSuccess: true, Value: true };
    }

    private Task OnSortChanged(BookmarksRequest.SortType sort)
    {
        _request = _request with { Sort = sort, Token = null };
        _items.Clear();

        return _virtualize.RefreshDataAsync();
    }

}