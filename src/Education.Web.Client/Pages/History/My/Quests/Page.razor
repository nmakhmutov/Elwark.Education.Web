@page "/history/my/quests"
@using Education.Web.Client.Services.History.User.Model
@using Education.Web.Client.Services.History.User
@using Education.Web.Client.Pages.History.My.Quests.Components
@using Education.Http
@layout HistoryLayout
@attribute [Authorize]

<PageTitle>@L["Quests"]</PageTitle>

<EduContainer Class="py-3 py-sm-6" MaxWidth="EduWidth.W1920">
    <EduPageHeader Title="@L["Quests"]" Breadcrumbs="@Breadcrumbs"/>
</EduContainer>

<ApiViewer Result="@_result" Context="data">
    <EduContainer Class="pb-3 pb-sm-6" MaxWidth="EduWidth.W1920">
        <div class="grid">
            <MudTabs Class="nav" @bind-ActivePanelIndex="@_index" Rounded Centered>
                <MudTabPanel Text="Daily"/>
                <MudTabPanel Text="Weekly"/>
            </MudTabs>
            @switch (_index)
            {
                case 0:
                    if (data.DailyQuest.Quests.Length > 0)
                    {
                        <div class="quests">
                            @foreach (var quest in data.DailyQuest.Quests)
                            {
                                <QuestProgressCard Class="mb-3" Quest="@quest"/>
                            }
                        </div>
                    }

                    <div class="@(data.DailyQuest.Quests.Length == 0 ? "start" : "rewards")">
                        <QuestRewardsCard
                            Title="@L["Rewards"]"
                            Subtitle="Complete all daily missions"
                            Status="@data.DailyQuest.Status"
                            ExpiresAt="@data.DailyQuest.ExpiresAt"
                            Rewards="@data.DailyQuest.Rewards"
                            OnStart="@StartDailyQuestsAsync"
                            OnCollect="@CollectDailyQuestsAsync"
                            OnExpired="@OnInitializedAsync"/>
                    </div>
                    break;

                case 1:
                    if (data.WeeklyQuest.Quests.Length > 0)
                    {
                        <div class="quests">
                            @foreach (var quest in data.WeeklyQuest.Quests)
                            {
                                <QuestProgressCard Class="mb-3" Quest="@quest"/>
                            }
                        </div>
                    }

                    <div class="@(data.WeeklyQuest.Quests.Length == 0 ? "start" : "rewards")">
                        <QuestRewardsCard
                            Title="@L["Rewards"]"
                            Subtitle="Complete all weekly missions"
                            Status="@data.WeeklyQuest.Status"
                            ExpiresAt="@data.WeeklyQuest.ExpiresAt"
                            Rewards="@data.WeeklyQuest.Rewards"
                            OnStart="@StartWeeklyQuestsAsync"
                            OnCollect="@CollectWeeklyQuestsAsync"
                            OnExpired="@OnInitializedAsync"/>
                    </div>
                    break;
            }

            <div class="bonus">
                <DailyBonusCard
                    Bonus="@data.DailyBonus"
                    OnClaim="@ClaimDailyBonusAsync"
                    OnReject="@RejectDailyBonusAsync"
                    OnReached="@OnInitializedAsync"/>
            </div>
        </div>
    </EduContainer>
</ApiViewer>

@code {
    private int _index;
    private ApiResult<QuestModel> _result = ApiResult<QuestModel>.Loading();

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["History"].Value, HistoryUrl.Root),
        new BreadcrumbItem(L["Profile"].Value, HistoryUrl.User.MyProfile)
    };

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryUserService UserService { get; set; } = default!;

    protected override async Task OnInitializedAsync() =>
        _result = await UserService.GetQuestAsync();

    private async Task ClaimDailyBonusAsync()
    {
        var response = await UserService.ClaimDailyBonusAsync();
        if (response.IsSuccess)
            _result = ApiResult<QuestModel>.Success(_result.Value with { DailyBonus = response.Value });
    }

    private async Task RejectDailyBonusAsync()
    {
        var response = await UserService.RejectDailyBonusAsync();
        if (response.IsSuccess)
            _result = ApiResult<QuestModel>.Success(_result.Value with { DailyBonus = response.Value });
    }

    private async Task StartDailyQuestsAsync()
    {
        var response = await UserService.StartDailyQuestAsync();
        if (response.IsSuccess)
            _result = ApiResult<QuestModel>.Success(_result.Value with { DailyQuest = response.Value });
    }

    private async Task CollectDailyQuestsAsync()
    {
        var response = await UserService.CollectDailyQuestAsync();
        if (response.IsSuccess)
            _result = ApiResult<QuestModel>.Success(_result.Value with { DailyQuest = response.Value });
    }

    private async Task StartWeeklyQuestsAsync()
    {
        var response = await UserService.StartWeeklyQuestAsync();
        if (response.IsSuccess)
            _result = ApiResult<QuestModel>.Success(_result.Value with { WeeklyQuest = response.Value });
    }

    private async Task CollectWeeklyQuestsAsync()
    {
        var response = await UserService.CollectWeeklyQuestAsync();
        if (response.IsSuccess)
            _result = ApiResult<QuestModel>.Success(_result.Value with { WeeklyQuest = response.Value });
    }

}