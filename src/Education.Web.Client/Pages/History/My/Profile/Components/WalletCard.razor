@using ApexCharts
@using Education.Web.Client.Services.Model.User
@using Color = MudBlazor.Color
@using Align = MudBlazor.Align

<section class="@($"mud-paper d-flex flex-column pa-3 {Class}")">
    <header class="mud-primary white-text rounded pa-3">
        <div class="d-flex align-center justify-space-between">
            <MudText Typo="Typo.subtitle1">
                @L["InternalMoney:Balance"]
            </MudText>
            <MudChip Class="white-text" Label Icon="@_tendingIcon" Text="@($"{_tendingValue:F1}%")"/>
        </div>
        <div class="d-flex align-center justify-space-between">
            <div class="d-flex align-center">
                <MudIcon Class="mr-1" Icon="@EduIcons.Silver" Size="Size.Medium"/>
                <ReadableNumber Class="white-text" Value="@Silver.Balance" Typo="Typo.h4"/>
            </div>
            <ApexChart TItem="BudgetModel" Options="@_options" Width="@("80px")" Height="@("30px")">
                <ApexPointSeries
                    TItem="BudgetModel"
                    Items="@Silver.Accounting"
                    SeriesType="SeriesType.Line"
                    XValue="@(x => x.Month.ToDateTime(TimeOnly.MinValue, DateTimeKind.Utc))"
                    YValue="@(x => x.Balance)"
                    OrderBy="@(x => x.X)"/>
            </ApexChart>
        </div>
    </header>

    @foreach (var item in Silver.Accounting.Take(3))
    {
        <MudStack Class="mt-3" Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
            <MudStack Row AlignItems="AlignItems.Center">
                <MudAvatar Class="rounded white-text" Color="@(item.Balance == 0 ? Color.Default : Color.Primary)" Size="Size.Medium">
                    <MudIcon Icon="@Icons.Outlined.CalendarMonth" Size="Size.Medium"/>
                </MudAvatar>
                <MudText Typo="Typo.subtitle2" Align="Align.Start">
                    @L[$"Month:{CultureInfo.InvariantCulture.DateTimeFormat.GetMonthName(item.Month.Month)}"]
                </MudText>
            </MudStack>
            <MudStack Row AlignItems="AlignItems.Center">
                <div>
                    <InternalMoney Horizontal IconSize="Size.Small" Money="@(new Silver(item.Income))"/>
                    <MudText Class="mud-text-secondary" Typo="Typo.caption">
                        @L["InternalMoney:Income"]
                    </MudText>
                </div>
                <div>
                    <InternalMoney Horizontal IconSize="Size.Small" Money="@(new Silver(item.Expense))"/>
                    <MudText Class="mud-text-secondary" Typo="Typo.caption">
                        @L["InternalMoney:Expense"]
                    </MudText>
                </div>
            </MudStack>
        </MudStack>
    }

</section>

@code {
    private double _tendingValue;
    private string? _tendingIcon;

    private readonly ApexChartOptions<BudgetModel> _options = new()
    {
        Tooltip = new Tooltip
        {
            Enabled = false
        },
        Chart = new Chart
        {
            Background = "transparent",
            ForeColor = "var(--mud-palette-text-primary)",
            Sparkline = new ChartSparkline
            {
                Enabled = true
            }
        },
        Stroke = new Stroke
        {
            Colors = new List<string>
            {
                "#FFFFFF"
            },
            Curve = Curve.Smooth,
            Width = 3
        }
    };

    [Inject]
    public IStringLocalizer<App> L { get; set; } = default!;

    [Parameter, EditorRequired]
    public SilverWalletModel Silver { get; set; } = default!;

    [Parameter]
    public string? Class { get; set; }

    protected override void OnParametersSet()
    {
        var start = (double)Silver.Accounting[0].Balance;
        var end = (double)Silver.Accounting[1].Balance;

        _tendingValue = ((start - end) / end * 100) switch
        {
            double.NaN => 0,
            double.PositiveInfinity => 100,
            double.NegativeInfinity => -100,
            var x => start > end ? Math.Abs(x) : -Math.Abs(x)
        };

        _tendingIcon = _tendingValue switch
        {
            > 0 => Icons.Outlined.TrendingUp,
            < 0 => Icons.Outlined.TrendingDown,
            _ => Icons.Outlined.TrendingFlat
        };
    }

}