@using Education.Web.Client.Services.History.User.Model

<section class="grid @Class">
    @switch (Achievement)
    {
        case Achievement.CompletedModel achievement:
            <aside class="icon completed">
                <MudIcon Icon="@_icon" Size="Size.Large" Color="Color.Inherit"/>
            </aside>
            <header class="header">
                <h6 class="title">
                    @achievement.Title
                </h6>
                <MudText Typo="Typo.caption" Class="d-block">
                    @L["Achievement:Completed"] @achievement.CompletedAt.ToCustomerFormat(Customer.DateTimeInfo)
                </MudText>
            </header>
            break;

        case Achievement.LadderModel achievement:
            <aside class="icon @_background">
                <MudIcon Icon="@_icon" Size="Size.Large" Color="Color.Inherit"/>
                <MudText Typo="Typo.caption" Class="mt-1" Style="text-transform: uppercase" Color="Color.Inherit">
                    @L["Achievement:Level"] @achievement.Level
                </MudText>
            </aside>
            <header class="header">
                <h6 class="title">
                    @achievement.Title
                </h6>
            </header>
            <footer class="progress">
                <div class="d-flex flex-row mb-1">
                    <ReadableNumber Value="@achievement.Score" Typo="Typo.subtitle2"/>
                    <span>/</span>
                    <ReadableNumber Value="@achievement.Threshold" Typo="Typo.subtitle2"/>
                </div>
                <MudProgressLinear Class="mb-1" Min="0" Max="100" Value="@achievement.Completeness" Color="Color.Primary"/>
                <div class="d-flex flex-row">
                    @foreach (var reward in achievement.Rewards)
                    {
                        <InternalMoney Class="mr-3" Money="@reward" Horizontal/>
                    }
                </div>
            </footer>
            break;

        case Achievement.ProgressiveModel achievement:
            <aside class="icon @_background">
                <MudIcon Icon="@_icon" Size="Size.Large" Color="Color.Inherit"/>
            </aside>
            <header class="header">
                <h6 class="title">
                    @achievement.Title
                </h6>
            </header>
            <footer class="progress">
                <MudProgressLinear Class="mb-1" Min="0" Max="100" Value="@achievement.Completeness" Color="Color.Primary"/>
                <div class="d-flex flex-row">
                    @foreach (var reward in achievement.Rewards)
                    {
                        <InternalMoney Class="mr-3" Money="@reward" Horizontal/>
                    }
                </div>
            </footer>
            break;

        default:
            throw new ArgumentOutOfRangeException(nameof(Achievement));
    }

    <section class="description">
        <MudText Typo="Typo.body2">
            @Achievement.Description
        </MudText>
    </section>
</section>

@code {
    private string _icon = EduIcons.Achievements;
    private string _background = "black white-text";

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [CascadingParameter]
    private CustomerState Customer { get; set; } = default!;

    [Parameter, EditorRequired]
    public Achievement Achievement { get; set; } = default!;

    [Parameter]
    public string? Class { get; set; }
    
    protected override void OnParametersSet()
    {
        _background = Achievement.Category switch {
            "AllTests" => "deep-orange accent-2 white-text",
            "EasyTest" => "orange accent-2 white-text",
            "HardTest" => "orange accent-3 white-text",
            "MixedTest" => "orange accent-4 white-text",
            "AllEventGuesser" => "teal default white-text",
            _ => "green accent-4 white-text"
        };

        _icon = Achievement switch {
        {Category: "EasyTest" or "HardTest" or "MixedTest" or "AllTests", Name: "Successful"} => 
            EduIcons.Tests,
            
        {Category: "EasyTest" or "HardTest" or "MixedTest" or "AllTests", Name: "Score"} =>
            EduIcons.Score,
            
        {Category: "EasyTest" or "HardTest" or "MixedTest" or "AllTests", Name: "Experience"} =>
            Icons.Outlined.VerifiedUser,
            
        {Category: "EasyTest" or "HardTest" or "MixedTest" or "AllTests", Name: "Silver"} =>
            Icons.Outlined.Money,
            
        {Category: "EasyTest" or "HardTest" or "MixedTest" or "AllTests", Name: "CorrectAnswer"} => 
            Icons.Outlined.QuestionAnswer,
            
        {Category: "EasyTest" or "HardTest" or "MixedTest" or "AllTests", Name: "WithoutMistake"} => 
            Icons.Outlined.AddTask,
            
        {Category: "AllTests", Name: "CompleteOnce" } =>
            Icons.Outlined.DoneAll,
            
        {Category: "EventGuesser", Name: "Successful"} =>
            Icons.Outlined.ManageSearch,
            
        {Category: "EventGuesser", Name: "Points"} =>
            EduIcons.Score,
            
        {Category: "EventGuesser", Name: "Bonus"} =>
            Icons.Outlined.AccessTimeFilled,
            
        {Category: "EventGuesser", Name: "WithoutMistake"} =>
            Icons.Outlined.AddTask,
            
            _ => EduIcons.Achievements
            };
    }

}
