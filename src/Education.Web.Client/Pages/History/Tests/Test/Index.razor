@using Education.Web.Client.Pages.History.Components
@using Education.Web.Client.Pages.History.Tests.Test.Components
@using Education.Web.Client.Services.Model.Test
@using Education.Web.Client.Services.History.Test.Model
@using Education.Web.Client.Services.Model.Inventory
@using Education.Web.Client.Services.History.Test

@page "/history/tests/{id}"
@layout HistoryLayout
@attribute [Authorize]

<EduPage>
    @switch (_result.Status)
    {
        case Status.Loading:
            <Spinner/>
            break;

        case Status.Fail:
            <EduError Error="@_result.Error"/>
            break;

        case Status.Success:
            <PageTitle>@_testType: @_currentQuestion.Topic.Title</PageTitle>

            <EduContainer MaxWidth="EduWidth.W1280">
                <section class="grid">
                    <div>
                        <section class="mud-paper pa-3 pa-sm-6">
                            <MudText Class="d-block mud-text-secondary" Typo="Typo.caption" Align="Align.Center">
                                @_testType
                            </MudText>
                            <MudText Class="mb-3 mb-sm-6" Typo="Typo.h5" Align="Align.Center" Style="font-weight: 500">
                                @_currentQuestion.Topic.Title
                            </MudText>

                            @if (_currentQuestion.Image is not null)
                            {
                                <img class="image mb-3 mb-sm-6" src="@_currentQuestion.Image" alt="@_currentQuestion.Title"/>
                            }

                            <MudText Class="mb-6" Typo="Typo.subtitle1" Align="Align.Center">
                                @_currentQuestion.Title
                            </MudText>

                            @switch (_currentQuestion)
                            {
                                case MultipleAnswerQuestionModel question:
                                {
                                    <MultipleAnswerForm
                                        IsLoading="@_checking"
                                        IsTestCompleted="@IsCompleted"
                                        CorrectAnswer="@(_correctAnswer as MultipleAnswersResultModel)"
                                        UserAnswer="@(_userAnswer as MultipleAnswerModel ?? new MultipleAnswerModel())"
                                        Options="@question.Options"
                                        OnAnswer="@OnMultiplyAnswer"
                                        OnNext="@OnNext"
                                        OnComplete="@OnComplete"/>
                                    break;
                                }

                                case ShortAnswerQuestionModel:
                                {
                                    <ShortAnswerForm
                                        IsLoading="@_checking"
                                        IsTestCompleted="@IsCompleted"
                                        CorrectAnswer="@(_correctAnswer as ShortAnswerResultModel)"
                                        UserAnswer="@(_userAnswer as ShortAnswerModel ?? new ShortAnswerModel())"
                                        OnAnswer="@OnShortAnswer"
                                        OnNext="@OnNext"
                                        OnComplete="@OnComplete"/>
                                    break;
                                }

                                case SingleAnswerQuestionModel question:
                                {
                                    <SingleAnswerForm
                                        IsLoading="@_checking"
                                        IsTestCompleted="@IsCompleted"
                                        CorrectAnswer="@(_correctAnswer as SingleAnswerResultModel)"
                                        UserAnswer="@(_userAnswer as SingleAnswerModel ?? new SingleAnswerModel())"
                                        Options="@question.Options"
                                        OnAnswer="@OnSingleAnswer"
                                        OnNext="@OnNext"
                                        OnComplete="@OnComplete"/>
                                    break;
                                }

                                default:
                                    throw new ArgumentOutOfRangeException(nameof(_currentQuestion));
                            }
                        </section>
                    </div>

                    <aside>
                        <section class="mb-6">
                            <header class="d-flex justify-space-between">
                                <MudText Typo="Typo.subtitle1">
                                    @L["Test:QuestionOutOf", _test.Completed, _test.Questions]
                                </MudText>
                                <CountdownTimer Date="@_test.ExpiredAt" Color="@_countdownColor" OnComplete="@OnExpired"/>
                            </header>
                            <MudProgressLinear
                                Rounded
                                Min="0"
                                Max="100"
                                Value="@Progress"
                                Color="Color.Primary"
                                Size="Size.Medium"/>
                        </section>
                        <InventoryGrid Inventory="@(_inventory.OrderByDescending(x => x.IsApplicable))" Context="item">
                            @if (item.IsApplicable)
                            {
                                <InventoryButtonCard
                                    Id="@item.Id"
                                    Count="@item.Count"
                                    Title="@item.Title"
                                    Overview="@item.Overview"
                                    IconUrl="@item.IconUrl"
                                    ButtonText="@L["Inventory:Use"]"
                                    OnClick="@OnUseInventory"/>
                            }
                            else
                            {
                                <InventoryInfoCard
                                    Title="@item.Title"
                                    Overview="@item.Overview"
                                    Count="@item.Count"
                                    IconUrl="@item.IconUrl"/>
                            }
                        </InventoryGrid>
                    </aside>
                </section>
            </EduContainer>
            break;
    }
</EduPage>

@code {
    private ApiResult<TestModel> _result = ApiResult<TestModel>.Loading();
    private TestInventoryItemModel[] _inventory = Array.Empty<TestInventoryItemModel>();
    private Color _countdownColor = Color.Default;
    private TestOverviewModel _test = default!;
    private TestQuestionModel _currentQuestion = default!;
    private TestQuestionModel? _nextQuestion;
    private AnswerToQuestionModel? _userAnswer;
    private AnswerResultModel? _correctAnswer;
    private bool _checking;
    private string _testType = string.Empty;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryTestService TestService { get; set; } = default!;

    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    [Parameter]
    public string Id { get; set; } = string.Empty;

    private double Progress =>
        (double)_test.Completed / _test.Questions * 100;

    private bool IsCompleted =>
        _test.Completed == _test.Questions;

    protected override async Task OnParametersSetAsync()
    {
        _result = await TestService.GetAsync(Id);
        if (_result.IsFailed)
        {
            if (_result.Error.IsTestAlreadyCompleted())
                Navigation.NavigateTo(HistoryUrl.TopicTest.Conclusion(Id));

            if (_result.Error.IsTestNotFound())
                Navigation.NavigateTo(HistoryUrl.TopicTest.Conclusion(Id));

            return;
        }

        _test = _result.Data.Overview;
        _currentQuestion = _result.Data.Question;
        _inventory = _result.Data.Inventory;
        _testType = _test switch {
            EasyTestOverviewModel => L["Test:Easy"],
            HardTestOverviewModel => L["Test:Hard"],
            MixedTestOverviewModel => L["Test:Mixed"],
            _ => string.Empty
            };
    }

    private async Task OnExpired()
    {
        _countdownColor = Color.Error;
        _result = await TestService.GetAsync(Id);

        if (_result.IsFailed)
            Navigation.NavigateTo(HistoryUrl.TopicTest.Conclusion(Id));
    }

    private async Task OnShortAnswer(ShortAnswerModel answer)
    {
        _checking = true;
        _userAnswer = answer;

        var result = await TestService.CheckAsync(_test.Id, _currentQuestion.Id, answer);
        UpdateState(result);

        _checking = false;
    }

    private async Task OnSingleAnswer(SingleAnswerModel answer)
    {
        _checking = true;
        _userAnswer = answer;

        var result = await TestService.CheckAsync(_test.Id, _currentQuestion.Id, answer);
        UpdateState(result);

        _checking = false;
    }

    private async Task OnMultiplyAnswer(MultipleAnswerModel answer)
    {
        _checking = true;
        _userAnswer = answer;

        var result = await TestService.CheckAsync(_test.Id, _currentQuestion.Id, answer);
        UpdateState(result);

        _checking = false;
    }

    private void UpdateState(ApiResult<TestAnswerModel> result)
    {
        if (result.IsFailed)
        {
            if (result.Error.IsTestAlreadyCompleted())
            {
                Navigation.NavigateTo(HistoryUrl.TopicTest.Conclusion(Id));
                return;
            }

            Snackbar.Add(result.Error.Detail, Severity.Error);
            return;
        }

        _test = result.Data.Overview;
        _inventory = result.Data.Inventory;
        _nextQuestion = result.Data.NextQuestion;
        _correctAnswer = result.Data.Answer;

        StateHasChanged();
    }

    private void OnNext()
    {
        if (_nextQuestion is null)
            return;

        _currentQuestion = _nextQuestion;
        _nextQuestion = null;
        _userAnswer = null;
        _correctAnswer = null;

        StateHasChanged();
    }

    private void OnComplete() =>
        Navigation.NavigateTo(HistoryUrl.TopicTest.Conclusion(Id));

    private async Task OnUseInventory(uint id)
    {
        var test = await TestService.ApplyInventoryAsync(_test.Id, id);
        if (test.IsFailed)
        {
            Snackbar.Add(test.Error.Detail, Severity.Error);
            return;
        }

        if (test.Data.Question is null)
        {
            Navigation.NavigateTo(HistoryUrl.TopicTest.Conclusion(Id));
            return;
        }

        _test = test.Data.Overview;
        _currentQuestion = test.Data.Question;
        _inventory = test.Data.Inventory;
    }

}