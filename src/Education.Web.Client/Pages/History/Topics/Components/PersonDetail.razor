@using Education.Web.Client.Pages.History.Components
@using Education.Web.Client.Services.History.Topic.Model
@using Education.Web.Client.Services.Model.Content
@using Education.Web.Client.Services.History

<EduContainer Class="pa-0 pb-3 pb-sm-6" MaxWidth="EduWidth.W1920">
    <div class="header">
        <div class="image">
            <MudImage Src="@Person.ImageUrl" Fluid Alt="@Person.Title" ObjectFit="ObjectFit.Cover" ObjectPosition="ObjectPosition.Center"/>
        </div>

        <div class="content pa-3 pa-sm-6">
            <h1 class="title mb-3">
                @Person.Title
            </h1>

            <Breadcrumbs Items="@_breadcrumbs" Class="pa-0 mb-3"/>

            <div class="d-flex flex-wrap">
                <div class="mr-3 mr-sm-6 mb-3">
                    <MudText Typo="Typo.subtitle1">
                        @L["History:Born"]
                    </MudText>
                    <HistoryDate Date="@Person.Born" Typo="Typo.h5"/>
                    <MudText Typo="Typo.body2">
                        @Person.Born?.Place
                    </MudText>
                </div>

                <div class="mb-3">
                    <MudText Typo="Typo.subtitle1">
                        @L["History:Died"]
                    </MudText>
                    <HistoryDate Date="@Person.Died" Typo="Typo.h5"/>
                    <MudText Typo="Typo.body2">
                        @Person.Died?.Place
                    </MudText>
                </div>
            </div>

            <MudText Typo="Typo.subtitle1" Class="mw-sm">
                @Person.Description
            </MudText>
        </div>
    </div>

    @if (Person.Details.Length > 0)
    {
        <div class="details pt-6 pb-sm-3">
            @foreach (var (title, text) in Person.Details)
            {
                <div class="pa-3 px-sm-6">
                    <MudText Class="title" Typo="Typo.subtitle1" Color="Color.Tertiary">
                        @title
                    </MudText>
                    <EduMarkdown Content="@text" DisableParagraphIndent/>
                </div>
            }
        </div>
    }
</EduContainer>

<EduContainer Class="pb-3 pb-sm-6" MaxWidth="EduWidth.W1440">
    <section class="grid">
        <TopicFormatToolbar Class="toolbar"/>

        <TopicContent Class="content" Content="@Person.Content"/>

        <TopicTest Class="test" TopicId="@Person.Id" HasTest="@HasTest" UserActivity="@UserActivity"/>

        <TopicUserButtons
            Class="rating"
            TopicId="@Person.Id"
            Rating="@Rating"
            UserActivity="@UserActivity"
            OnBookmarkClick="@OnBookmarkClick"
            OnLikeClick="@OnLikeClick"
            OnDislikeClick="@OnDislikeClick"/>
    </section>

    @if (RelatedTopics.Length > 0)
    {
        <MudText Typo="Typo.h5" Class="mt-3 mt-sm-6 mb-3">
            @L["Topics:Related"]
        </MudText>
        <EduFillGrid>
            @foreach (var (topic, userActivity) in RelatedTopics)
            {
                <TopicAndUserProgressCard
                    Topic="@topic"
                    UserActivity="@userActivity"
                    OnBookmarkClick="@OnBookmarkClick"/>
            }
        </EduFillGrid>
    }
</EduContainer>

@code {
    private List<BreadcrumbItem> _breadcrumbs = new();

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Parameter, EditorRequired]
    public TopicDetail.PersonModel Person { get; set; } = default!;

    [Parameter, EditorRequired]
    public ContentRatingModel Rating { get; set; } = default!;

    [Parameter, EditorRequired]
    public UserActivityOverviewModel UserActivity { get; set; } = default!;

    [Parameter, EditorRequired]
    public bool HasTest { get; set; }

    [Parameter, EditorRequired]
    public UserTopicOverviewModel[] RelatedTopics { get; set; } = Array.Empty<UserTopicOverviewModel>();

    [Parameter, EditorRequired]
    public Func<Task<bool>> OnLikeClick { get; set; } = () => Task.FromResult(false);

    [Parameter, EditorRequired]
    public Func<Task<bool>> OnDislikeClick { get; set; } = () => Task.FromResult(false);

    [Parameter, EditorRequired]
    public Func<string, Task<bool>> OnBookmarkClick { get; set; } = _ => Task.FromResult(false);

    protected override void OnParametersSet()
    {
        _breadcrumbs = new List<BreadcrumbItem>
        {
            new(L["Subject:History"], HistoryUrl.Root),
            new(L[$"Epoch:{Person.Epoch.ToFastString()}"], HistoryUrl.Content.Epoch(Person.Epoch))
        };
    }

}