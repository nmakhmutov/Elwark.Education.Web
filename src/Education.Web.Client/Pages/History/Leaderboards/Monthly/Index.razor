@using Education.Web.Client.Pages.History.Leaderboards.Components
@using Education.Web.Client.Services.History.Leaderboard.Model
@using Education.Web.Client.Services.History.Leaderboard

@page "/history/leaderboards/monthly"
@layout HistoryLayout
@attribute [Authorize]

<EduPage>
    <ApiViewer Result="@_result" Context="result">
        <EduContainer Class="py-3 py-sm-6" MaxWidth="EduWidth.W1920">
            <div class="d-flex flex-column flex-md-row gap-3 mb-sm-6">
                <section>
                    <div class="d-flex align-center">
                        <div class="d-flex align-center justify-center mud-primary white-text rounded mr-3 mr-sm-6">
                            <MudIcon Icon="@Icons.Outlined.StarOutline" Size="Size.Large" Class="ma-6"/>
                        </div>
                        <MudText Typo="Typo.h4">
                            @L["MonthlyLeaderboard:Name"]
                        </MudText>
                    </div>

                    <MudText Class="mw-xs my-3 my-sm-6" Typo="Typo.subtitle1">
                        @L["MonthlyLeaderboard:Description"]
                    </MudText>

                    @if (result.Leaderboard.IsActive)
                    {
                        <MudChip Class="ma-0" Label Icon="@Icons.Outlined.Equalizer" Variant="Variant.Text" Color="Color.Primary">
                            @L["Leaderboard:InProgress"]
                        </MudChip>
                    }
                    else
                    {
                        <MudChip Class="ma-0" Label Icon="@Icons.Outlined.EmojiEvents" Variant="Variant.Text" Color="Color.Success">
                            @L["Leaderboard:Completed"]
                        </MudChip>
                    }
                    <div class="month-wrapper mt-3">
                        <MudSelect T="DateOnly" Label="@L["Month"]" Value="@result.Leaderboard.Month" ValueChanged="@OnMonthChanged">
                            @foreach (var month in result.Months)
                            {
                                <MudSelectItem Value="@month">
                                    @month.ToString("MMMM yyyy")
                                </MudSelectItem>
                            }
                        </MudSelect>
                    </div>
                </section>

                <div class="d-none d-md-block flex-grow-1"></div>

                @if (result.Leaderboard.IsActive)
                {
                    <section>
                        <CardCountdown Class="justify-center mb-3 mb-sm-6" Date="@result.Leaderboard.EndsAt"/>

                        @if (result.User is null)
                        {
                            <div class="mud-paper pa-3">
                                <MudText Typo="Typo.subtitle1">
                                    You are not contestant yet
                                </MudText>
                                <MudText Typo="Typo.caption">
                                    Just earn experince by passing tasks to join
                                </MudText>
                            </div>
                        }
                        else
                        {
                            <RegularRanking DisableHover Background="RegularRanking.BackgroundColor.Paper">
                                <Rank>
                                    <MudAvatar Color="Color.Primary">@result.User.Rank</MudAvatar>
                                </Rank>
                                <Name>
                                    <MudAvatar Class="mr-3" Image="@result.User.Image" Alt="@result.User.FullName"/>
                                    <MudText Typo="Typo.subtitle1">@result.User.FullName</MudText>
                                </Name>
                                <Experience>
                                    <MudIcon Class="mr-3" Icon="@EduIcons.Experience"/>
                                    <ReadableNumber Value="@result.User.Experience" Typo="Typo.h6"/>
                                </Experience>
                            </RegularRanking>
                        }
                    </section>
                }
                else
                {
                    <section class="winner-wrapper">
                        @foreach (var item in result.Users.Take(3))
                        {
                            <WinnerRanking
                                Class="@(item.Rank == 3 ? null : "mb-3 mb-sm-6")"
                                Id="@item.Id"
                                Image="@item.Image"
                                FullName="@item.FullName"
                                Rank="@item.Rank"
                                Experience="@item.Experience"/>
                        }
                    </section>
                }
            </div>

            @if (result.Users.Length > 0)
            {
                <RegularRanking DisableHover>
                    <Rank>
                        <MudText Typo="Typo.subtitle2">@L["Leaderboard:Rank"]</MudText>
                    </Rank>
                    <Name>
                        <MudText Typo="Typo.subtitle2">@L["Leaderboard:UserName"]</MudText>
                    </Name>
                    <Experience>
                        <MudText Typo="Typo.subtitle2">@L["Leaderboard:UserExperience"]</MudText>
                    </Experience>
                </RegularRanking>

                <Virtualize Items="@(result.Leaderboard.IsActive ? result.Users : result.Users[3..])" ItemSize="64" Context="user">
                    <RegularRanking
                        Class="mb-3"
                        Background="@(user.Id == _highlightUser ? RegularRanking.BackgroundColor.Highlight : RegularRanking.BackgroundColor.Paper)">
                        <Rank>
                            <MudAvatar Color="Color.Primary">@user.Rank</MudAvatar>
                        </Rank>
                        <Name>
                            <MudAvatar Class="mr-3" Image="@user.Image" Alt="@user.FullName"/>
                            <MudText Typo="Typo.subtitle1">@user.FullName</MudText>
                        </Name>
                        <Experience>
                            <MudIcon Class="mr-3" Icon="@EduIcons.Experience"/>
                            <ReadableNumber Value="@user.Experience" Typo="Typo.h6"/>
                        </Experience>
                    </RegularRanking>
                </Virtualize>
            }
            else
            {
                <EduEmpty
                    Title="@L["Leaderboard:EmptyContestantsTitle"]"
                    Subtitle="@L["Leaderboard:EmptyContestantsSubtitle"]"/>
            }
        </EduContainer>
    </ApiViewer>
</EduPage>

@code {
    private long _highlightUser;
    private ApiResult<MonthlyLeaderboardModel> _result = ApiResult<MonthlyLeaderboardModel>.Loading();

    [Inject]
    private IHistoryLeaderboardService LeaderboardService { get; set; } = default!;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    public AuthenticationStateProvider StateProvider { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        _result = await LeaderboardService.GetMonthAsync();

        var state = await StateProvider.GetAuthenticationStateAsync();
        if (state.User.Identity?.IsAuthenticated ?? false)
            _highlightUser = state.User.GetId();
    }

    private async Task OnMonthChanged(DateOnly month) =>
        _result = await LeaderboardService.GetMonthAsync(month);

}