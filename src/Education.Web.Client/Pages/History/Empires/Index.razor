@using Education.Web.Client.Pages.History.Components
@using MudBlazor.Services
@using Education.Web.Client.Services.History.Topic.Request
@using Education.Web.Client.Services.History.Topic.Model
@using Education.Web.Client.Services.History.Topic

@page "/history/empires"
@layout HistoryLayout
@implements IAsyncDisposable

<style>
    .mud-timeline-position-start::before {
        left: 0 !important;
        width: 96px !important;
        background-color: #990000 !important;
    }
    
    .mud-timeline-vertical.mud-timeline-position-alternate::before {
        right: calc(50% - 48px) !important;
        width: 96px !important;
        background-color: #990000 !important;
    }
    
    @@media (min-width: 960px) {
        .timeline-item:nth-child(even) .content-wrapper {
                display: flex;
                flex-direction: row;
                justify-content: end;
                text-align: end;
        }
    }
</style>

<EduPage Title="@L["History:Empires"]" HideFooter>
    <MudTimeline TimelinePosition="@_timelinePosition" DisableModifiers>
        <MudTimelineItem HideDot>
            <div class="ma-3 ma-sm-6">
                <h2 class="subtitle">
                    @L["Empires:Subtitle"]
                </h2>
                <h1 class="title">
                    @L["History:Empires"]
                </h1>
                <MudSelect
                    T="GetEmpiresRequest.SortType"
                    Label="@L["Empire:By"]"
                    Dense
                    Variant="Variant.Text"
                    Value="@_sort"
                    Style="max-width: 300px"
                    ValueChanged="@SortChangedAsync">
                    <MudSelectItem Value="@GetEmpiresRequest.SortType.Area">
                        @L["Empire:MaxArea"]
                    </MudSelectItem>
                    <MudSelectItem Value="@GetEmpiresRequest.SortType.Population">
                        @L["Empire:MaxPopulation"]
                    </MudSelectItem>
                    <MudSelectItem Value="@GetEmpiresRequest.SortType.Duration">
                        @L["Empire:MaxDuration"]
                    </MudSelectItem>
                </MudSelect>
            </div>
        </MudTimelineItem>

        <Virtualize @ref="@_empireVirtualize" ItemsProvider="EmpiresProvider" ItemSize="240" Context="empire">
            <MudTimelineItem Class="timeline-item">
                <ItemDot>
                    <MudAvatar Image="@empire.ThumbnailUrl" Size="Size.Large"/>
                </ItemDot>
                <ItemContent>
                    <div class="content-wrapper">
                        <div class="content">
                            <div>
                                <MudLink Typo="Typo.h5" Href="@HistoryUrl.Content.Topic(empire.Id)">
                                    @empire.Title
                                </MudLink>
                            </div>
                            <div class="d-inline-flex align-center">
                                <HistoryDate Date="@empire.Founded"/>
                                <MudText Typo="Typo.subtitle1" class="mx-3">&#8212;</MudText>
                                <HistoryDate Date="@empire.Dissolved"/>
                            </div>
                            <MudText Typo="Typo.body1" Class="my-3">
                                @empire.Overview
                            </MudText>
                            <MudText Typo="Typo.body2">
                                @L["Empire:MaxArea"]: @empire.MaxArea.ToString("N0")<small>km<sup>2</sup></small>
                            </MudText>
                            <MudText Typo="Typo.body2">
                                @L["Empire:MaxPopulation"]: @empire.MaxPopulation.ToString("N0")
                            </MudText>
                            <MudText Typo="Typo.body2">
                                @L["Empire:Duration"]:
                                @if (empire.Duration.HasValue)
                                {
                                    @empire.Duration.Value.ToString("N0")<small>&nbsp;@L["History:Years"].Value.ToLowerInvariant()</small>
                                }
                                else
                                {
                                    @L["History:Unknown"]
                                }
                            </MudText>
                        </div>
                    </div>
                </ItemContent>
            </MudTimelineItem>
        </Virtualize>
    </MudTimeline>
</EduPage>

@code {

    private TimelinePosition _timelinePosition = TimelinePosition.Start;
    private GetEmpiresRequest.SortType _sort = GetEmpiresRequest.SortType.Area;
    private Virtualize<EmpireOverviewModel> _empireVirtualize = default!;

    [Inject]
    private IResizeListenerService ResizeListener { get; set; } = default!;

    [Inject]
    private IHistoryTopicService TopicService { get; set; } = default!;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    [Parameter, SupplyParameterFromQuery(Name = "by")]
    public string? Sort { get; set; }

    protected override void OnInitialized() =>
        _sort = Map(Sort);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ResizeListener.OnBreakpointChanged += OnBreakpointChanged;
            OnBreakpointChanged(null, await ResizeListener.GetBreakpoint());
        }
    }

    private async Task SortChangedAsync(GetEmpiresRequest.SortType sort)
    {
        _sort = sort;
        Navigation.NavigateTo(Navigation.GetUriWithQueryParameter("by", Map(sort)));
        await _empireVirtualize.RefreshDataAsync();
    }

    private void OnBreakpointChanged(object? sender, Breakpoint e)
    {
        var position = e is Breakpoint.Xs or Breakpoint.Sm
            ? TimelinePosition.Start
            : TimelinePosition.Alternate;

        if (_timelinePosition == position)
            return;

        _timelinePosition = position;
        InvokeAsync(StateHasChanged);
    }

    private async ValueTask<ItemsProviderResult<EmpireOverviewModel>> EmpiresProvider(ItemsProviderRequest request)
    {
        var response = await TopicService.GetAsync(new GetEmpiresRequest(_sort, request.StartIndex + 1, request.Count));

        return response.IsSuccess
            ? new ItemsProviderResult<EmpireOverviewModel>(response.Data.Items, (int)response.Data.Count)
            : new ItemsProviderResult<EmpireOverviewModel>();
    }

    private static GetEmpiresRequest.SortType Map(string? sort) =>
        sort switch {
            "duration" => GetEmpiresRequest.SortType.Duration,
            "population" => GetEmpiresRequest.SortType.Population,
            _ => GetEmpiresRequest.SortType.Area
            };

    private static string Map(GetEmpiresRequest.SortType sort) =>
        sort switch {
            GetEmpiresRequest.SortType.Duration => "duration",
            GetEmpiresRequest.SortType.Population => "population",
            _ => "area"
            };

    public async ValueTask DisposeAsync()
    {
        ResizeListener.OnBreakpointChanged -= OnBreakpointChanged;
        await _empireVirtualize.DisposeAsync();
    }

}
