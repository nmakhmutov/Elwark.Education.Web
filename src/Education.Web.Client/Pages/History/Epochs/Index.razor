@using Education.Web.Client.Pages.History.Components
@using Education.Web.Client.Services.History.Topic.Request
@using Education.Web.Client.Services.History
@using Education.Web.Client.Services.History.Topic
@using Education.Web.Client.Services.History.User

@page "/history/epochs/{type}"
@layout HistoryLayout

<EduPage Title="@L[$"Epoch:{_request.Epoch.ToFastString()}"]">
    <EduContainer Class="py-3 py-sm-6">
        <EduPageHeader Title="@L[$"Epoch:{_request.Epoch.ToFastString()}"]" Breadcrumbs="@Breadcrumbs"/>
    </EduContainer>
    <ApiViewer Result="_result" Context="topics">
        <EduContainer>
            <EduFillGrid Class="mb-6 mb-sm-12">
                @foreach (var (topic, userActivity) in topics.Items)
                {
                    <TopicAndUserProgressCard
                        Topic="@topic"
                        UserActivity="@userActivity"
                        OnBookmarkClick="@OnBookmarkClick"/>
                }
            </EduFillGrid>
            <MudPagination
                Class="d-flex justify-center py-3 py-sm-6"
                Rectangular
                DisableElevation
                Selected="@CurrentPage"
                SelectedChanged="@OnPagination"
                Count="@TotalPages"/>
        </EduContainer>
    </ApiViewer>
</EduPage>

@code {
    private GetTopicsRequest _request = new(EpochType.Prehistory, 1, 20);
    private ApiResult<PagingOffsetModel<UserTopicOverviewModel>> _result = ApiResult<PagingOffsetModel<UserTopicOverviewModel>>.Loading();

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["Subject:History"].Value, HistoryUrl.Root)
    };

    [Inject]
    private IHistoryTopicService TopicService { get; set; } = default!;

    [Inject]
    private IHistoryUserService UserService { get; set; } = default!;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    [Parameter]
    public string? Type { get; set; }

    [Parameter, SupplyParameterFromQuery(Name = "page")]
    public int CurrentPage { get; set; } = 1;

    private int TotalPages => _result.IsSuccess 
        ? (int)double.Ceiling((double)_result.Value.Count / _request.Limit) 
        : 1;

    protected override async Task OnParametersSetAsync()
    {
        _result = ApiResult<PagingOffsetModel<UserTopicOverviewModel>>.Loading();
        CurrentPage = Math.Max(1, CurrentPage);

        if (Enum.TryParse<EpochType>(Type, true, out var type))
        {
            _request = _request with { Epoch = type, Offset = (CurrentPage - 1) * _request.Limit };
            _result = await TopicService.GetAsync(_request);
        }
        else
        {
            var error = Error.Create(L["Error:NotFound"], 404);
            _result = ApiResult<PagingOffsetModel<UserTopicOverviewModel>>.Fail(error);
        }
    }

    private async Task<bool> OnBookmarkClick(string topicId)
    {
        var result = await UserService.ToggleBookmarkAsync(topicId);
        return result is { IsSuccess: true, Value: true };
    }

    private void OnPagination(int page)
    {
        CurrentPage = page;
        Navigation.NavigateTo(Navigation.GetUriWithQueryParameter("page", CurrentPage));
    }

}