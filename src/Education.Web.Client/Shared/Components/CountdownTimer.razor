@implements IDisposable

<MudText Typo="Typo" Align="Align" Class="@Class" Color="@Color">
    @_timeLeft.Humanize()
</MudText>

@code {
    private TimeSpan _timeLeft = TimeSpan.Zero;
    private readonly PeriodicTimer _timer = new(TimeSpan.FromSeconds(1));

    [Parameter, EditorRequired]
    public DateTime Date { get; set; }

    [Parameter]
    public EventCallback OnComplete { get; set; } = EventCallback.Empty;

    [Parameter]
    public Typo Typo { get; set; } = Typo.subtitle1;

    [Parameter]
    public Align Align { get; set; } = Align.Inherit;

    [Parameter]
    public Color Color { get; set; } = Color.Default;

    [Parameter]
    public string? Class { get; set; }

    protected override void OnParametersSet() =>
        InvokeAsync(async () =>
        {
            _timeLeft = GetTimeLeft();

            while (await _timer.WaitForNextTickAsync())
            {
                _timeLeft = GetTimeLeft();
                if (TimeSpan.Zero >= _timeLeft)
                    break;

                StateHasChanged();
            }

            if (OnComplete.HasDelegate && TimeSpan.Zero >= _timeLeft)
                await OnComplete.InvokeAsync();
        });

    private TimeSpan GetTimeLeft() =>
        new((Date - DateTime.UtcNow).Ticks / TimeSpan.TicksPerSecond * TimeSpan.TicksPerSecond);

    public void Dispose() =>
        _timer.Dispose();

}