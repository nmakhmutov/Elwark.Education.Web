@using Education.Web.Client.Models.Content
<div class="@Class">
    @if (ShowTooltip)
    {
        <MudTooltip RootClass="d-flex" Placement="Placement.Bottom">
            <ChildContent>
                @RatingComponent
            </ChildContent>

            <TooltipContent>
                <div class="d-flex align-center gap-3">
                    @RatingComponent
                    <MudText Typo="Typo.body1">
                        @L["Shared_ContentRatingOutOf", Rating.Stars, 5]
                    </MudText>
                </div>
                <MudText Typo="Typo.body2">
                    @L["Shared_ContentRatingVoters", Rating.Votes.ToMetric()]
                </MudText>
            </TooltipContent>
        </MudTooltip>
    }
    else
    {
        @RatingComponent
    }
</div>

@code {
    private string? _ratingClass;

    private RenderFragment RatingComponent =>
        @<MudRating
             Class="@_ratingClass"
             MaxValue="5"
             Size="@Size"
             SelectedValue="@((int)Math.Round(Rating.Stars))"
             ReadOnly/>;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Parameter]
    public string? Class { get; set; }

    [Parameter, EditorRequired]
    public ContentRatingModel Rating { get; set; } = default!;

    [Parameter]
    public Size Size { get; set; } = Size.Medium;

    [Parameter]
    public bool ShowTooltip { get; set; }

    protected override void OnParametersSet() =>
        _ratingClass = Size switch {
            Size.Small => "rating small",
            Size.Medium => "rating medium",
            Size.Large => "rating large",
            _ => "rating"
            };

}