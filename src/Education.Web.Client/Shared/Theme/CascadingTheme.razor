<MudThemeProvider @ref="@(_provider)" Theme="@ThemeConfiguration" IsDarkMode="@IsDarkMode"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<CascadingValue TValue="CascadingTheme" Value="@(this)" ChildContent="@ChildContent"/>

@code {
        private const string CacheKey = "ts";
    private MudThemeProvider _provider = new();

    private static readonly MudTheme ThemeConfiguration = new()
    {
        Palette = new PaletteLight
        {
            Primary = "#5569FF",
            Secondary = "#6E7FFF",
            Tertiary = "#2939B3",
            Info = "#33C2FF",
            Success = "#44D600",
            Warning = "#FFA319",
            Error = "#FF1943",
            Black = "#27272F",
            Background = "#F6F6F6",
            BackgroundGrey = "#E3E5E7",
            AppbarBackground = "#FFFFFF",
            AppbarText = "#424242",
            Divider = "#E8E8E8",
            DividerLight = "#ECECEC",
            TableLines = "#E8E8E8",
            OverlayLight = "rgba(255, 255, 255, 0.7)"
        },
        PaletteDark = new PaletteDark
        {
            Primary = "#5569FF",
            Secondary = "#6E7FFF",
            Tertiary = "#2939B3",
            Info = "#33C2FF",
            Success = "#44D600",
            Warning = "#FFA319",
            Error = "#FF1943",
            Black = "#27272F",
            Background = "#1C1C1C",
            BackgroundGrey = "#27272F",
            Surface = "#252525",
            DrawerBackground = "#090A0C",
            DrawerText = "rgba(255,255,255, 0.50)",
            AppbarBackground = "#090A0C",
            AppbarText = "rgba(255,255,255, 0.70)",
            Divider = "rgba(255, 255, 255, 0.1)",
            LinesDefault = "rgba(255, 255, 255, 0.1)",
            TableLines = "rgba(255, 255, 255, 0.1)",
            TextPrimary = "rgba(255,255,255, 0.70)",
            TextSecondary = "rgba(255,255,255, 0.50)",
            ActionDefault = "#ADADB1",
            ActionDisabled = "rgba(255,255,255, 0.26)",
            ActionDisabledBackground = "rgba(255,255,255, 0.12)",
            DrawerIcon = "rgba(255,255,255, 0.50)",
            HoverOpacity = 0.2,
            OverlayDark = "rgba(33, 33, 33, 0.7)"
        },
        Typography = new Typography
        {
            H1 = new H1 { FontSize = "3.5rem", FontWeight = 300 },
            H2 = new H2 { FontSize = "2.75rem", FontWeight = 300 },
            H3 = new H3 { FontSize = "2.25rem", FontWeight = 300 },
            H4 = new H4 { FontSize = "1.875rem", FontWeight = 400 },
            H5 = new H5 { FontSize = "1.5rem", FontWeight = 400 },
            H6 = new H6 { FontSize = "1.25rem", FontWeight = 400 },
            Subtitle1 = new Subtitle1 { FontSize = "1.125rem", FontWeight = 400 },
            Subtitle2 = new Subtitle2 { FontSize = "1rem", FontWeight = 500 },
            Body1 = new Body1 { FontSize = "1rem", FontWeight = 400 },
            Body2 = new Body2 { FontSize = "0.875rem", FontWeight = 400 },
            Caption = new Caption { FontSize = "0.8rem", FontWeight = 400 },
            Button = new Button { FontSize = "0.875rem", FontWeight = 500 },
            Overline = new Overline { FontSize = "0.75rem", FontWeight = 400 }
        }
    };

    [Inject]
    private ILocalStorageService Storage { get; set; } = default!;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    public MudTheme Theme => _provider.Theme;

    public bool IsDarkMode { get; private set; }

    public string Icon =>
        IsDarkMode ? Icons.Material.Outlined.LightMode : Icons.Material.Outlined.DarkMode;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        await _provider.WatchSystemPreference(x => ChangeTheme(x));

        IsDarkMode = await Storage.GetItemAsync<bool?>(CacheKey) ?? await _provider.GetSystemPreference();
    }

    private Task ChangeTheme(bool isDarkMode) =>
        InvokeAsync(() =>
        {
            IsDarkMode = isDarkMode;
            StateHasChanged();
        });

    public async Task ToggleAsync() =>
        await Storage.SetItemAsync(CacheKey, IsDarkMode = !IsDarkMode);

}