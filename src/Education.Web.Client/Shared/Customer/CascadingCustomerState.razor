@implements IDisposable

<CascadingValue TValue="CustomerState" Value="@_state" ChildContent="@ChildContent"/>

@code {
    private CustomerState _state = CustomerState.Anonymous;

    [Inject]
    private CustomerStateProvider CustomerStateProvider { get; init; } = default!;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CustomerStateProvider.OnChanged += OnStateChanged;
        await CustomerStateProvider.InitAsync();
    }

    private void OnStateChanged(CustomerState state)
    {
        _state = state;
        StateHasChanged();
    }

    public void Dispose() =>
        CustomerStateProvider.OnChanged -= OnStateChanged;

}