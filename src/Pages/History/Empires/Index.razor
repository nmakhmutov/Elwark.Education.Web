@page "/history/empires"
@layout HistoryLayout
@attribute [Authorize]
@using Education.Web.Gateways.History.Empires.Request
@using Education.Web.Pages.History.Components
@using MudBlazor.Services
@using Education.Web.Gateways.History.Empires.Model
@using Education.Web.Gateways.History
@implements IDisposable

<style>
    .mud-timeline-position-start::before {
        left: 0 !important;
        width: 96px !important;
        background-color: var(--mud-palette-secondary) !important;
    }
    
    .mud-timeline-vertical.mud-timeline-position-alternate::before {
        right: calc(50% - 48px) !important;
        width: 96px !important;
        background-color: var(--mud-palette-secondary) !important;
    }
    
    @@media (min-width: 960px) {
        .timeline-item:nth-child(even) .content-wrapper {
                display: flex;
                flex-direction: row;
                justify-content: end;
                text-align: end;
        }
    }
</style>
<PageTitle>@L["History:Empires"]</PageTitle>
<EduPage>
    <MudTimeline TimelinePosition="@_timelinePosition" DisableModifiers>
        <MudTimelineItem HideDot>
            <div class="ma-3 ma-sm-6">
                <h2 class="subtitle">
                    @L["History:EmpireSubtitle"]
                </h2>
                <h1 class="title">
                    @L["History:Empires"]
                </h1>
                <MudSelect
                    T="GetEmpiresRequest.SortType"
                    Label="@L["Sort:By"]"
                    Dense
                    Variant="Variant.Text"
                    Value="@_request.Sort"
                    Style="max-width: 300px"
                    ValueChanged="@SortChangedAsync">
                    <MudSelectItem Value="@GetEmpiresRequest.SortType.Area">
                        @L["History:EmpireMaxArea"]
                    </MudSelectItem>
                    <MudSelectItem Value="@GetEmpiresRequest.SortType.Population">
                        @L["History:EmpireMaxPopulation"]
                    </MudSelectItem>
                    <MudSelectItem Value="@GetEmpiresRequest.SortType.Duration">
                        @L["History:EmpireMaxDuration"]
                    </MudSelectItem>
                </MudSelect>
            </div>
        </MudTimelineItem>

        @if (_empires.Count == 0)
        {
            for (var i = 0; i < 4; i++)
            {
                var align = i % 2 == 0 ? "align-end" : "align-start";

                <MudTimelineItem Color="Color.Secondary" Size="Size.Large" Variant="Variant.Text">
                    <ItemDot>
                        <MudIcon Size="Size.Large" Icon="@Icons.Outlined.OutlinedFlag"/>
                    </ItemDot>
                    <ItemContent>
                        <div class="d-flex flex-column @align ma-3 ma-sm-6">
                            <MudSkeleton SkeletonType="SkeletonType.Text" Width="60%" Height="37px"/>
                            <MudSkeleton SkeletonType="SkeletonType.Text" Width="20%" Height="24px"/>
                            <div class="d-flex flex-column @align my-3 w-100">
                                <MudSkeleton SkeletonType="SkeletonType.Text" Width="70%" Height="24px"/>
                                <MudSkeleton SkeletonType="SkeletonType.Text" Width="58%" Height="24px"/>
                                <MudSkeleton SkeletonType="SkeletonType.Text" Width="65%" Height="24px"/>
                                <MudSkeleton SkeletonType="SkeletonType.Text" Width="53%" Height="24px"/>
                            </div>
                            <MudSkeleton SkeletonType="SkeletonType.Text" Width="38%" Height="24px"/>
                            <MudSkeleton SkeletonType="SkeletonType.Text" Width="38%" Height="24px"/>
                        </div>
                    </ItemContent>
                </MudTimelineItem>
            }
        }
        else
        {
            <div></div>
            <Virtualize Items="@_empires" Context="empire">
                <MudTimelineItem Class="timeline-item">
                    <ItemDot>
                        <MudAvatar Image="@empire.ThumbnailUrl" Size="Size.Large"/>
                    </ItemDot>
                    <ItemContent>
                        <div class="content-wrapper">
                            <div class="content">
                                <div>
                                    <MudLink Typo="Typo.h5" Href="@HistoryLinks.Content.Topic(empire.Id)">
                                        @empire.Title
                                    </MudLink>
                                </div>
                                <div class="d-inline-flex align-center">
                                    <HistoryDate Date="@empire.Founded"/>
                                    <MudText Typo="Typo.subtitle1" class="mx-3">&#8212;</MudText>
                                    <HistoryDate Date="@empire.Dissolved"/>
                                </div>
                                <MudText Typo="Typo.body1" Class="my-3">
                                    @empire.Overview
                                </MudText>
                                <MudText Typo="Typo.body2">
                                    @L["History:EmpireMaxArea"]: @empire.MaxArea.ToString("N0")<small>km<sup>2</sup></small>
                                </MudText>
                                <MudText Typo="Typo.body2">
                                    @L["History:EmpireMaxPopulation"]: @empire.MaxPopulation.ToString("N0")
                                </MudText>
                                <MudText Typo="Typo.body2">
                                    @L["History:EmpireDuration"]:
                                    @if (empire.Duration.HasValue)
                                    {
                                        @empire.Duration.Value.ToString("N0")<small>&nbsp;@L["History:Years"].Value.ToLowerInvariant()</small>
                                    }
                                    else
                                    {
                                        @L["History:Unknown"]
                                    }
                                </MudText>
                            </div>
                        </div>
                    </ItemContent>
                </MudTimelineItem>
            </Virtualize>
            <InfinityScroll ObserverTargetId="observerTarget" ObservableTargetReached="@LoadMoreAsync">
                <div id="observerTarget" class="grid-full-row d-flex justify-center my-6">
                    @if (_request.Page < _pages)
                    {
                        <MudProgressCircular Indeterminate/>
                    }
                </div>
            </InfinityScroll>
        }
    </MudTimeline>
</EduPage>

@code {

    private TimelinePosition _timelinePosition = TimelinePosition.Start;
    private GetEmpiresRequest _request = new(GetEmpiresRequest.SortType.Area, 1, 20);
    private readonly List<EmpireOverview> _empires = new();
    private uint _pages;

    [Inject]
    private IResizeListenerService ResizeListener { get; set; } = default!;

    [Inject]
    private IHistoryClient HistoryClient { get; set; } = default!;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var response = await HistoryClient.Empire.GetAsync(_request);
        if (response.IsFailed)
            return;

        _empires.AddRange(response.Data.Items);
        _pages = response.Data.Pages;
    }

    private async Task LoadMoreAsync()
    {
        if (_request.Page == _pages)
            return;

        var response = await HistoryClient.Empire.GetAsync(_request = _request with {Page = _request.Page + 1});
        if (response.IsSuccess)
            _empires.AddRange(response.Data.Items);
    }

    private async Task SortChangedAsync(GetEmpiresRequest.SortType sort)
    {
        _empires.Clear();
        _request = new GetEmpiresRequest(sort, 1, 20);
        await OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ResizeListener.OnBreakpointChanged += OnBreakpointChanged;
            OnBreakpointChanged(null, await ResizeListener.GetBreakpoint());
        }
    }

    private void OnBreakpointChanged(object? sender, Breakpoint e)
    {
        var position = e is Breakpoint.Xs or Breakpoint.Sm
            ? TimelinePosition.Start
            : TimelinePosition.Alternate;

        if (_timelinePosition == position)
            return;

        _timelinePosition = position;
        InvokeAsync(StateHasChanged);
    }

    public void Dispose() =>
        ResizeListener.OnBreakpointChanged -= OnBreakpointChanged;

}
