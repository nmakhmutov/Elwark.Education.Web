@page "/history/empires"
@layout HistoryLayout
@attribute [Authorize]
@using Education.Web.Gateways.History.Empires.Request
@using Education.Web.Pages.History.Components
@using MudBlazor.Services
@using Education.Web.Gateways.History.Empires.Model
@using Education.Web.Gateways.History
@implements IDisposable

<style>
    .mud-timeline-position-start::before {
        left: 0 !important;
        width: 96px !important;
        background-color: var(--mud-palette-secondary) !important;
    }
    
    .mud-timeline-vertical.mud-timeline-position-alternate::before {
        right: calc(50% - 48px) !important;
        width: 96px !important;
        background-color: var(--mud-palette-secondary) !important;
    }
</style>
<PageTitle>@L["History:Empires"]</PageTitle>
<EduPage ShowFooter="false">
    <MudTimeline TimelinePosition="@_timelinePosition" DisableModifiers="true" Class="fff">
        <MudTimelineItem HideDot="true">
            <div class="ma-3 ma-sm-6">
                <h2 class="subtitle">
                    @L["History:EmpireSubtitle"]
                </h2>
                <h1 class="title">
                    @L["History:Empires"]
                </h1>
                <MudSelect
                    T="GetEmpiresRequest.SortType"
                    Label="@L["Sort:By"]"
                    Dense="true"
                    Variant="Variant.Text"
                    Value="@_request.Sort"
                    Style="max-width: 300px"
                    ValueChanged="@SortChangedAsync">
                    <MudSelectItem Value="@GetEmpiresRequest.SortType.Area">
                        @L["History:EmpireMaxArea"]
                    </MudSelectItem>
                    <MudSelectItem Value="@GetEmpiresRequest.SortType.Population">
                        @L["History:EmpireMaxPopulation"]
                    </MudSelectItem>
                </MudSelect>
            </div>
        </MudTimelineItem>

        <ApiViewer Response="@_response">
            <Loading>
                @for (var i = 0; i < 4; i++)
                {
                    var align = i % 2 == 0 ? "d-flex flex-column align-end" : "d-flex flex-column align-start";

                    <MudTimelineItem Color="Color.Secondary" Size="Size.Large" Variant="Variant.Text">
                        <ItemDot>
                            <MudIcon Size="Size.Large" Icon="@Icons.Outlined.OutlinedFlag"/>
                        </ItemDot>
                        <ItemContent>
                            <div class="ma-3 ma-sm-6 @align">
                                <MudSkeleton SkeletonType="SkeletonType.Text" Width="60%" Height="37px"/>
                                <MudSkeleton SkeletonType="SkeletonType.Text" Width="20%" Height="24px"/>
                                <div class="my-3 @align w-100">
                                    <MudSkeleton SkeletonType="SkeletonType.Text" Width="70%" Height="24px"/>
                                    <MudSkeleton SkeletonType="SkeletonType.Text" Width="58%" Height="24px"/>
                                    <MudSkeleton SkeletonType="SkeletonType.Text" Width="65%" Height="24px"/>
                                    <MudSkeleton SkeletonType="SkeletonType.Text" Width="53%" Height="24px"/>
                                </div>
                                <MudSkeleton SkeletonType="SkeletonType.Text" Width="38%" Height="24px"/>
                                <MudSkeleton SkeletonType="SkeletonType.Text" Width="38%" Height="24px"/>
                            </div>
                        </ItemContent>
                    </MudTimelineItem>
                }
            </Loading>
            <ChildContent Context="empires">
                @for (var i = 0; i < empires.Items.Length; i++)
                {
                    var empire = empires.Items[i];
                    var direction = i % 2 == 0 ? "end" : "start";

                    <MudTimelineItem>
                        <ItemDot>
                            <MudAvatar Image="@empire.Image" Size="Size.Large"/>
                        </ItemDot>
                        <ItemContent>
                            <div class="content-wrapper @direction">
                                <div class="content">
                                    <MudLink Typo="Typo.h5" Href="@HistoryLinks.Content.Topic(empire.Id)">
                                        @empire.Title
                                    </MudLink>
                                    <div class="d-flex flex-row flex-wrap justify-md-@direction">
                                        <HistoryDate Date="@empire.Founded"/>
                                        <MudText Typo="Typo.subtitle1" class="mx-3">&#8212;</MudText>
                                        <HistoryDate Date="@empire.Dissolved"/>
                                    </div>
                                    <MudText Typo="Typo.body1" Class="my-3">
                                        @empire.Overview
                                    </MudText>
                                    <MudText Typo="Typo.body2">
                                        @L["History:EmpireMaxArea"]: @empire.MaxArea.ToString("N0")<small>km<sup>2</sup></small>
                                    </MudText>
                                    <MudText Typo="Typo.body2">
                                        @L["History:EmpireMaxPopulation"]: @empire.MaxPopulation.ToString("N0")
                                    </MudText>
                                </div>
                            </div>
                        </ItemContent>
                    </MudTimelineItem>
                }
                <InfinityScroll ObserverTargetId="observerTarget" ObservableTargetReached="@LoadMoreAsync">
                    <div id="observerTarget" class="grid-full-row d-flex justify-center my-6">
                        @if (_request.Page < empires.Pages)
                        {
                            <MudProgressCircular Indeterminate="true"/>
                        }
                    </div>
                </InfinityScroll>
            </ChildContent>
        </ApiViewer>
    </MudTimeline>
</EduPage>

@code {

    private TimelinePosition _timelinePosition = TimelinePosition.Start;
    private GetEmpiresRequest _request = new(GetEmpiresRequest.SortType.Area, 1, 20);
    private ApiResponse<PageResponse<EmpireOverview>> _response = ApiResponse<PageResponse<EmpireOverview>>.Loading();

    [Inject]
    private IResizeListenerService ResizeListener { get; set; } = default!;

    [Inject]
    private IHistoryClient HistoryClient { get; set; } = default!;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    protected override async Task OnInitializedAsync() =>
        _response = await HistoryClient.Empire.GetAsync(_request);

    private async Task LoadMoreAsync()
    {
        if (!_response.IsSuccess)
            return;

        if (_request.Page == _response.Data.Pages)
            return;

        var response = await HistoryClient.Empire.GetAsync(_request = _request with {Page = _request.Page + 1});
        _response = response.IsSuccess
            ? ApiResponse<PageResponse<EmpireOverview>>.Success(
                new PageResponse<EmpireOverview>(
                    response.Data.Items.Union(response.Data.Items).ToArray(),
                    response.Data.Pages,
                    response.Data.Count
                    )
                )
            : ApiResponse<PageResponse<EmpireOverview>>.Fail(response.Error);
    }

    private async Task SortChangedAsync(GetEmpiresRequest.SortType sort)
    {
        _response = ApiResponse<PageResponse<EmpireOverview>>.Loading();
        _response = await HistoryClient.Empire.GetAsync(_request = new GetEmpiresRequest(sort, 1, 20));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ResizeListener.OnBreakpointChanged += OnBreakpointChanged;
            OnBreakpointChanged(null, await ResizeListener.GetBreakpoint());
        }
    }

    private void OnBreakpointChanged(object? sender, Breakpoint e)
    {
        var position = e is Breakpoint.Xs or Breakpoint.Sm
            ? TimelinePosition.Start
            : TimelinePosition.Alternate;

        if (_timelinePosition == position)
            return;

        _timelinePosition = position;
        InvokeAsync(StateHasChanged);
    }

    public void Dispose() => ResizeListener.OnBreakpointChanged -= OnBreakpointChanged;

}