@using Education.Web.Pages.History.Topics.Components
@using Education.Web.Services.History
@using Education.Web.Services.History.Topic
@using Education.Web.Services.History.Topic.Model
@using Education.Web.Services.Settings

@page "/history/topics/{id}"
@layout HistoryLayout

<EduPage>
    <ApiViewer Result="@_result" Context="result">
        <PageTitle>@result.Topic.Title</PageTitle>
        @switch (result.Topic)
        {
            case BattleTopicDetailModel battle:
                <BattleDetail
                    Battle="@battle"
                    Rating="@result.Rating"
                    HasTest="@result.HasTest"
                    UserActivity="@result.UserActivity"
                    RelatedTopics="@result.RelatedTopics"
                    OnLikeClick="LikeAsync"
                    OnDislikeClick="DislikeAsync"
                    OnFavoriteClick="@ToggleFavoriteAsync"
                    Breadcrumbs="@_breadcrumbs"/>
                break;

            case EmpireTopicDetailModel empire:
                <EmpireDetail
                    Empire="@empire"
                    Rating="@result.Rating"
                    HasTest="@result.HasTest"
                    UserActivity="@result.UserActivity"
                    RelatedTopics="@result.RelatedTopics"
                    OnLikeClick="LikeAsync"
                    OnDislikeClick="DislikeAsync"
                    OnFavoriteClick="@ToggleFavoriteAsync"
                    Breadcrumbs="@_breadcrumbs"/>
                break;

            case GeneralTopicDetailModel topic:
                <GeneralDetail
                    Topic="@topic"
                    Rating="@result.Rating"
                    HasTest="@result.HasTest"
                    UserActivity="@result.UserActivity"
                    RelatedTopics="@result.RelatedTopics"
                    OnLikeClick="LikeAsync"
                    OnDislikeClick="DislikeAsync"
                    OnFavoriteClick="@ToggleFavoriteAsync"
                    Breadcrumbs="@_breadcrumbs"/>
                break;

            case PersonTopicDetailModel person:
                <PersonDetail
                    Person="@person"
                    Rating="@result.Rating"
                    HasTest="@result.HasTest"
                    UserActivity="@result.UserActivity"
                    RelatedTopics="@result.RelatedTopics"
                    OnLikeClick="LikeAsync"
                    OnDislikeClick="DislikeAsync"
                    OnFavoriteClick="@ToggleFavoriteAsync"
                    Breadcrumbs="@_breadcrumbs"/>
                break;
        }
    </ApiViewer>
</EduPage>

@code {
    private List<BreadcrumbItem> _breadcrumbs = new();
    private ApiResult<TopicDetailCompositionModel> _result = ApiResult<TopicDetailCompositionModel>.Loading();

    [Inject]
    private IHistoryTopicService TopicService { get; set; } = default!;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private TopicContentSettings Settings { get; set; } = default!;

    [Parameter]
    public string Id { get; set; } = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        _result = ApiResult<TopicDetailCompositionModel>.Loading();
        _result = await TopicService.GetAsync(Id);

        if (_result.IsSuccess)
        {
            var epoch = _result.Data.Topic.Epoch;
            _breadcrumbs = new List<BreadcrumbItem>
            {
                new(L["Subject:History"], HistoryUrl.Root),
                new(L[$"Epoch:{epoch.ToFastString()}"], HistoryUrl.Content.Epoch(epoch))
            };
        }
    }

    protected override async Task OnInitializedAsync() =>
        await Settings.InitAsync();

    private async Task<bool> LikeAsync()
    {
        var response = await TopicService.LikeAsync(Id);
        return response.IsSuccess;
    }

    private async Task<bool> DislikeAsync()
    {
        var response = await TopicService.DislikeAsync(Id);
        return response.IsSuccess;
    }

    private async Task<bool> ToggleFavoriteAsync(string id)
    {
        var result = await TopicService.ToggleFavoriteAsync(id);
        return result.IsSuccess && result.Data;
    }

}