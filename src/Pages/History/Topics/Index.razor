@page "/history/topics/{id}"
@using Education.Web.Gateways.History.Topics.Model
@using Education.Web.Pages.History.Topics.Components
@using Education.Web.Gateways.History
@using Education.Web.Pages.History.Components
@layout HistoryLayout
@attribute [Authorize]

<EduPage ShowFooter="@_response.IsLoaded">
    <ApiViewer Response="@_response" Context="result">
        <PageTitle>@result.Topic.Title</PageTitle>

        @switch (result.Topic)
        {
            case EmpireTopicDetailModel empire:
                <EmpireDetail
                    Title="@empire.Title"
                    Description="@empire.Description"
                    Image="@empire.ImageUrl"
                    Founded="@empire.Founded"
                    Dissolved="@empire.Dissolved"
                    Duration="@empire.Duration"
                    MaxArea="@empire.MaxArea"
                    MaxPopulation="@empire.MaxPopulation"
                    MapUrl="@empire.MapUrl"
                    FlagUrl="@empire.FlagUrl"
                    Breadcrumbs="@_breadcrumbs"/>
                break;

            case PersonTopicDetailModel person:
                <PersonDetail
                    Title="@person.Title"
                    Description="@person.Description"
                    Image="@person.ImageUrl"
                    Born="@person.Born"
                    Died="@person.Died"
                    Characteristics="@person.Characteristics"
                    Breadcrumbs="@_breadcrumbs"/>
                break;

            case EventTopicDetailModel topic:
                <EventDetail
                    Title="@topic.Title"
                    Description="@topic.Description"
                    Image="@topic.ImageUrl"
                    Started="@topic.Started"
                    Ended="@topic.Finished"
                    Breadcrumbs="@_breadcrumbs"/>
                break;
        }

        <EduContainer MaxWidth="@EduWidth.W1440">
            <ContentViewer
                Chapters="@result.Topic.Chapters"
                TopicId="@result.Topic.Id"
                Rating="@result.Rating"
                IsTestAvailable="@result.IsTestAvailable"
                UserActivity="@result.UserActivity"
                OnFavoriteClick="@ToggleFavoriteAsync"
                OnLikeClick="@LikeAsync"
                OnDislikeClick="@DislikeAsync"/>
        </EduContainer>

        @if (result.RelatedTopics.Length > 0)
        {
            <EduContainer MaxWidth="@EduWidth.W1440" Class="pt-0">
                <MudText Typo="Typo.h5" Class="mb-3">
                    @L["Topics:Related"]
                </MudText>
                <EduFillGrid>
                    @foreach (var (topic, userActivity) in result.RelatedTopics)
                    {
                        <TopicAndUserProgressCard
                            Topic="@topic"
                            UserActivity="@userActivity"
                            OnFavoriteClick="@ToggleFavoriteAsync"/>
                    }
                </EduFillGrid>
            </EduContainer>
        }
    </ApiViewer>
</EduPage>

@code {
    private readonly List<BreadcrumbItem> _breadcrumbs = new(2);
    private ApiResponse<TopicDetailCompositionModel> _response = ApiResponse<TopicDetailCompositionModel>.Loading();

    [Inject]
    private IHistoryClient HistoryClient { get; set; } = default!;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Parameter]
    public string Id { get; set; } = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        _response = ApiResponse<TopicDetailCompositionModel>.Loading();
        _response = await HistoryClient.Topic.GetAsync(Id);

        if (_response.IsSuccess)
        {
            _breadcrumbs.Clear();
            _breadcrumbs.Add(new BreadcrumbItem(L["Subject:History"], HistoryLinks.Root));
            _breadcrumbs.Add(new BreadcrumbItem(L[$"History:{_response.Data.Topic.Epoch.ToFastString()}"], HistoryLinks.Content.Epoch(_response.Data.Topic.Epoch)));
        }
    }

    private async Task<bool> LikeAsync()
    {
        var response = await HistoryClient.Topic.LikeAsync(Id);
        return response.IsSuccess;
    }

    private async Task<bool> DislikeAsync()
    {
        var response = await HistoryClient.Topic.DislikeAsync(Id);
        return response.IsSuccess;
    }

    private async Task<bool> ToggleFavoriteAsync(string id)
    {
        var result = await HistoryClient.Topic.ToggleFavoriteAsync(id);
        return result.IsSuccess && result.Data;
    }
}
