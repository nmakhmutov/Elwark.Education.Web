@using Education.Web.Gateways.Models.Content
@using Education.Web.Gateways.History
@implements IDisposable

<div class="grid">
    <section class="chapters">
        @foreach (var (id, title, subtitle, content) in Chapters)
        {
            <article class="chapter mud-paper">
                <h2 class="title" id="@ChapterId(id)">
                    @title
                </h2>

                @if (!string.IsNullOrEmpty(subtitle))
                {
                    <SimpleMarkdown Text="@subtitle" Class="subtitle"/>
                }

                <MudDivider Class="divider"/>

                <TopicMarkdown Text="@content" Style="@FormatService.TextStyles"/>
            </article>
        }
    </section>
    <section class="toolbar mud-paper pa-3 pa-sm-6">
        <div class="d-flex justify-space-between align-center mb-3 mb-sm-6">
            <MudText Typo="Typo.body2" Class="mr-3">
                @L["TopicFormatting:TextAlignment"]
            </MudText>
            <MudButtonGroup Size="Size.Small" Variant="Variant.Outlined">
                <MudIconButton
                    Disabled="@(FormatService.TextAlign == Align.Left)"
                    Icon="@Icons.Material.Filled.FormatAlignLeft"
                    OnClick="@FormatService.AlignTextLeftAsync"/>
                <MudIconButton
                    Disabled="@(FormatService.TextAlign == Align.Center)"
                    Icon="@Icons.Material.Filled.FormatAlignCenter"
                    OnClick="@FormatService.AlignTextCenterAsync"/>
                <MudIconButton
                    Disabled="@(FormatService.TextAlign == Align.Right)"
                    Icon="@Icons.Material.Filled.FormatAlignRight"
                    OnClick="@FormatService.AlignTextRightAsync"/>
                <MudIconButton
                    Disabled="@(FormatService.TextAlign == Align.Justify)"
                    Icon="@Icons.Material.Filled.FormatAlignJustify"
                    OnClick="@FormatService.AlignTextJustifyAsync"/>
            </MudButtonGroup>
        </div>

        <div class="d-flex justify-space-between align-center">
            <MudText Typo="Typo.body2" Class="mr-3">
                @L["TopicFormatting:FontSize"]
            </MudText>
            <MudButtonGroup Size="Size.Small" Variant="Variant.Outlined">
                <MudIconButton
                    Disabled="@(!FormatService.CanDecreaseFontSize())"
                    Icon="@Icons.Material.Filled.Remove"
                    OnClick="@FormatService.DecreaseFontSizeAsync"/>
                <MudIconButton
                    Disabled="@(!FormatService.CanIncreaseFontSize())"
                    Icon="@Icons.Material.Filled.Add"
                    OnClick="@FormatService.IncreaseFontSizeAsync"/>
            </MudButtonGroup>
        </div>
    </section>

    <section class="index mud-paper pa-3">
        <MudText Typo="Typo.subtitle2" Class="pt-sm-3 px-sm-3">
            @L["Topic:Contents"]
        </MudText>
        <MudList Clickable="true" Dense="true">
            @foreach (var (id, title, _, _) in Chapters)
            {
                <MudListItem Class="px-3" Text="@title" OnClick="@(() => Scroll.ScrollToFragmentAsync(ChapterId(id), ScrollBehavior.Smooth))"/>
            }
        </MudList>
    </section>

    <section class="test mud-paper pa-3 pa-sm-6">
        @if (IsTestAvailable && UserActivity.PassedTests > 0)
        {
            <MudLink Typo="Typo.subtitle2" Href="@HistoryLinks.User.MyTopic(TopicId)">
                @L["Test:MyProgress"]
            </MudLink>
        }
        else
        {
            <MudText Typo="Typo.subtitle2">
                @L["Test:MyProgress"]
            </MudText>
        }

        <TopicProgressView PassedTests="@UserActivity.PassedTests" TimeSpent="@UserActivity.TimeSpent" Class="pt-3 pb-3 pb-sm-6"/>

        @if (IsTestAvailable)
        {
            <MudButton FullWidth="true" Variant="Variant.Filled" Color="Color.Primary" Link="@HistoryLinks.TopicTest.Index(TopicId)">
                @L["Test:Pass"]
            </MudButton>
        }
    </section>

    <section class="rating mud-paper pa-3">
        <MudToolBar Dense="true" DisableGutters="true" Class="d-flex justify-center mb-3">
            <MudTooltip Text="@L["Topic:ILikeThis"]">
                <MudIconButton
                    Icon="@Icons.Filled.ThumbUp"
                    OnClick="@OnLike"
                    Color="@(_isLiked == true ? Color.Primary : Color.Default)"/>
            </MudTooltip>

            <MudTooltip Text="@L["Topic:IDislikeThis"]">
                <MudIconButton
                    Icon="@Icons.Filled.ThumbDown"
                    OnClick="@OnDislike"
                    Color="@(_isLiked == false ? Color.Primary : Color.Default)"/>
            </MudTooltip>

            <MudTooltip Text="@(_isFavorite ? L["Favorite:Remove"] : L["Favorite:Add"])">
                <MudToggleIconButton
                    Toggled="@_isFavorite"
                    ToggledChanged="@OnFavoriteChanged"
                    Icon="@Icons.Filled.FavoriteBorder"
                    Color="Color.Default"
                    Size="Size.Medium"
                    ToggledIcon="@Icons.Filled.Favorite"
                    ToggledColor="Color.Error"
                    ToggledSize="Size.Medium"/>
            </MudTooltip>
        </MudToolBar>

        <RatingStars Rating="@Rating" ShowDetails="true" Class="d-flex align-center justify-center"/>
    </section>
</div>

@code {
    private bool? _isLiked;
    private bool _isFavorite;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IScrollManager Scroll { get; set; } = default!;

    [Inject]
    private TopicContentFormatService FormatService { get; set; } = default!;

    [Parameter, EditorRequired]
    public string TopicId { get; set; } = string.Empty;

    [Parameter, EditorRequired]
    public ChapterModel[] Chapters { get; set; } = Array.Empty<ChapterModel>();

    [Parameter, EditorRequired]
    public bool IsTestAvailable { get; set; }

    [Parameter, EditorRequired]
    public UserActivityOverviewModel UserActivity { get; set; } = default!;

    [Parameter, EditorRequired]
    public ContentRatingModel Rating { get; set; } = default!;

    [Parameter, EditorRequired]
    public Func<Task<bool>> OnLikeClick { get; set; } = () => Task.FromResult(false);

    [Parameter, EditorRequired]
    public Func<Task<bool>> OnDislikeClick { get; set; } = () => Task.FromResult(false);

    [Parameter, EditorRequired]
    public Func<string, Task<bool>> OnFavoriteClick { get; set; } = _ => Task.FromResult(false);

    protected override async Task OnInitializedAsync()
    {
        _isFavorite = UserActivity.IsFavorite;
        _isLiked = UserActivity.IsLiked;
        await FormatService.InitAsync();
        FormatService.OnChange += StateHasChanged;
    }

    private async Task OnLike()
    {
        if (_isLiked == true)
            return;

        if (await OnLikeClick())
            _isLiked = true;
    }

    private async Task OnDislike()
    {
        if (_isLiked == false)
            return;

        if (await OnDislikeClick())
            _isLiked = false;
    }

    private async Task OnFavoriteChanged(bool toggled) =>
        _isFavorite = await OnFavoriteClick.Invoke(TopicId);

    private static string ChapterId(uint id) =>
        $"chapter-{id}";

    public void Dispose() =>
        FormatService.OnChange -= StateHasChanged;

}