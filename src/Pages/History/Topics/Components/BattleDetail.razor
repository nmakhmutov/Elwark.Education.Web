@using Education.Web.Gateways.History
@using Education.Web.Gateways.History.Topics.Model
@using Education.Web.Pages.History.Components
@using System.Reflection.Metadata

<EduContainer MaxWidth="EduWidth.W1440">
    <section class="grid">
        <header class="content">
            <div class="d-flex justify-center">
                <Breadcrumbs Class="pa-0" Items="@Breadcrumbs"/>
            </div>
            <h1 class="title">
                @Title
            </h1>
            <div class="d-flex justify-center mb-6">
                @if (Started == Finished)
                {
                    <HistoryDate Date="@Started" Typo="Typo.subtitle1"/>
                }
                else
                {
                    <div class="d-flex align-center">
                        <HistoryDate Date="@Started" Typo="Typo.subtitle1"/>
                        <MudText Typo="Typo.subtitle1" Class="mx-3">&#8212;</MudText>
                        <HistoryDate Date="@Finished" Typo="Typo.subtitle1"/>
                    </div>
                }
            </div>
            <MudText Class="mb-3 mb-sm-6" Typo="Typo.body1" Align="Align.Center">
                @Description
            </MudText>
            @if (Map is not null)
            {
                <div class="image-wrapper">
                    <MudImage Class="image mb-3 mb-sm-6 mx-auto" Src="@Map" Alt="@Title" ObjectFit="ObjectFit.Cover" ObjectPosition="ObjectPosition.Center"/>
                </div>
            }
            <MudText Typo="Typo.h6">
                @L["Battle:Location"]
            </MudText>
            <SimpleMarkdown Class="mb-3 mb-sm-6" Text="@Location"/>
            <MudText Typo="Typo.h6">
                @L["Battle:Result"]
            </MudText>
            <SimpleMarkdown Text="@Result"/>
        </header>

        <aside class="comparison">
            <div class="image-wrapper mb-3 mb-sm-6">
                <MudImage Class="image mx-auto" Src="@Image" Alt="@Title" ObjectFit="ObjectFit.Cover" ObjectPosition="ObjectPosition.Center"/>
            </div>
            @foreach (var item in _conflictParties)
            {
                <div class="mb-3 mb-sm-6">
                    <MudText Class="mb-3" Typo="Typo.h6" Align="Align.Center">
                        @L[$"Battle:{item.Key}"]
                    </MudText>
                    <div class="d-flex justify-space-around gap-3">
                        @for (var i = 0; i < item.Value.Count; i++)
                        {
                            <SimpleMarkdown Class="flex-1" Text="@item.Value[i]"/>
                            @if (i < item.Value.Count - 1)
                            {
                                <MudDivider Class="flex-0" Vertical FlexItem/>
                            }
                        }
                    </div>
                </div>
            }
        </aside>
    </section>
</EduContainer>

@code {
    private Dictionary<string, List<string>> _conflictParties = new();

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Parameter, EditorRequired]
    public string Title { get; set; } = string.Empty;

    [Parameter, EditorRequired]
    public string Description { get; set; } = string.Empty;

    [Parameter, EditorRequired]
    public string Image { get; set; } = string.Empty;

    [Parameter, EditorRequired]
    public HistoricalDateModel? Started { get; set; }

    [Parameter, EditorRequired]
    public HistoricalDateModel? Finished { get; set; }

    [Parameter, EditorRequired]
    public string Location { get; set; } = string.Empty;

    [Parameter, EditorRequired]
    public string Result { get; set; } = string.Empty;

    [Parameter, EditorRequired]
    public string? Map { get; set; }

    [Parameter, EditorRequired]
    public ConflictPartyModel[] ConflictParties { get; set; } = Array.Empty<ConflictPartyModel>();

    [Parameter, EditorRequired]
    public List<BreadcrumbItem> Breadcrumbs { get; init; } = new();

    protected override void OnParametersSet()
    {
        _conflictParties = new Dictionary<string, List<string>>
        {
            { nameof(ConflictPartyModel.Belligerents), new List<string> { ConflictParties[0].Belligerents } },
            { nameof(ConflictPartyModel.Commanders), new List<string> { ConflictParties[0].Commanders } },
            { nameof(ConflictPartyModel.Strength), new List<string> { ConflictParties[0].Strength } },
            { nameof(ConflictPartyModel.Losses), new List<string> { ConflictParties[0].Losses } }
        };

        for (var i = 1; i < ConflictParties.Length; i++)
        {
            _conflictParties[nameof(ConflictPartyModel.Belligerents)].Add(ConflictParties[i].Belligerents);
            _conflictParties[nameof(ConflictPartyModel.Commanders)].Add(ConflictParties[i].Commanders);
            _conflictParties[nameof(ConflictPartyModel.Strength)].Add(ConflictParties[i].Strength);
            _conflictParties[nameof(ConflictPartyModel.Losses)].Add(ConflictParties[i].Losses);
        }
    }

}
