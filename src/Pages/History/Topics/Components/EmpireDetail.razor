@using Education.Web.Gateways.History
@using Education.Web.Pages.History.Components
@using MudBlazor.Utilities
@implements IDisposable

<header class="background" style="@_style">
    <section class="d-flex flex-column justify-center align-center h-100">
        <Breadcrumbs Items="@Breadcrumbs" Typo="Typo.subtitle1"/>
        @if (FlagUrl is not null)
        {
            <div class="d-flex justify-center align-center mb-3">
                <MudImage
                    Src="@FlagUrl"
                    Width="160"
                    Height="90"
                    ObjectFit="ObjectFit.Contain"
                    ObjectPosition="ObjectPosition.Center"/>
            </div>
        }
        <h1 class="title mb-3">
            @Title
        </h1>
        <section class="d-flex flex-wrap justify-center align-center">
            <div class="pa-3 pa-sm-6">
                <MudText Typo="Typo.subtitle1" Align="Align.Center">
                    @L["Empire:Founded"]
                </MudText>
                <HistoryDate Date="@Founded" Typo="Typo.h6" Align="Align.Center"/>
            </div>
            <div class="pa-3 pa-sm-6">
                <MudText Typo="Typo.subtitle1" Align="Align.Center">
                    @L["Empire:Dissolved"]
                </MudText>
                <HistoryDate Date="@Dissolved" Typo="Typo.h6" Align="Align.Center"/>
            </div>
            <div class="pa-3 pa-sm-6">
                <MudText Typo="Typo.subtitle1" Align="Align.Center">
                    @L["Empire:Duration"]
                </MudText>
                <MudText Typo="Typo.h6" Align="Align.Center">
                    @if (Duration.HasValue)
                    {
                        @Duration.Value.ToString("N0")<small>&nbsp;@L["History:Years"].Value.ToLowerInvariant()</small>
                    }
                    else
                    {
                        @L["History:Unknown"]
                    }
                </MudText>
            </div>
            <div class="pa-3 pa-sm-6">
                <MudText Typo="Typo.subtitle1" Align="Align.Center">
                    @L["Empire:MaxArea"]
                </MudText>
                <MudText Typo="Typo.h6" Align="Align.Center">
                    @if (MaxArea > 0)
                    {
                        @MaxArea.ToString("N0")<small>km<sup>2</sup></small>
                    }
                    else
                    {
                        @L["History:Unknown"]
                    }
                </MudText>
            </div>
            <div class="pa-3 pa-sm-6">
                <MudText Typo="Typo.subtitle1" Align="Align.Center">
                    @L["Empire:MaxPopulation"]
                </MudText>
                <MudText Typo="Typo.h6" Align="Align.Center">
                    @if (MaxPopulation > 0)
                    {
                        @MaxPopulation.ToString("N0")
                    }
                    else
                    {
                        @L["History:Unknown"]
                    }
                </MudText>
            </div>
        </section>
        <EduContainer MaxWidth="EduWidth.W1280">
            <MudText Typo="Typo.subtitle1" Class="mb-3 mb-sm-6">
                @Description
            </MudText>
        </EduContainer>
    </section>
</header>

@code {
    private string? _style;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private ThemeService ThemeService { get; set; } = default!;

    [Parameter, EditorRequired]
    public string Title { get; set; } = string.Empty;

    [Parameter, EditorRequired]
    public string Description { get; set; } = string.Empty;

    [Parameter, EditorRequired]
    public string Image { get; set; } = string.Empty;

    [Parameter, EditorRequired]
    public HistoricalDateModel? Founded { get; set; }

    [Parameter, EditorRequired]
    public HistoricalDateModel? Dissolved { get; set; }

    [Parameter, EditorRequired]
    public uint? Duration { get; set; }

    [Parameter, EditorRequired]
    public uint MaxArea { get; set; }

    [Parameter, EditorRequired]
    public uint MaxPopulation { get; set; }

    [Parameter]
    public string? MapUrl { get; set; }

    [Parameter]
    public string? FlagUrl { get; set; }

    [Parameter, EditorRequired]
    public List<BreadcrumbItem> Breadcrumbs { get; init; } = new();

    protected override void OnParametersSet() =>
        BackgroundChanger();

    protected override void OnInitialized() =>
        ThemeService.OnChange += BackgroundChanger;

    public void Dispose() =>
        ThemeService.OnChange -= BackgroundChanger;

    private Task BackgroundChanger()
    {
        var overlay = $"--mud-palette-overlay-{(ThemeService.IsDarkMode ? "dark" : "light")}";

        _style = StyleBuilder
            .Default("background", $"linear-gradient(0deg, var(--mud-palette-background) 15%, var({overlay}) 100%), url('{Image}')")
            .AddStyle("background-size", "cover")
            .AddStyle("background-repeat", "no-repeat")
            .AddStyle("background-position", "top center")
            .Build();

        StateHasChanged();

        return Task.CompletedTask;
    }

}
