@page "/history/event-guessers"
@using Education.Web.Gateways.History
@using Education.Web.Gateways.History.EventGuessers.Model
@using Education.Web.Gateways.History.EventGuessers.Request
@using Education.Web.Pages.History.Components
@layout HistoryLayout
@attribute [Authorize]

<PageTitle>@L["EventGuesser"]</PageTitle>

<EduPage ShowFooter="false">
    <div class="background d-flex flex-column h-100">
        <EduContainer Class="pb-0">
            <PageHeader Title="@L["EventGuesser"]" Breadcrumbs="@Breadcrumbs">
                <div>
                    <MudButton
                        DisableElevation
                        Variant="Variant.Text"
                        Color="Color.Primary"
                        EndIcon="@Icons.Outlined.Info"
                        Disabled="@(!_result.IsSuccess)"
                        OnClick="@OpenRule">
                        @L["EventGuesser:Rules"]
                    </MudButton>
                </div>
            </PageHeader>
        </EduContainer>
        <ApiViewer Result="@_result" Context="context">
            <section class="grid pa-3 pa-sm-6">
                <section class="builder">
                    <MudText Typo="Typo.h5" Class="mb-3">
                        @L["History:Epoch"]
                    </MudText>
                    <EpochRadioGroup @bind-SelectedEpoch="@_epoch" Class="mb-3 mb-sm-6"/>

                    <MudText Typo="Typo.h5" Class="mb-3">
                        @L["Tests"]
                    </MudText>
                    <TestRadioGroup @bind-SelectedTest="_test" Tests="@context.Tests" Class="mb-6"/>

                    <div class="d-flex justify-center">
                        <LoadingButton
                            DisableElevation
                            Size="Size.Large"
                            Color="Color.Primary"
                            Variant="Variant.Filled"
                            Text="@L["Test:Pass"]"
                            LoadingText="@L["Loading"]"
                            IsLoading="@_isLoading"
                            Disabled="@(context.Tests.All(x => !x.IsAllowed))"
                            OnClick="@CreateTestAsync"/>
                    </div>
                </section>

                <section class="inventory">
                    <MudText Typo="Typo.h5" Class="mb-3">
                        @L["Inventory"]
                    </MudText>
                    @if (context.Inventory.Length > 0)
                    {
                        <InventoryGrid>
                            @foreach (var item in context.Inventory)
                            {
                                <InventoryInfoCard Title="@item.Title" Overview="@item.Overview" IconUrl="@item.IconUrl">
                                    <div class="d-flex justify-center">
                                        <HumanReadableNumber Typo="Typo.h6" Value="@item.Count"/>
                                    </div>
                                </InventoryInfoCard>
                            }
                        </InventoryGrid>
                    }
                    else
                    {
                        <EmptyResult Title="@L["Inventory:EmptyTitle"]"/>
                    }
                </section>
            </section>
        </ApiViewer>
    </div>
</EduPage>

@code {
    private bool _isLoading;
    private EpochType _epoch = EpochType.None;
    private string _test = string.Empty;
    private ApiResult<TestBuilderModel> _result = ApiResult<TestBuilderModel>.Loading();

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["Subject:History"].Value, HistoryLinks.Root)
    };

    [Inject]
    public IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryClient Client { get; set; } = default!;

    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    [Inject]
    private IDialogService DialogService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        _result = await Client.EventGuesser.GetAsync();
        if (_result.IsSuccess)
            _test = _result.Data.Tests.FirstOrDefault(x => x.IsAllowed)?.Name ?? string.Empty;

        if (_result.IsFailed && _result.Error.IsTestAlreadyCreated(out var id))
            Navigation.NavigateTo(HistoryLinks.EventGuesser.Test(id));
    }

    private async Task CreateTestAsync()
    {
        _isLoading = true;

        var response = await Client.EventGuesser.CreateAsync(new CreateRequest(_test, _epoch));
        if (response.IsSuccess)
            Navigation.NavigateTo(HistoryLinks.EventGuesser.Test(response.Data.Id));
        else
            Snackbar.Add(response.Error.Detail, Severity.Error);

        _isLoading = false;
    }

    private void OpenRule()
    {
        var parameters = new DialogParameters { [nameof(RuleDialog.Content)] = _result.Data.Rule.Content };
        var options = new DialogOptions { FullWidth = true, MaxWidth = MaxWidth.Large, CloseOnEscapeKey = true, CloseButton = true };

        DialogService.Show<RuleDialog>(_result.Data.Rule.Title, parameters, options);
    }

}
