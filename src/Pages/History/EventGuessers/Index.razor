@page "/history/event-guessers"
@layout HistoryLayout
@attribute [Authorize]

@using Education.Web.Gateways.History
@using Education.Web.Gateways.History.EventGuesser.Model
@using Education.Web.Gateways.History.EventGuesser.Request
@using Education.Web.Pages.History.Components

<PageTitle>@L["EventGuesser"]</PageTitle>

<EduPage ShowFooter="false">
    <div class="background d-flex flex-column pa-3 pa-sm-6 h-100">
        <ApiViewer Response="@_response">
            <Success Context="builder">
                <PageHeader Title="@L["EventGuesser"]" Class="mb-3 mb-sm-6" Breadcrumbs="@Breadcrumbs"/>

                <section class="grid">
                    <section class="builder">
                        <MudText Typo="Typo.h5" Class="mb-3">
                            @L["History:Epoch"]
                        </MudText>
                        <EpochRadioGroup @bind-SelectedEpoch="@_epoch" Class="mb-3 mb-sm-6"/>

                        <MudSlider @bind-Value="@_questions" Min="3" Max="13" Color="Color.Primary" Class="mb-3">
                            @L["EventGuesser:NumberOfDates", _questions]
                        </MudSlider>

                        <div class="d-flex justify-center">
                            <LoadingButton
                                DisableElevation="true"
                                Size="Size.Large"
                                Color="Color.Primary"
                                Variant="Variant.Filled"
                                Text="@L["Test:Pass"]"
                                LoadingText="@L["Loading"]"
                                IsLoading="@_isLoading"
                                Disabled="@(!_allowed)"
                                OnClick="@CreateTestAsync"/>
                        </div>
                    </section>

                    <section class="inventory">
                        <MudText Typo="Typo.h5" Class="mb-3">
                            @L["Inventory"]
                        </MudText>
                        <InventoryGrid>
                            @foreach (var item in builder.Inventory)
                            {
                                <InventoryInfoCard Id="@item.Id" Title="@item.Title" Overview="@item.Overview">
                                    <div class="d-flex justify-center">
                                        <HumanReadableText Typo="Typo.h6" Value="@item.Count"/>
                                    </div>
                                </InventoryInfoCard>
                            }
                        </InventoryGrid>
                    </section>

                    <footer class="rule">
                        <MudText Typo="Typo.h6" Class="mb-3">
                            @builder.Rule.Title
                        </MudText>
                        <SimpleMarkdown Text="@builder.Rule.Content"/>
                    </footer>
                </section>
            </Success>
        </ApiViewer>
    </div>
</EduPage>

@code {
    private bool _isLoading;
    private bool _allowed;
    private EpochType _epoch = EpochType.None;
    private int _questions = 4;
    private ApiResponse<TestBuilderModel> _response = ApiResponse<TestBuilderModel>.Loading();

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["Subject:History"].Value, Links.History.Index)
    };

    [Inject]
    public IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryClient Client { get; set; } = default!;

    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        _response = await Client.EventGuesser.GetAsync();

        if (_response.IsSuccess)
            _allowed = _response.Data.Inventory.Any(x => x.Id == 104 && x.Count > 0);
        else if (_response.Error.IsTestAlreadyCreated(out var id))
            Navigation.NavigateTo(Links.History.EventGuesser.Test(id));
    }

    private async Task CreateTestAsync()
    {
        _isLoading = true;

        var response = await Client.EventGuesser.CreateAsync(new CreateRequest(_questions, _epoch));
        if (response.IsSuccess)
            Navigation.NavigateTo(Links.History.EventGuesser.Test(response.Data.Id));
        else
            Snackbar.Add(response.Error.Detail, Severity.Error);

        _isLoading = false;
    }

}
