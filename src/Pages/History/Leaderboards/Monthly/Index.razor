@page "/history/leaderboards/monthly"
@using Education.Web.Gateways.History.Leaderboards.Model
@using Education.Web.Pages.History.Leaderboards.Components
@using Education.Web.Gateways.History
@layout HistoryLayout
@attribute [Authorize]

<EduPage ShowFooter="@_response.IsLoaded">
    <EduContainer MaxWidth="EduWidth.W1920">
        <PageHeader Title="@L["Leaderboard:Monthly:Name"]" Breadcrumbs="@Breadcrumbs">
            <div class="align-self-start mt-3 mt-sm-0" style="min-width: 180px;">
                @if (_leaderboards.Length > 0)
                {
                    <MudSelect Label="@L["Month"]" T="DateOnly" Value="@_leaderboard" ValueChanged="@OnMonthChanged">
                        @foreach (var month in _leaderboards)
                        {
                            <MudSelectItem Value="@month">
                                @month.ToString("MMMM yyyy")
                            </MudSelectItem>
                        }
                    </MudSelect>
                }
            </div>
        </PageHeader>
    </EduContainer>

    <ApiViewer Response="@_response" Context="leaderboard">
        <EduContainer MaxWidth="EduWidth.W1920">
            <MudText Typo="Typo.h6" Align="Align.Center">
                @leaderboard.StartsAt.ToFullCustomerFormat(Customer.DateTimeInfo) â€” @leaderboard.EndsAt.ToFullCustomerFormat(Customer.DateTimeInfo)
            </MudText>
            @if (leaderboard.Users.Length > 0)
            {
                <RankingTable HighlightUser="@_highlightUser" Users="@leaderboard.Users"/>
            }
            else
            {
                <EmptyResult
                    Class="mt-3 mt-sm-6"
                    Title="@L["Leaderboard:EmptyContestantsTitle"]"
                    Subtitle="@L["Leaderboard:EmptyContestantsSubtitle"]"/>
            }
        </EduContainer>
    </ApiViewer>
</EduPage>

@code {
    private long _highlightUser;
    private DateOnly _leaderboard;
    private DateOnly[] _leaderboards = Array.Empty<DateOnly>();
    private ApiResponse<MonthlyLeaderboardModel> _response = ApiResponse<MonthlyLeaderboardModel>.Loading();

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["Subject:History"].Value, HistoryLinks.Root)
    };

    [Inject]
    private IHistoryClient Client { get; set; } = default!;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    public AuthenticationStateProvider StateProvider { get; set; } = default!;

    [CascadingParameter]
    private CustomerState Customer { get; set; } = default!;
    
    protected override async Task OnInitializedAsync()
    {
        _response = await Client.Leaderboard.GetMonthAsync();
        var state = await StateProvider.GetAuthenticationStateAsync();
        if (state.User.Identity?.IsAuthenticated ?? false)
            _highlightUser = state.User.GetId();

        if (_response.IsSuccess)
        {
            _leaderboard = _response.Data.Leaderboard;
            _leaderboards = _response.Data.Leaderboards;
        }
    }

    private async Task OnMonthChanged(DateOnly month)
    {
        _response = ApiResponse<MonthlyLeaderboardModel>.Loading();
        _response = await Client.Leaderboard.GetMonthAsync(month);
        if (_response.IsSuccess)
            _leaderboard = _response.Data.Leaderboard;
    }

}
