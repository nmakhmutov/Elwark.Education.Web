@page "/history/leaderboards/global"
@using Education.Web.Gateways.History.Leaderboards.Model
@using Education.Web.Pages.History.Leaderboards.Global.Components
@using Education.Web.Gateways.History
@layout HistoryLayout
@attribute [Authorize]

<EduPage ShowFooter="@_response.IsLoaded">
    <EduContainer MaxWidth="EduWidth.W1920" Class="pb-0">
        <PageHeader Title="@L["Leaderboard:Global:Name"]" Breadcrumbs="@Breadcrumbs"/>
    </EduContainer>
    
    <ApiViewer Response="@_response" Context="items">
        <EduContainer MaxWidth="EduWidth.W1920" Class="pb-0">
            <EduFitGrid>
                @foreach (var user in items[..3])
                {
                    <RankingCard
                        Rank="@user.Rank"
                        Level="@user.Level"
                        Experience="@user.Experience"
                        Name="@user.FullName"
                        Image="@user.Image"/>
                }
            </EduFitGrid>
        </EduContainer>

        <EduContainer MaxWidth="EduWidth.W1920">
            <RankingTable HighlightUser="@_highlightUser" Users="@(items[3..])"/>
        </EduContainer>
    </ApiViewer>
</EduPage>

@code {
    private long _highlightUser;
    private ApiResponse<GlobalRankingModel[]> _response = ApiResponse<GlobalRankingModel[]>.Loading();

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["Subject:History"].Value, HistoryLinks.Root)
    };

    [Inject]
    private IHistoryClient Client { get; set; } = default!;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    public AuthenticationStateProvider StateProvider { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        _response = await Client.Leaderboard.GetGlobalAsync();
        var state = await StateProvider.GetAuthenticationStateAsync();
        if (state.User.Identity?.IsAuthenticated ?? false)
            _highlightUser = state.User.GetId();
    }

}
