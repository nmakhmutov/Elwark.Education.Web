@page "/history/epochs/{type}"
@using Education.Web.Gateways.History.Topics.Request
@using Education.Web.Pages.History.Components
@using Education.Web.Gateways.History
@layout HistoryLayout
@attribute [Authorize]

<EduPage ShowFooter="@_response.IsLoaded">
    <PageTitle>@L[$"History:{_request.Epoch.ToFastString()}"]</PageTitle>
    <EduContainer Class="pb-0">
        <PageHeader Title="@L[$"History:{_request.Epoch.ToFastString()}"]" Breadcrumbs="@Breadcrumbs"/>
    </EduContainer>
    <ApiViewer Response="_response" Context="topics">
        <EduContainer>
            <EduFillGrid Class="mb-6 mb-sm-12">
                @foreach (var (topic, userActivity) in topics.Items)
                {
                    <TopicAndUserProgressCard
                        Topic="@topic"
                        UserActivity="@userActivity"
                        OnFavoriteClick="@OnFavoriteClick"/>
                }
            </EduFillGrid>
            <div class="d-flex justify-center">
                <MudPagination Selected="@CurrentPage" SelectedChanged="@OnPagination" Count="@((int)_response.Data.Pages)"/>
            </div>
        </EduContainer>
    </ApiViewer>
</EduPage>

@code {
    private GetTopicsRequest _request = new(EpochType.Prehistory, 1, 20);
    private ApiResponse<OffsetResponse<UserTopicOverviewModel>> _response = ApiResponse<OffsetResponse<UserTopicOverviewModel>>.Loading();

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["Subject:History"].Value, HistoryLinks.Root)
    };

    [Inject]
    private IHistoryClient HistoryClient { get; set; } = default!;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    [Parameter]
    public string? Type { get; set; }

    [Parameter, SupplyParameterFromQuery(Name = "page")]
    public int CurrentPage { get; set; } = 1;

    protected override async Task OnParametersSetAsync()
    {
        _response = ApiResponse<OffsetResponse<UserTopicOverviewModel>>.Loading();
        CurrentPage = CurrentPage < 1 ? 1 : CurrentPage;

        if (Enum.TryParse<EpochType>(Type, true, out var type))
        {
            _request = _request with { Epoch = type, Page = CurrentPage };
            _response = await HistoryClient.Topic.GetAsync(_request);
        }
        else
        {
            var error = Error.Create(L["Error:NotFound"], 404);
            _response = ApiResponse<OffsetResponse<UserTopicOverviewModel>>.Fail(error);
        }
    }

    private async Task<bool> OnFavoriteClick(string topicId)
    {
        var result = await HistoryClient.Topic.ToggleFavoriteAsync(topicId);
        return result.IsSuccess && result.Data;
    }

    private void OnPagination(int page)
    {
        CurrentPage = page;
        Navigation.NavigateTo(Navigation.GetUriWithQueryParameter("page", CurrentPage));
    }

}
