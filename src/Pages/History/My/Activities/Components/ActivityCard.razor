@using ApexCharts
@using Education.Web.Gateways.History.Users.Model
@implements IDisposable

<MudCard Class="@Class" Elevation="0">
    <MudCardHeader Class="pb-0 px-3 pt-3 px-sm-6 pt-sm-6">
        <CardHeaderContent>
            <MudText Typo="Typo.h6">
                @Title
            </MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent Class="pa-3 pa-sm-6">
        <div style="max-height: 350px; height: 100%; position: relative">
            <ApexChart @ref="@_chart" TItem="ProgressStatisticsModel.Progress" Options="_options" Height="@("350px")">
                <ApexPointSeries
                    TItem="ProgressStatisticsModel.Progress"
                    Items="Activities"
                    Name="@L["NumberOfTests:Total"]"
                    Stroke="@(new SeriesStroke { Width = 3, Color = Colors.Green.Accent4 })"
                    SeriesType="SeriesType.Area"
                    XValue="@(e => e.Date.ToString(DateFormat))"
                    YValue="@(x => x.Total)"/>

                <ApexPointSeries
                    TItem="ProgressStatisticsModel.Progress"
                    Items="Activities"
                    Name="@L["Tests:Easy"]"
                    Stroke="@(new SeriesStroke { Width = 3, Color = Colors.Blue.Lighten1 })"
                    SeriesType="SeriesType.Area"
                    XValue="@(e => e.Date.ToString(DateFormat))"
                    YValue="@(x => x.EasyTests)"/>

                <ApexPointSeries
                    TItem="ProgressStatisticsModel.Progress"
                    Items="Activities"
                    Name="@L["Tests:Hard"]"
                    Stroke="@(new SeriesStroke { Width = 3, Color = Colors.Blue.Darken2 })"
                    SeriesType="SeriesType.Area"
                    XValue="@(e => e.Date.ToString(DateFormat))"
                    YValue="@(x => x.HardTests)"/>

                <ApexPointSeries
                    TItem="ProgressStatisticsModel.Progress"
                    Items="Activities"
                    Name="@L["Tests:Mixed"]"
                    Stroke="@(new SeriesStroke { Width = 3, Color = Colors.Indigo.Darken1 })"
                    SeriesType="SeriesType.Area"
                    XValue="@(e => e.Date.ToString(DateFormat))"
                    YValue="@(x => x.MixedTests)"/>

                <ApexPointSeries
                    TItem="ProgressStatisticsModel.Progress"
                    Items="Activities"
                    Name="@L["EventGuesser"]"
                    Stroke="@(new SeriesStroke { Width = 3, Color = Colors.DeepOrange.Default })"
                    SeriesType="SeriesType.Area"
                    XValue="@(e => e.Date.ToString(DateFormat))"
                    YValue="@(x => x.EventGuessers)"/>
            </ApexChart>
        </div>
    </MudCardContent>
</MudCard>

@code {
    private ApexChart<ProgressStatisticsModel.Progress> _chart = default!;
    private ApexChartOptions<ProgressStatisticsModel.Progress> _options = new();

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private ThemeService ThemeService { get; set; } = default!;

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public string DateFormat { get; set; } = "dd MMM";

    [Parameter, EditorRequired]
    public ProgressStatisticsModel.Progress[] Activities { get; set; } = Array.Empty<ProgressStatisticsModel.Progress>();

    protected override void OnParametersSet()
    {
        _options = new ApexChartOptions<ProgressStatisticsModel.Progress>
        {
            Legend = new Legend
            {
                Position = LegendPosition.Top
            },
            Chart = new Chart
            {
                Background = "transparent",
                ForeColor = "var(--mud-palette-text-primary)"
            },
            Grid = new Grid
            {
                BorderColor = "var(--mud-palette-divider)"
            },
            Theme = new Theme
            {
                Mode = ThemeService.IsDarkMode ? Mode.Dark : Mode.Light
            }
        };

        ThemeService.OnChange += Update;
    }

    public void Dispose() =>
        ThemeService.OnChange -= Update;

    private async Task Update()
    {
        _options.Theme.Mode = ThemeService.IsDarkMode ? Mode.Dark : Mode.Light;
        await _chart.RenderAsync();
        StateHasChanged();
    }

}
