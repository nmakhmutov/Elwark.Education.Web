@using Education.Web.Services.History
@using Education.Web.Services.History.User
@using Education.Web.Services.History.User.Model
@using Education.Web.Pages.History.My.Topics.Components

@page "/history/my/topics/{id}"
@layout HistoryLayout
@attribute [Authorize]

<EduPage ShowFooter="@_result.IsLoaded">
    <ApiViewer Result="@_result" Context="result">
        <EduContainer MaxWidth="EduWidth.W1280">
            <PageTitle>@result.Topic.Title</PageTitle>

            <TopicOverview Class="mb-3 mb-sm-6" Topic="@result.Topic" Total="@result.Total" Breadcrumbs="@_breadcrumbs"/>

            <TestOverview Title="@L["Tests:Easy"]" Href="@HistoryUrl.User.MyEasyTests" Test="@result.EasyTest"/>

            <div class="py-6"></div>

            <TestOverview Title="@L["Tests:Hard"]" Href="@HistoryUrl.User.MyHardTests" Test="@result.HardTest"/>
        </EduContainer>
    </ApiViewer>
</EduPage>

@code {
    private List<BreadcrumbItem> _breadcrumbs = new();

    private ApiResult<TopicStatisticsModel> _result = ApiResult<TopicStatisticsModel>.Loading();

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryUserService UserService { get; set; } = default!;

    [Parameter]
    public string Id { get; set; } = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        _result = await UserService.GetTopicsAsync(Id);

        if (_result.IsSuccess)
            _breadcrumbs = new List<BreadcrumbItem>
            {
                new(L["Subject:History"].Value, HistoryUrl.Root),
                new(L[$"Epoch:{_result.Data.Topic.Epoch.ToFastString()}"].Value, HistoryUrl.Content.Epoch(_result.Data.Topic.Epoch))
            };
    }

}