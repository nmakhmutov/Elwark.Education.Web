@using Education.Web.Pages.History.My.Components
@using Education.Web.Pages.History.My.Profile.Components
@using Education.Web.Services.History.User
@using Education.Web.Services.History.User.Model

@page "/history/my/profile"
@layout HistoryLayout
@attribute [Authorize]

<PageTitle>
    @(string.IsNullOrEmpty(Customer.Name) ? L["Profile"] : Customer.Name)
</PageTitle>

<EduPage ShowFooter="@_result.IsLoaded">
    <ApiViewer Result="@_result" Context="profile">
        <EduContainer MaxWidth="EduWidth.W1920">
            <div class="grid">
                <ProfileCard Class="profile" Customer="Customer" Level="@profile.Level"/>

                <WalletCard Class="wallet" Silver="@profile.Silver"/>

                <ActivityCard Class="activity" Activities="@profile.DailyProgress"/>

                <DailyBonusCard
                    Class="daily-bonus"
                    Bonus="@profile.DailyBonus"
                    OnCollect="@CollectDailyBonusAsync"
                    OnReject="@RejectDailyBonusAsync"
                    OnReached="@OnInitializedAsync"/>

                <AchievementsCard Class="achievements" Achievements="@profile.Achievements"/>

                <StatisticsCard
                    Class="easy-test"
                    Title="@L["Tests:Easy"]"
                    Value="@profile.EasyTest.NumberOfTests.Total"
                    Href="@HistoryUrl.User.MyEasyTests">
                    <Subheader Title="@L["Score"]" Subtitle="@L["ForAllTime"]"/>
                    <ScoreChart Value="@profile.EasyTest.Score"/>
                </StatisticsCard>

                <StatisticsCard
                    Class="hard-test"
                    Title="@L["Tests:Hard"]"
                    Value="@profile.HardTest.NumberOfTests.Total"
                    Href="@HistoryUrl.User.MyHardTests">
                    <Subheader Title="@L["Score"]" Subtitle="@L["ForAllTime"]"/>
                    <ScoreChart Value="@profile.HardTest.Score"/>
                </StatisticsCard>

                <StatisticsCard
                    Class="mixed-test"
                    Title="@L["Tests:Mixed"]"
                    Value="@profile.MixedTest.NumberOfTests.Total"
                    Href="@HistoryUrl.User.MyMixedTests">
                    <Subheader Title="@L["Score"]" Subtitle="@L["ForAllTime"]"/>
                    <ScoreChart Value="@profile.MixedTest.Score"/>
                </StatisticsCard>

                <StatisticsCard
                    Class="event-guesser"
                    Title="@L["EventGuesser"]"
                    Value="@profile.EventGuesser.Tests"
                    Href="@HistoryUrl.User.MyEventGuessers">
                    <Subheader Title="@L["Score"]" Subtitle="@L["ForAllTime"]"/>
                    <EventGuesserScoreChart
                        Score="@profile.EventGuesser.Score"
                        Points="@profile.EventGuesser.Points"
                        Bonus="@profile.EventGuesser.Bonus"/>
                </StatisticsCard>

            </div>
        </EduContainer>
    </ApiViewer>
</EduPage>

@code {
    private ApiResult<HistoryUserProfileModel> _result = ApiResult<HistoryUserProfileModel>.Loading();

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryUserService UserService { get; set; } = default!;

    [CascadingParameter]
    private CustomerState Customer { get; set; } = default!;

    protected override async Task OnInitializedAsync() =>
        _result = await UserService.GetOverviewAsync();

    private async Task CollectDailyBonusAsync()
    {
        var response = await UserService.CollectDailyBonusAsync();
        if (response.IsSuccess)
            _result = await UserService.GetOverviewAsync();
    }

    private async Task RejectDailyBonusAsync()
    {
        var response = await UserService.RejectDailyBonusAsync();
        if (response.IsSuccess)
            _result = await UserService.GetOverviewAsync();
    }

}
