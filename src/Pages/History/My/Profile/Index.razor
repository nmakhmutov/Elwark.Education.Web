@using Education.Web.Services.History.User.Model
@using Education.Web.Services.History.User
@using Education.Web.Pages.History.Components
@using Education.Web.Pages.History.My.Profile.Components

@page "/history/my/profile"
@layout HistoryLayout
@attribute [Authorize]

<PageTitle>@L["Profile"]</PageTitle>

<EduPage ShowFooter>
    <ApiViewer Result="@_result" Context="data">
        <EduContainer MaxWidth="EduWidth.W1920">
            <div class="grid">
                <div class="wallet">
                    <ProfileCard Class="mb-3 mb-sm-6" Level="@data.Level"/>
                    <WalletCard Silver="@data.Silver"/>
                </div>
                <div class="inventory">
                    <header class="d-flex align-center justify-space-between mb-3 mb-sm-6">
                        <MudText Typo="Typo.h5">
                            @L["Inventory"]
                        </MudText>
                        <MudText Typo="Typo.h5">
                            @_capacity
                        </MudText>
                    </header>
                    <InventoryGrid>
                        @foreach (var item in data.Inventory.Items)
                        {
                            <InventoryInfoCard Title="@item.Title" Overview="@item.Overview" IconUrl="@item.IconUrl">
                                <div class="d-flex justify-center">
                                    <ReadableNumber Typo="Typo.h6" Value="@item.Count"/>
                                </div>
                            </InventoryInfoCard>
                        }
                    </InventoryGrid>
                </div>
            </div>
        </EduContainer>
    </ApiViewer>
</EduPage>

@code {
    private ApiResult<HistoryProfileModel> _result = ApiResult<HistoryProfileModel>.Loading();
    private string? _capacity;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryUserService UserService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        _result = await UserService.GetProfileAsync();
        if (_result.IsSuccess)
            _capacity = $"{_result.Data.Inventory.Fullness} / {_result.Data.Inventory.Capacity}";
    }

}