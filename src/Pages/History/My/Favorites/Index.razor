@page "/history/my/favorites"
@using Education.Web.Gateways.History
@using Education.Web.Gateways.History.Users.Request
@using Education.Web.Pages.Account
@layout HistoryLayout
@attribute [Authorize]

<PageTitle>@L["Favorites"]</PageTitle>
<EduPage ShowFooter>
    <EduContainer MaxWidth="EduWidth.W1920">
        <PageHeader Title="@L["Favorites"]" Breadcrumbs="@Breadcrumbs">
            @if (!_isEmpty)
            {
                <div>
                    <MudSelect Label="@L["Favorites:Sort"]" T="FavoritesRequest.SortType" Value="@_request.Sort" ValueChanged="@OnSortChanged">
                        @foreach (var sort in Enum.GetValues<FavoritesRequest.SortType>())
                        {
                            <MudSelectItem T="FavoritesRequest.SortType" Value="sort">
                                @L[$"Favorites:{sort}"]
                            </MudSelectItem>
                        }
                    </MudSelect>
                </div>
            }
        </PageHeader>
    </EduContainer>
    @if (_isLoading)
    {
        <PageSpinner/>
    }
    else
    {
        <EduContainer MaxWidth="EduWidth.W1920">
            @if (_isEmpty)
            {
                <EmptyResult
                    Class="grid-full-row"
                    Title="@L["Favorites:EmptyTitle"]"
                    Subtitle="@L["Favorites:EmptySubtitle"]"/>
            }
            else
            {
                <div class="grid px-3 px-sm-6 mb-3">
                    <div class="image">

                    </div>
                    <div class="title">
                        @L["Topic:Title"]
                    </div>
                    <div class="epoch">
                        @L["History:Epoch"]
                    </div>
                    <div class="rating">
                        @L["Rating"]
                    </div>
                    <div class="passed-test">
                        @L["NumberOfTests:TotalPassed"]
                    </div>
                    <div class="time-spent">
                        @L["TimeSpent:Total"]
                    </div>
                    <div class="actions">

                    </div>
                </div>
                <Virtualize @ref="@_virtualize" ItemsProvider="FavoriteDataProvider" ItemSize="110" Context="item">
                    <div class="grid mud-paper pa-3 pa-sm-6 mb-3 mb-sm-6">
                        <div class="image">
                            <MudAvatar Size="Size.Large" Image="@item.Topic.ThumbnailUrl"/>
                        </div>
                        <div class="title">
                            <MudLink Href="@HistoryLinks.Content.Topic(item.Topic.Id)">
                                @item.Topic.Title
                            </MudLink>
                        </div>
                        <div class="epoch">
                            <MudChip Label Class="ma-0" Size="Size.Small" Color="Color.Primary" Link="@HistoryLinks.Content.Epoch(item.Topic.Epoch)">
                                @L[$"Epoch:{item.Topic.Epoch.ToFastString()}"]
                            </MudChip>
                        </div>
                        <div class="rating">
                            <RatingStars Rating="@item.Topic.Rating" ShowTooltip ShowDetails Class="d-inline-flex flex-column align-center"/>
                        </div>
                        <div class="passed-test">
                            <div class="d-flex align-center">
                                <MudIcon Icon="@EducationIcons.Tests" Size="Size.Small" Class="mr-1"/>
                                <MudText Typo="Typo.body2">
                                    @item.Activity.PassedTests.ToReadable()
                                </MudText>
                            </div>
                        </div>
                        <div class="time-spent">
                            <div class="d-flex align-center">
                                <MudIcon Icon="@EducationIcons.TimeSpent" Size="Size.Small" Class="mr-1"/>
                                <MudText Typo="Typo.body2">
                                    @item.Activity.TimeSpent.ToSimpleFormat()
                                </MudText>
                            </div>
                        </div>
                        <div class="actions">
                            @if (item.Activity.PassedTests > 0)
                            {
                                <MudTooltip Text="@L["Button:Details"]">
                                    <MudIconButton
                                        Link="@HistoryLinks.User.MyTopic(item.Topic.Id)"
                                        Icon="@Icons.Outlined.RemoveRedEye"/>
                                </MudTooltip>
                            }
                            <FavoriteToggleButton
                                IsFavorite="@item.Activity.IsFavorite"
                                TopicId="@item.Topic.Id"
                                OnFavoriteClick="@OnFavoriteClick"/>
                        </div>
                    </div>

                </Virtualize>
            }
        </EduContainer>
    }
</EduPage>

@code {
    private bool _isLoading = true;
    private bool _isEmpty = true;
    private Virtualize<UserTopicOverviewModel> _virtualize = default!;
    private readonly List<UserTopicOverviewModel> _items = new();
    private FavoritesRequest _request = new(FavoritesRequest.SortType.DateAddedNewest, null, 20);

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["Account"].Value, AccountLinks.Root),
        new BreadcrumbItem(L["Profile"].Value, HistoryLinks.User.MyProfile)
    };

    [Inject]
    private IHistoryClient HistoryClient { get; set; } = default!;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var data = await HistoryClient.User.GetFavoritesAsync(_request);
        if (data.IsSuccess)
        {
            _request = _request with { Token = data.Data.Next };
            _items.AddRange(data.Data.Items);
        }

        _isEmpty = _items.Count == 0;
        _isLoading = false;
    }

    private async ValueTask<ItemsProviderResult<UserTopicOverviewModel>> FavoriteDataProvider(ItemsProviderRequest request)
    {
        int GetLength() =>
            _items.Count + (string.IsNullOrEmpty(_request.Token) ? 0 : 1);

        var isRangeAvailable = _items.Count > (request.StartIndex + 1) * request.Count ||
                               _items.Count > 0 && string.IsNullOrEmpty(_request.Token);

        if (isRangeAvailable)
            return new ItemsProviderResult<UserTopicOverviewModel>(_items.Skip(request.StartIndex).Take(request.Count), GetLength());

        var data = await HistoryClient.User.GetFavoritesAsync(_request = _request with { Count = request.Count });
        if (data.IsFailed)
            return new ItemsProviderResult<UserTopicOverviewModel>(_items, GetLength());

        _request = _request with { Token = data.Data.Next };
        _items.AddRange(data.Data.Items);

        return new ItemsProviderResult<UserTopicOverviewModel>(_items.Skip(request.StartIndex), GetLength());
    }

    private async Task<bool> OnFavoriteClick(string topicId)
    {
        var result = await HistoryClient.Topic.ToggleFavoriteAsync(topicId);
        return result.IsSuccess && result.Data;
    }

    private Task OnSortChanged(FavoritesRequest.SortType sort)
    {
        _request = _request with { Sort = sort, Token = null };
        _items.Clear();

        return _virtualize.RefreshDataAsync();
    }

}
