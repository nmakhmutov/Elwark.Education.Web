@using Education.Web.Services.History.User.Model
@using Education.Web.Services.History.User
@using Education.Web.Pages.History.Components
@using Education.Web.Pages.History.My.Components
@using Education.Web.Pages.Account

@page "/history/my/inventories"
@layout HistoryLayout
@attribute [Authorize]

<PageTitle>@L["Inventory"]</PageTitle>

<EduPage ShowFooter>
    <EduContainer MaxWidth="EduWidth.W1920" Class="pb-0">
        <EduPageHeader Title="@L["Inventory"]" Breadcrumbs="@Breadcrumbs">
            <MudText Typo="Typo.h5">@_capacity</MudText>
        </EduPageHeader>
    </EduContainer>

    <ApiViewer Result="@_result" Context="data">
        <EduContainer MaxWidth="EduWidth.W1920">
            <div class="grid">
                <div class="wallet">
                    <WalletCard Silver="@data.Silver"/>
                </div>
                <div class="inventory">
                    <InventoryGrid>
                        @foreach (var item in data.Inventory.Items)
                        {
                            <InventoryInfoCard Title="@item.Title" Overview="@item.Overview" IconUrl="@item.IconUrl">
                                <div class="d-flex justify-center">
                                    <ReadableNumber Typo="Typo.h6" Value="@item.Count"/>
                                </div>
                            </InventoryInfoCard>
                        }
                    </InventoryGrid>
                </div>
            </div>
        </EduContainer>
    </ApiViewer>
</EduPage>

@code {
    private ApiResult<InventoryCompositionModel> _result = ApiResult<InventoryCompositionModel>.Loading();
    private string? _capacity;

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["Account"].Value, AccountUrl.Root),
        new BreadcrumbItem(L["History"].Value, HistoryUrl.Root)
    };

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryUserService UserService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        _result = await UserService.GetInventoryAsync();
        if (_result.IsSuccess)
            _capacity = $"{_result.Data.Inventory.Fullness} / {_result.Data.Inventory.Capacity}";
    }

}