@page "/history/my/inventories"
@using Education.Web.Gateways.History.Users.Model
@using Education.Web.Pages.History.Components
@using Education.Web.Gateways.History
@using Education.Web.Pages.Account
@layout HistoryLayout
@attribute [Authorize]

<PageTitle>@L["Inventory"]</PageTitle>

<EduPage ShowFooter="@_response.IsLoaded">
    <EduContainer Class="pb-0">
        <PageHeader Title="@L["Inventory"]" Breadcrumbs="@Breadcrumbs">
            <MudText Typo="Typo.h5">
                @_capacity
            </MudText>
        </PageHeader>
    </EduContainer>
    <ApiViewer Response="@_response" Context="data">
        <EduContainer>
            <InventoryGrid>
                @foreach (var item in data.Inventory.Items)
                {
                    <InventoryInfoCard Title="@item.Title" Overview="@item.Overview" IconUrl="@item.IconUrl">
                        <div class="d-flex justify-center">
                            <HumanReadableText Typo="Typo.h6" Value="@item.Count"/>
                        </div>
                    </InventoryInfoCard>
                }
            </InventoryGrid>
        </EduContainer>
    </ApiViewer>
</EduPage>

@code {
    private string? _capacity;

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["Account"].Value, AccountLinks.Root),
        new BreadcrumbItem(L["Profile"].Value, HistoryLinks.User.MyProfile)
    };

    private ApiResponse<InventoryCompositionModel> _response = ApiResponse<InventoryCompositionModel>.Loading();

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryClient Client { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        _response = await Client.User.GetInventoryAsync();
        if (_response.IsSuccess)
            _capacity = $"{_response.Data.Inventory.Fullness} / {_response.Data.Inventory.Capacity}";
    }

}
