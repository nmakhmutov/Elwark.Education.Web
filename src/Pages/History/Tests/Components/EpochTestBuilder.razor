@using Education.Web.Gateways.History
@using Education.Web.Gateways.History.Tests.Requests
@using Education.Web.Pages.History.Components

<section class="@Class">
    <MudText Typo="Typo.h5" Class="mb-3">
        @L["History:Epoch"]
    </MudText>
    <EpochRadioGroup @bind-SelectedEpoch="@_epoch" Class="mb-3 mb-sm-6"/>

    <MudText Typo="Typo.h5" Class="mb-3">
        @L["Tests"]
    </MudText>
    <TestRadioGroup @bind-SelectedTest="_test" Tests="@Tests" Class="mb-6"/>

    <div class="d-flex justify-center">
        <LoadingButton
            DisableElevation
            Size="Size.Large"
            Color="Color.Primary"
            Variant="Variant.Filled"
            Text="@L["Test:Pass"]"
            LoadingText="@L["Loading"]"
            IsLoading="@_isLoading"
            Disabled="@(Tests.All(x => !x.IsAllowed))"
            OnClick="@CreateTestAsync"/>
    </div>
</section>

@code {
    private EpochType _epoch = EpochType.None;
    private string _test = string.Empty;
    private bool _isLoading;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Parameter]
    public string? Class { get; set; }

    [Parameter, EditorRequired]
    public TestInformation[] Tests { get; set; } = Array.Empty<TestInformation>();

    [Parameter, EditorRequired]
    public EventCallback<CreateEpochTestRequest> OnCreate { get; set; }

    protected override void OnInitialized() =>
        _test = Tests.FirstOrDefault(x => x.IsAllowed)?.Name ?? string.Empty;

    private async Task CreateTestAsync()
    {
        _isLoading = true;
        await OnCreate.InvokeAsync(new CreateEpochTestRequest(_test, _epoch));
        _isLoading = false;
    }

}
