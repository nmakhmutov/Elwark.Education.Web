@using Education.Web.Gateways.History
@using Education.Web.Pages.History.Components
<section class="@Class">
    <MudText Typo="Typo.h5" Class="mb-3">
        @L["Topic"]
    </MudText>
    <TopicCard
        Id="@Topic.Id"
        Epoch="@Topic.Epoch"
        Title="@Topic.Title"
        Image="@Topic.ThumbnailUrl"
        Overview="@Topic.Overview"
        Rating="@Topic.Rating"
        Horizontal
        Class="mb-3 mb-sm-6"/>

    <MudText Typo="Typo.h5" Class="mb-3">
        @L["Tests"]
    </MudText>
    @if (Tests.Any(x => x.IsAllowed))
    {
        <TestRadioGroup @bind-SelectedTest="@_test" Tests="@Tests" Class="mb-6"/>

        <div class="d-flex justify-center">
            <LoadingButton
                DisableElevation
                Size="Size.Large"
                Color="Color.Primary"
                Variant="Variant.Filled"
                Text="@L["Test:Pass"]"
                LoadingText="@L["Loading"]"
                IsLoading="@_isLoading"
                OnClick="@CreateTestAsync"/>
        </div>
    }
    else
    {
        <MudText Typo="Typo.subtitle1">
            @L["Test:NotAvailableForTopic", Topic.Title]
        </MudText>
    }
</section>

@code {
    private string? _test;
    private bool _isLoading;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Parameter]
    public string? Class { get; set; }

    [Parameter, EditorRequired]
    public TopicOverviewModel Topic { get; set; } = default!;

    [Parameter, EditorRequired]
    public TestInformation[] Tests { get; set; } = Array.Empty<TestInformation>();

    [Parameter, EditorRequired]
    public EventCallback<(string Test, string Id)> OnCreate { get; set; }

    protected override void OnInitialized() => 
        _test = Tests.FirstOrDefault(x => x.IsAllowed)?.Name;

    private async Task CreateTestAsync()
    {
        _isLoading = true;
        await OnCreate.InvokeAsync((_test!, Topic.Id));
        _isLoading = false;
    }

}
