@using Education.Web.Pages.History.Components
@using Education.Web.Services.History
@using Education.Web.Services.History.Test.Request

<section class="@Class">
    <MudText Typo="Typo.h5" Class="mb-3">
        @L["Topic"]
    </MudText>
    <TopicCard
        Id="@Topic.Id"
        Epoch="@Topic.Epoch"
        Title="@Topic.Title"
        Image="@Topic.ThumbnailUrl"
        Overview="@Topic.Overview"
        Rating="@Topic.Rating"
        Horizontal
        Class="mb-3 mb-sm-6"/>

    <MudText Typo="Typo.h5" Class="mb-3">
        @L["Tests"]
    </MudText>
    @if (Tests.Any(x => x.IsAllowed))
    {
        <TestRadioGroup
            SelectedTest="@HistorySettings.TestType"
            SelectedTestChanged="@HistorySettings.ChangeTestTypeAsync"
            Tests="@Tests" Class="mb-6"/>

        <div class="d-flex justify-center">
            <LoadingButton
                DisableElevation
                Color="Color.Primary"
                Variant="Variant.Filled"
                Size="Size.Large"
                Text="@L["Test:Pass"]"
                LoadingText="@L["Loading"]"
                IsLoading="@_isLoading"
                OnClick="@CreateTestAsync"/>
        </div>
    }
    else
    {
        <MudText Typo="Typo.subtitle1">
            @L["Test:NotAvailableForTopic", Topic.Title]
        </MudText>
    }
</section>

@code {
    private bool _isLoading;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [CascadingParameter]
    private HistorySettingsProvider HistorySettings { get; set; } = default!;

    [Parameter]
    public string? Class { get; set; }

    [Parameter, EditorRequired]
    public TopicOverviewModel Topic { get; set; } = default!;

    [Parameter, EditorRequired]
    public TestInformationModel[] Tests { get; set; } = Array.Empty<TestInformationModel>();

    [Parameter, EditorRequired]
    public EventCallback<CreateTopicTestRequest> OnCreate { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Tests.Any(x => x.IsAllowed && x.Name == HistorySettings.TestType))
            return;

        await HistorySettings.ChangeTestTypeAsync(Tests.FirstOrDefault(x => x.IsAllowed)?.Name);
    }

    private async Task CreateTestAsync()
    {
        if(string.IsNullOrEmpty(HistorySettings.TestType))
            return;
        
        _isLoading = true;
        await OnCreate.InvokeAsync(new CreateTopicTestRequest(HistorySettings.TestType, Topic.Id));
        _isLoading = false;
    }
}