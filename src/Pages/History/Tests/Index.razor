@page "/history/tests"
@using Education.Web.Gateways.History.Tests.Model
@using Education.Web.Gateways.History
@using Education.Web.Gateways.History.Tests.Requests
@using Education.Web.Pages.History.Tests.Components
@using Education.Web.Pages.History.Components
@layout HistoryLayout
@attribute [Authorize]

<PageTitle>@L["Tests"]</PageTitle>

<EduPage ShowFooter="false">
    <div class="background d-flex flex-column h-100">
        <EduContainer Class="pb-0">
            <PageHeader Title="@L["Tests"]" Breadcrumbs="@Breadcrumbs">
                <div>
                    <MudButton
                        Variant="Variant.Text"
                        Color="Color.Primary"
                        EndIcon="@Icons.Material.Outlined.Info"
                        Disabled="@(!_response.IsSuccess)"
                        OnClick="@OpenRule">
                        @L["Tests:Rules"]
                    </MudButton>
                </div>
            </PageHeader>
        </EduContainer>
        <ApiViewer Response="@_response" Context="context">
            <section class="grid pa-3 pa-sm-6">
                @if (context.Topic is null)
                {
                    <EpochTestBuilder Class="builder" Tests="@context.Tests" OnCreate="@OnCreateTestAsync"/>
                }
                else
                {
                    <TopicTestBuilder Class="builder" Tests="@context.Tests" Topic="@context.Topic" OnCreate="@OnCreateTestAsync"/>
                }

                <section class="inventory">
                    <MudText Typo="Typo.h5" Class="mb-3">
                        @L["Inventory"]
                    </MudText>
                    @if (context.Inventories.Length > 0)
                    {
                        <InventoryGrid>
                            @foreach (var item in context.Inventories)
                            {
                                <InventoryInfoCard Title="@item.Title" Overview="@item.Overview" IconUrl="@item.IconUrl">
                                    <div class="d-flex justify-center">
                                        <HumanReadableNumber Typo="Typo.h6" Value="@item.Count"/>
                                    </div>
                                </InventoryInfoCard>
                            }
                        </InventoryGrid>
                    }
                    else
                    {
                        <EmptyResult Title="@L["Inventory:EmptyTitle"]"/>
                    }
                </section>
            </section>
        </ApiViewer>
    </div>
</EduPage>

@code {
    private ApiResponse<TestBuilderModel> _response = ApiResponse<TestBuilderModel>.Loading();

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["Subject:History"].Value, HistoryLinks.Root)
    };

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryClient Client { get; set; } = default!;

    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    [Inject]
    private IDialogService DialogService { get; set; } = default!;

    [Parameter, SupplyParameterFromQuery(Name = "topic")]
    public string? TopicId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        _response = await Client.Test.GetTestBuilderAsync(TopicId);

        if (_response.IsFailed && _response.Error.IsTestAlreadyCreated(out var id))
            Navigation.NavigateTo(HistoryLinks.TopicTest.Test(id));
    }

    private Task OnCreateTestAsync(CreateEpochTestRequest request) =>
        CreateTestAsync(() => Client.Test.CreateAsync(request));

    private Task OnCreateTestAsync(CreateTopicTestRequest request) =>
        CreateTestAsync(() => Client.Test.CreateAsync(request));

    private async Task CreateTestAsync(Func<Task<ApiResponse<TestModel>>> call)
    {
        var response = await call();

        if (response.IsSuccess)
            Navigation.NavigateTo(HistoryLinks.TopicTest.Test(response.Data.Id));
        else
            Snackbar.Add(response.Error.Detail, Severity.Error);
    }

    private void OpenRule()
    {
        var parameters = new DialogParameters { [nameof(RuleDialog.Content)] = _response.Data.Rule.Content };
        var options = new DialogOptions { FullWidth = true, MaxWidth = MaxWidth.Large, CloseOnEscapeKey = true, CloseButton = true };

        DialogService.Show<RuleDialog>(_response.Data.Rule.Title, parameters, options);
    }

}
