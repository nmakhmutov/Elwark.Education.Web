@using Education.Web.Pages.History.Tests.Components
@using Education.Web.Pages.History.Components
@using Education.Web.Services.History.Test
@using Education.Web.Services.History.Test.Model
@using Education.Web.Services.History.Test.Request

@page "/history/tests"
@layout HistoryLayout
@attribute [Authorize]

<PageTitle>@L["Tests"]</PageTitle>

<EduPage HideFooter>
    <div class="background d-flex flex-column h-100">
        <EduContainer Class="pb-0">
            <EduPageHeader Title="@L["Tests"]" Breadcrumbs="@Breadcrumbs">
                <MudButton
                    DisableElevation
                    Variant="Variant.Text"
                    Color="Color.Primary"
                    EndIcon="@Icons.Outlined.Info"
                    Disabled="@(!_result.IsSuccess)"
                    OnClick="@OpenRule">
                    @L["Tests:Rules"]
                </MudButton>
            </EduPageHeader>
        </EduContainer>
        <ApiViewer Result="@_result" Context="model">
            <section class="grid pa-3 pa-sm-6">
                @if (model.Topic is null)
                {
                    <EpochTestBuilder Class="builder" Tests="@model.Tests" OnCreate="@OnCreateTestAsync"/>
                }
                else
                {
                    <TopicTestBuilder Class="builder" Tests="@model.Tests" Topic="@model.Topic" OnCreate="@OnCreateTestAsync"/>
                }

                <section class="inventory">
                    <MudText Typo="Typo.h5" Class="mb-3">
                        @L["Inventory"]
                    </MudText>
                    @if (model.Inventories.Length > 0)
                    {
                        <InventoryGrid Inventory="@model.Inventories" Context="item">
                            <InventoryInfoCard
                                Title="@item.Title"
                                Overview="@item.Overview"
                                Count="@item.Count"
                                IconUrl="@item.IconUrl"/>
                        </InventoryGrid>
                    }
                    else
                    {
                        <EduEmpty Title="@L["Inventory:EmptyTitle"]"/>
                    }
                </section>
            </section>
        </ApiViewer>
    </div>
</EduPage>

@code {
    private ApiResult<TestBuilderModel> _result = ApiResult<TestBuilderModel>.Loading();

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["Subject:History"].Value, HistoryUrl.Root)
    };

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryTestService TestService { get; set; } = default!;

    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    [Inject]
    private IDialogService DialogService { get; set; } = default!;

    [Parameter, SupplyParameterFromQuery(Name = "topic")]
    public string? TopicId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        _result = await TestService.GetTestBuilderAsync(TopicId);

        if (_result.IsFailed && _result.Error.IsTestAlreadyCreated(out var id))
            Navigation.NavigateTo(HistoryUrl.TopicTest.Test(id));
    }

    private Task OnCreateTestAsync(CreateEpochTestRequest request) =>
        CreateTestAsync(() => TestService.CreateAsync(request));

    private Task OnCreateTestAsync(CreateTopicTestRequest request) =>
        CreateTestAsync(() => TestService.CreateAsync(request));

    private async Task CreateTestAsync(Func<Task<ApiResult<TestModel>>> call)
    {
        var response = await call();

        if (response.IsSuccess)
            Navigation.NavigateTo(HistoryUrl.TopicTest.Test(response.Data.Id));
        else
            Snackbar.Add(response.Error.Detail, Severity.Error);
    }

    private void OpenRule()
    {
        var parameters = new DialogParameters { [nameof(RuleDialog.Content)] = _result.Data.Rule.Content };
        var options = new DialogOptions { FullWidth = true, MaxWidth = MaxWidth.Large, CloseOnEscapeKey = true, CloseButton = true };

        DialogService.Show<RuleDialog>(_result.Data.Rule.Title, parameters, options);
    }

}