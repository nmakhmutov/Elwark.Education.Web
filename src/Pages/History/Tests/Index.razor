@page "/history/tests"
@layout HistoryLayout
@attribute [Authorize]

@using Education.Web.Gateways.History
@using Education.Web.Gateways.History.Tests.Model
@using Education.Web.Pages.History.Tests.Components
@using Education.Web.Pages.History.Components

<PageTitle>@L["Tests"]</PageTitle>

<EduPage ShowFooter="false">
    <div class="background d-flex flex-column h-100">
        <EduContainer Class="pb-0">
            <PageHeader Title="@L["Tests"]" Breadcrumbs="@Breadcrumbs"/>
        </EduContainer>
        <ApiViewer Response="@_response" Context="context">
            <section class="grid pa-3 pa-sm-6">
                @if (context.Topic is null)
                {
                    <EpochTestBuilder
                        Class="builder"
                        AllowedEasyTest="@_allowedEasyTest"
                        AllowedHardTest="@_allowedHardTest"
                        AllowedMixedTest="@_allowedMixedTest"
                        OnEasyTestCreate="@CreateEasyTest"
                        OnHardTestCreate="@CreateHardTest"
                        OnMixedTestCreate="@CreateMixedTest"/>
                }
                else
                {
                    <TopicTestBuilder
                        Class="builder"
                        Topic="@context.Topic"
                        AvailableEasyTest="@context.Topic.HasEasyTest"
                        AllowedEasyTest="@_allowedEasyTest"
                        AvailableHardTest="@context.Topic.HasHardTest"
                        AllowedHardTest="@_allowedHardTest"
                        OnEasyTestCreate="@CreateEasyTest"
                        OnHardTestCreate="@CreateHardTest"/>
                }

                <section class="inventory">
                    <MudText Typo="Typo.h5" Class="mb-3">
                        @L["Inventory"]
                    </MudText>
                    <InventoryGrid>
                        @foreach (var item in context.Inventory)
                        {
                            <InventoryInfoCard Id="@item.Id" Title="@item.Title" Overview="@item.Overview">
                                <div class="d-flex justify-center">
                                    <HumanReadableText Typo="Typo.h6" Value="@item.Count"/>
                                </div>
                            </InventoryInfoCard>
                        }
                    </InventoryGrid>
                </section>

                <footer class="rule">
                    <MudText Typo="Typo.h6" Class="mb-3">
                        @context.Rule.Title
                    </MudText>
                    <SimpleMarkdown Text="@context.Rule.Content"/>
                </footer>
            </section>
        </ApiViewer>
    </div>
</EduPage>

@code {
    private bool _allowedEasyTest;
    private bool _allowedHardTest;
    private bool _allowedMixedTest;

    private ApiResponse<TestBuilderModel> _response = ApiResponse<TestBuilderModel>.Loading();

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["Subject:History"].Value, HistoryLinks.Root)
    };

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryClient Client { get; set; } = default!;

    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    [Parameter, SupplyParameterFromQuery(Name = "topic")]
    public string? TopicId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        _response = await Client.Test.GetTestBuilderAsync(TopicId);

        if (_response.IsSuccess)
            foreach (var item in _response.Data.Inventory)
                switch (item.Id, item.Count)
                {
                    case (101, > 0):
                        _allowedEasyTest = true;
                        break;
                    case (102, > 0):
                        _allowedHardTest = true;
                        break;
                    case (103, > 0):
                        _allowedMixedTest = true;
                        break;
                }
        else if (_response.Error.IsTestAlreadyCreated(out var id))
            Navigation.NavigateTo(HistoryLinks.TopicTest.Test(id));
    }

    private async Task CreateEasyTest(string topicId)
    {
        var result = await Client.Test.CreateEasyTestAsync(topicId);
        HandleCreateResponse(result);
    }

    private async Task CreateEasyTest(EpochType epoch)
    {
        var result = await Client.Test.CreateEasyTestAsync(epoch);
        HandleCreateResponse(result);
    }

    private async Task CreateHardTest(string topicId)
    {
        var result = await Client.Test.CreateHardTestAsync(topicId);
        HandleCreateResponse(result);
    }

    private async Task CreateHardTest(EpochType epoch)
    {
        var result = await Client.Test.CreateHardTestAsync(epoch);
        HandleCreateResponse(result);
    }

    private async Task CreateMixedTest(EpochType epoch)
    {
        var result = await Client.Test.CreateMixedTestAsync(epoch);
        HandleCreateResponse(result);
    }

    private void HandleCreateResponse(ApiResponse<TestCreatedModel> response)
    {
        if (response.IsSuccess)
            Navigation.NavigateTo(HistoryLinks.TopicTest.Test(response.Data.Id));
        else
            Snackbar.Add(response.Error.Detail, Severity.Error);
    }

}
