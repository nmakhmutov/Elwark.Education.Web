@page "/history/tests/{id}"
@using Education.Web.Gateways.History.Tests.Model
@using Education.Web.Gateways.Models.Inventory
@using Education.Web.Pages.History.Components
@using Education.Web.Pages.History.Tests.Test.Components
@using Education.Web.Gateways.History
@layout HistoryLayout
@attribute [Authorize]

<EduPage ShowFooter="@_response.IsLoaded">
    <ApiViewer Response="@_response">
        <PageTitle>
            @_title
        </PageTitle>

        <EduContainer MaxWidth="EduWidth.W1280">
            <section class="grid">
                <header class="header">
                    <MudPaper Elevation="0" Class="pa-3 px-sm-6 d-sm-flex justify-sm-space-between align-sm-center">
                        <MudText Typo="Typo.h5">
                            @_title
                        </MudText>
                        <div class="progress">
                            <div class="mb-1">
                                <MudText Typo="Typo.subtitle1">
                                    @L["Questions"] @_test.CompletedQuestions / @_test.TotalQuestions
                                </MudText>
                                <MudProgressLinear Min="0" Max="100" Value="@(Progress)" Color="Color.Primary"/>
                            </div>
                            <CountdownTimer
                                Typo="Typo.body1"
                                Date="@_test.ExpiredAt"
                                Color="@_countdownColor"
                                OnComplete="@OnExpired"/>
                        </div>
                    </MudPaper>
                </header>

                <section class="test">
                    <MudText Typo="Typo.h5" Class="mb-3">
                        @_currentQuestion.Topic.Title
                    </MudText>
                    <MudPaper Elevation="0" Class="d-flex flex-column align-center pa-3 pa-sm-6">
                        @if (_currentQuestion.Image is not null)
                        {
                            <img src="@_currentQuestion.Image" alt="@_currentQuestion.Title" class="image mb-6"/>
                        }

                        <MudText Typo="Typo.h6" Class="mb-6">
                            @_currentQuestion.Title
                        </MudText>

                        @switch (_currentQuestion)
                        {
                            case MultipleAnswerQuestionModel question:
                            {
                                var answer = _userAnswer as MultipleAnswerModel ?? new MultipleAnswerModel();

                                <MultipleAnswerForm
                                    IsLoading="@_isAnswering"
                                    IsTestCompleted="@IsCompleted"
                                    CorrectAnswer="@(_correctAnswer as MultipleAnswersResultModel)"
                                    UserAnswer="@answer"
                                    Options="@question.Options"
                                    OnAnswer="@OnMultiplyAnswer"
                                    OnNext="@OnNext"
                                    OnComplete="@OnComplete"/>
                                break;
                            }

                            case ShortAnswerQuestionModel:
                            {
                                var answer = _userAnswer as ShortAnswerModel ?? new ShortAnswerModel();
                                <ShortAnswerForm
                                    IsLoading="@_isAnswering"
                                    IsTestCompleted="@IsCompleted"
                                    CorrectAnswer="@(_correctAnswer as ShortAnswerResultModel)"
                                    UserAnswer="@answer"
                                    OnAnswer="@OnShortAnswer"
                                    OnNext="@OnNext"
                                    OnComplete="@OnComplete"/>
                                break;
                            }

                            case SingleAnswerQuestionModel question:
                            {
                                var answer = _userAnswer as SingleAnswerModel ?? new SingleAnswerModel();

                                <SingleAnswerForm
                                    IsLoading="@_isAnswering"
                                    IsTestCompleted="@IsCompleted"
                                    CorrectAnswer="@(_correctAnswer as SingleAnswerResultModel)"
                                    UserAnswer="@answer"
                                    Options="@question.Options"
                                    OnAnswer="@OnSingleAnswer"
                                    OnNext="@OnNext"
                                    OnComplete="@OnComplete"/>
                                break;
                            }

                            default:
                                throw new ArgumentOutOfRangeException(nameof(_currentQuestion));
                        }
                    </MudPaper>
                </section>

                <aside class="inventory">
                    <MudText Typo="Typo.h5" Class="mb-3">
                        @L["Inventory"]
                    </MudText>
                    <InventoryGrid>
                        @foreach (var item in _inventory.OrderByDescending(x => x.IsApplicable))
                        {
                            if (item.IsApplicable)
                            {
                                <InventoryButtonCard
                                    Id="@item.Id"
                                    Count="@item.Count"
                                    Title="@item.Title"
                                    Overview="@item.Overview"
                                    IconUrl="@item.IconUrl"
                                    ButtonText="@L["Inventory:Use"]"
                                    OnClick="@OnUseInventory"/>
                            }
                            else
                            {
                                <InventoryInfoCard Title="@item.Title" Overview="@item.Overview" IconUrl="@item.IconUrl">
                                    <div class="d-flex justify-center">
                                        <HumanReadableNumber Typo="Typo.h6" Value="@item.Count"/>
                                    </div>
                                </InventoryInfoCard>
                            }
                        }
                    </InventoryGrid>
                </aside>
            </section>
        </EduContainer>
    </ApiViewer>
</EduPage>

@code {
    private ApiResponse<TestModel> _response = ApiResponse<TestModel>.Loading();
    private TestInventoryItemModel[] _inventory = Array.Empty<TestInventoryItemModel>();
    private Color _countdownColor = Color.Default;
    private TestOverviewModel _test = default!;
    private TestQuestionModel _currentQuestion = default!;
    private TestQuestionModel? _nextQuestion;
    private AnswerToQuestionModel? _userAnswer;
    private AnswerResultModel? _correctAnswer;
    private bool _isAnswering;
    private string _title = string.Empty;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryClient HistoryClient { get; set; } = default!;

    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    [Parameter]
    public string Id { get; set; } = string.Empty;

    private double Progress =>
        (double)_test.CompletedQuestions / _test.TotalQuestions * 100;

    private bool IsCompleted =>
        _test.CompletedQuestions == _test.TotalQuestions;

    protected override async Task OnParametersSetAsync()
    {
        _response = await HistoryClient.Test.GetAsync(Id);
        if (_response.IsSuccess)
        {
            _test = _response.Data.Overview;
            _currentQuestion = _response.Data.Question;
            _inventory = _response.Data.Inventory;
            _title = _test switch {
                EasyTestOverviewModel => L["Test:Easy"],
                HardTestOverviewModel => L["Test:Hard"],
                MixedTestOverviewModel => L["Test:Mixed"],
                _ => string.Empty
                };
        }
        else if (_response.Error.IsTestAlreadyCompleted())
            Navigation.NavigateTo(HistoryLinks.TopicTest.Conclusion(Id));
        else if (_response.Error.IsTestNotFound())
            Navigation.NavigateTo(HistoryLinks.TopicTest.Conclusion(Id));
    }

    private async Task OnExpired()
    {
        _countdownColor = Color.Error;
        _response = await HistoryClient.Test.GetAsync(Id);

        if (_response.IsFailed)
            Navigation.NavigateTo(HistoryLinks.TopicTest.Conclusion(Id));
    }

    private async Task OnShortAnswer(ShortAnswerModel answer)
    {
        _isAnswering = true;
        _userAnswer = answer;

        var result = await HistoryClient.Test.CheckAsync(_test.Id, _currentQuestion.Id, answer);
        if (result.IsSuccess)
            UpdateState(result.Data);
        else
            Snackbar.Add(result.Error.Detail, Severity.Error);

        _isAnswering = false;
    }

    private async Task OnSingleAnswer(SingleAnswerModel answer)
    {
        _isAnswering = true;
        _userAnswer = answer;

        var result = await HistoryClient.Test.CheckAsync(_test.Id, _currentQuestion.Id, answer);
        if (result.IsSuccess)
            UpdateState(result.Data);
        else
            Snackbar.Add(result.Error.Detail, Severity.Error);

        _isAnswering = false;
    }

    private async Task OnMultiplyAnswer(MultipleAnswerModel answer)
    {
        _isAnswering = true;
        _userAnswer = answer;

        var result = await HistoryClient.Test.CheckAsync(_test.Id, _currentQuestion.Id, answer);
        if (result.IsSuccess)
            UpdateState(result.Data);
        else
            Snackbar.Add(result.Error.Detail, Severity.Error);

        _isAnswering = false;
    }

    private void UpdateState(TestAnswerModel result)
    {
        _test = result.Overview;
        _inventory = result.Inventory;
        _nextQuestion = result.NextQuestion;
        _correctAnswer = result.Answer;

        StateHasChanged();
    }

    private void OnNext()
    {
        if (_nextQuestion is null)
            return;

        _currentQuestion = _nextQuestion;
        _nextQuestion = null;
        _userAnswer = null;
        _correctAnswer = null;

        StateHasChanged();
    }

    private void OnComplete() =>
        Navigation.NavigateTo(HistoryLinks.TopicTest.Conclusion(Id));

    private async Task OnUseInventory(uint id)
    {
        var test = await HistoryClient.Test.ApplyInventoryAsync(_test.Id, id);
        if (test.IsSuccess)
        {
            if (test.Data.Question is null)
            {
                Navigation.NavigateTo(HistoryLinks.TopicTest.Conclusion(Id));
                return;
            }

            _test = test.Data.Overview;
            _currentQuestion = test.Data.Question;
            _inventory = test.Data.Inventory;
        }
        else
        {
            Snackbar.Add(test.Error.Detail, Severity.Error);
        }
    }

}
