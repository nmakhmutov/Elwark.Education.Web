@page "/history/tests/{id}/conclusion"
@using Education.Web.Gateways.History.Tests.Model
@using Education.Web.Pages.History.Tests.Conclusion.Components
@using Education.Web.Gateways.History
@layout HistoryLayout
@attribute [Authorize]

<EduPage ShowFooter="@_result.IsLoaded">
    <ApiViewer Result="@_result" Context="conclusion">
        <MudAlert Class="mb-6 mb-sm-12" Severity="@GetColor(conclusion.Status)" Square ContentAlignment="HorizontalAlignment.Center">
            @L[$"ConclusionStatus:{conclusion.Status}"]
        </MudAlert>

        <CompletedStars Progress="@_progress" Class="mb-6"/>

        <RewardsContainer MaxWidth="EduWidth.W1280" Rewards="@conclusion.Rewards"/>

        @switch (conclusion)
        {
            case EasyTestConclusionModel test:
                <PageTitle>@L["Test:Easy"]: @test.Topic.Title</PageTitle>
                <EasyTestView Conclusion="@test"/>
                break;

            case HardTestConclusionModel test:
                <PageTitle>@L["Test:Hard"]: @test.Topic.Title</PageTitle>
                <HardTestView Conclusion="@test"/>
                break;

            case MixedTestConclusionModel test:
                <PageTitle>@L["Test:Mixed"]</PageTitle>
                <MixedTestView Conclusion="@test"/>
                break;

            default:
                throw new ArgumentOutOfRangeException(nameof(conclusion));
        }
    </ApiViewer>
</EduPage>

@code {
    private ApiResult<TestConclusionModel> _result = ApiResult<TestConclusionModel>.Loading();
    private double _progress;

    [Inject]
    private IHistoryClient HistoryClient { get; set; } = default!;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    [Parameter]
    public string Id { get; set; } = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        _result = await HistoryClient.Test.GetConclusionAsync(Id);
        if (_result.IsSuccess)
            _progress = Math.Round((double)_result.Data.UserScore.Total / _result.Data.MaxScore.Total * 100);

        if (_result.IsFailed && _result.Error.IsTestNotFound())
            Navigation.NavigateTo(HistoryLinks.TopicTest.Index());
    }

    private static Severity GetColor(ConclusionStatus status) =>
        status switch {
            ConclusionStatus.Succeeded => Severity.Success,
            ConclusionStatus.Failed => Severity.Error,
            ConclusionStatus.TimeExceeded => Severity.Warning,
            ConclusionStatus.MistakesExceeded => Severity.Warning,
            _ => Severity.Info
            };

}