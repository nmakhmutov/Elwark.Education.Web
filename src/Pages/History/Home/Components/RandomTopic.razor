@using Education.Web.Gateways.History

<div class="background pa-6 pa-sm-16">
    <EduContainer MaxWidth="EduWidth.W960">
        <MudCard Elevation="0" Square="true">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h4" Align="Align.Center" Class="py-3 py-sm-6">
                        @L["Topic:Random"]
                    </MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <div class="d-flex flex-row flex-wrap justify-center align-end mw-xs mx-auto pb-6 pb-sm-12">
                    <MudSelect @bind-Value="@_epoch" Margin="Margin.Dense" Variant="Variant.Text">
                        <MudSelectItem Value="@EpochType.None">@L["Topics:Any"]</MudSelectItem>
                        @foreach (var period in Enum.GetValues<EpochType>().Where(x => x != EpochType.None))
                        {
                            <MudSelectItem Value="@period">
                                @L[$"History:{period}"]
                            </MudSelectItem>
                        }
                    </MudSelect>
                    <div class="ml-3">
                        <LoadingButton
                            Variant="Variant.Filled"
                            Color="Color.Primary"
                            OnClick="@OnClick"
                            IsLoading="@_isLoading" 
                            Text="@L["Search"]"
                            LoadingText="@L["Loading"]"/>
                    </div>
                </div>
            </MudCardContent>
        </MudCard>
    </EduContainer>
</div>

@code {

    private EpochType _epoch = EpochType.None;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryClient Client { get; set; } = default!;

    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    [Parameter]
    public string? Class { get; set; }

    private bool _isLoading;

    private async Task OnClick()
    {
        if (_isLoading)
            return;

        _isLoading = true;
        var result = await Client.Topic.GetRandomAsync(_epoch);
        if (result.Status == ResponseStatus.Success)
            Navigation.NavigateTo(HistoryLinks.Content.Topic(result.Data.Id));

        _isLoading = false;
    }

}
