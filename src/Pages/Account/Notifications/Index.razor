@using Education.Web.Pages.History
@using Education.Web.Pages.Account.Components
@using System.Diagnostics.CodeAnalysis
@using Education.Web.Services.Notification
@using Education.Web.Services.Notification.Model
@using Education.Web.Services.Notification.Request

@page "/account/my/notifications"
@layout MainLayout
@attribute [Authorize]

<PageTitle>@L["Notifications"]</PageTitle>
<EduPage ShowFooter="@_result.IsLoaded">

    <EduContainer MaxWidth="EduWidth.W1920" Class="pb-0">
        <EduPageHeader Title="@L["Notifications"]" Breadcrumbs="@Breadcrumbs"/>
    </EduContainer>

    <EduContainer MaxWidth="EduWidth.W1920">
        <section class="grid">
            <section class="account">
                <AccountCard/>
            </section>
            <section class="notifications">
                <ApiViewer Result="_result">
                    <Virtualize Items="@_notifications" Context="item">
                        <MudPaper Elevation="0" Class="pa-3 mb-3">
                            <section class="d-flex align-center">
                                <MudText Typo="Typo.body2" Class="mr-3">
                                    @item.CreatedAt.ToCustomerFormat(Customer.DateTimeInfo)
                                </MudText>
                                @if (TryGetLink(item.Subject, out var link))
                                {
                                    <MudLink Typo="Typo.body2" Href="@link">
                                        @L[item.Subject]
                                    </MudLink>
                                }
                            </section>
                            <section class="d-flex align-center justify-space-between">
                                @if (string.IsNullOrEmpty(item.Message))
                                {
                                    <MudText Typo="Typo.subtitle1">
                                        @item.Title
                                    </MudText>
                                }
                                else
                                {
                                    <div>
                                        <MudText Typo="Typo.subtitle1">
                                            @item.Title
                                        </MudText>
                                        <MudText Typo="Typo.body2">
                                            @item.Message
                                        </MudText>
                                    </div>
                                }
                                <MudIconButton
                                    Icon="@Icons.Outlined.MarkEmailRead"
                                    OnClick="@(() => MarkAsReadAsync(item.Id))"/>
                            </section>
                        </MudPaper>
                    </Virtualize>
                    @if (_request.Token is not null)
                    {
                        <div class="d-flex justify-center">
                            <LoadingButton
                                DisableElevation
                                Variant="Variant.Filled"
                                Color="Color.Primary"
                                Text="@L["Button:ShowMore"]"
                                IsLoading="@_isMoreLoading"
                                OnClick="@LoadMore"/>
                        </div>
                    }
                </ApiViewer>
            </section>
        </section>
    </EduContainer>
</EduPage>

@code {
    private NotificationsRequest _request = new(null, 10);
    private ApiResult<PagingTokenModel<NotificationModel>> _result = ApiResult<PagingTokenModel<NotificationModel>>.Loading();
    private readonly List<NotificationModel> _notifications = new();
    private bool _isMoreLoading;

    private List<BreadcrumbItem> Breadcrumbs => new()
    {
        new BreadcrumbItem(L["Account"].Value, AccountUrl.Root)
    };

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private INotificationService NotificationService { get; set; } = default!;

    [CascadingParameter]
    private CustomerState Customer { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        _result = await NotificationService.GetAsync(_request);
        if (_result.IsSuccess)
        {
            _notifications.AddRange(_result.Data.Items);
            _request = _request with { Token = _result.Data.Next };
        }
    }

    private async Task LoadMore()
    {
        if (_request.Token is null)
            return;

        _isMoreLoading = true;
        var response = await NotificationService.GetAsync(_request);
        if (response.IsFailed)
            _result = response;

        _notifications.AddRange(response.Data.Items);
        _request = _request with { Token = response.Data.Next };
        _isMoreLoading = false;
    }

    private Task MarkAsReadAsync(string id)
    {
        _notifications.RemoveAll(x => x.Id == id);
        return NotificationService.MarkAsReadAsync(id);
    }

    private static bool TryGetLink(string subject, [MaybeNullWhen(false)] out string link)
    {
        link = subject switch {
            "History" => HistoryUrl.Root,
            _ => null
            };

        return !string.IsNullOrEmpty(link);
    }

}