@using Education.Web.Pages

<CascadingAuthenticationState>
    <CascadingCustomerState>
        <Router AppAssembly="@typeof(App).Assembly">
            <Found Context="routeData">
                <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                    <Authorizing>
                        <PageSpinner/>
                    </Authorizing>
                    <NotAuthorized>
                        @if (!context.User.Identity?.IsAuthenticated ?? false)
                        {
                            <RedirectTo Url="@CommonLinks.LogIn(Navigation.Uri)"/>
                        }
                        else
                        {
                            <p>You are not authorized to access this resource.</p>
                        }
                    </NotAuthorized>
                </AuthorizeRouteView>
            </Found>
            <NotFound>
                <LayoutView Layout="@typeof(MainLayout)">
                    <PageTitle>@L["Error:NotFound"]</PageTitle>
                    <EduPage>
                        <ErrorContainer Error="@(Error.Create(L["Error:NotFound"], 404))"/>
                    </EduPage>
                </LayoutView>
            </NotFound>
        </Router>
    </CascadingCustomerState>
</CascadingAuthenticationState>

@code
{
    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private NavigationManager Navigation { get; set; } = default!;
    
    [Inject]
    private ThemeService ThemeService { get; set; } = default!;

    [Inject]
    private SidebarService SidebarService { get; set; } = default!;

    [Inject]
    private NotificationService NotificationService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await ThemeService.InitAsync();
        await SidebarService.InitAsync();
        await NotificationService.InitAsync();
    }
}
