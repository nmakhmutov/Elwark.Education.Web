@using Education.Web.Services.Notification
<CascadingAuthenticationState>
    <CascadingCustomerState>
        <Router AppAssembly="@typeof(App).Assembly">
            <Found Context="routeData">
                <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                    <Authorizing>
                        <Spinner/>
                    </Authorizing>
                    <NotAuthorized>
                        @if (context.User.Identity?.IsAuthenticated ?? false)
                        {
                            <AccessDenied/>
                        }
                        else
                        {
                            <RedirectToLogin/>
                        }
                    </NotAuthorized>
                </AuthorizeRouteView>
            </Found>
            <NotFound>
                <LayoutView Layout="@typeof(MainLayout)">
                    <PageNotFound/>
                </LayoutView>
            </NotFound>
        </Router>
    </CascadingCustomerState>
</CascadingAuthenticationState>

@code
{
    [Inject]
    private SidebarService SidebarService { get; set; } = default!;

    [Inject]
    private INotificationService NotificationService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await SidebarService.InitAsync();
        await NotificationService.InitAsync();
    }
}